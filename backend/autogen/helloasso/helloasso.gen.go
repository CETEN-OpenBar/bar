// Package helloasso provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package helloasso

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	OAuth2Scopes = "OAuth2.Scopes"
)

// Defines values for HelloAssoApiV5ModelsApiNotificationsApiNotificationType.
const (
	HelloAssoApiV5ModelsApiNotificationsApiNotificationTypeForm         HelloAssoApiV5ModelsApiNotificationsApiNotificationType = "Form"
	HelloAssoApiV5ModelsApiNotificationsApiNotificationTypeOrder        HelloAssoApiV5ModelsApiNotificationsApiNotificationType = "Order"
	HelloAssoApiV5ModelsApiNotificationsApiNotificationTypeOrganization HelloAssoApiV5ModelsApiNotificationsApiNotificationType = "Organization"
	HelloAssoApiV5ModelsApiNotificationsApiNotificationTypePayment      HelloAssoApiV5ModelsApiNotificationsApiNotificationType = "Payment"
)

// Defines values for HelloAssoApiV5ModelsEnumsFieldType.
const (
	HelloAssoApiV5ModelsEnumsFieldTypeChoiceList HelloAssoApiV5ModelsEnumsFieldType = "ChoiceList"
	HelloAssoApiV5ModelsEnumsFieldTypeDate       HelloAssoApiV5ModelsEnumsFieldType = "Date"
	HelloAssoApiV5ModelsEnumsFieldTypeFile       HelloAssoApiV5ModelsEnumsFieldType = "File"
	HelloAssoApiV5ModelsEnumsFieldTypeFreeText   HelloAssoApiV5ModelsEnumsFieldType = "FreeText"
	HelloAssoApiV5ModelsEnumsFieldTypeNumber     HelloAssoApiV5ModelsEnumsFieldType = "Number"
	HelloAssoApiV5ModelsEnumsFieldTypePhone      HelloAssoApiV5ModelsEnumsFieldType = "Phone"
	HelloAssoApiV5ModelsEnumsFieldTypeTextInput  HelloAssoApiV5ModelsEnumsFieldType = "TextInput"
	HelloAssoApiV5ModelsEnumsFieldTypeYesNo      HelloAssoApiV5ModelsEnumsFieldType = "YesNo"
	HelloAssoApiV5ModelsEnumsFieldTypeZipcode    HelloAssoApiV5ModelsEnumsFieldType = "Zipcode"
)

// Defines values for HelloAssoApiV5ModelsEnumsFormState.
const (
	HelloAssoApiV5ModelsEnumsFormStateDeleted  HelloAssoApiV5ModelsEnumsFormState = "Deleted"
	HelloAssoApiV5ModelsEnumsFormStateDisabled HelloAssoApiV5ModelsEnumsFormState = "Disabled"
	HelloAssoApiV5ModelsEnumsFormStateDraft    HelloAssoApiV5ModelsEnumsFormState = "Draft"
	HelloAssoApiV5ModelsEnumsFormStatePrivate  HelloAssoApiV5ModelsEnumsFormState = "Private"
	HelloAssoApiV5ModelsEnumsFormStatePublic   HelloAssoApiV5ModelsEnumsFormState = "Public"
)

// Defines values for HelloAssoApiV5ModelsEnumsFormType.
const (
	Checkout     HelloAssoApiV5ModelsEnumsFormType = "Checkout"
	CrowdFunding HelloAssoApiV5ModelsEnumsFormType = "CrowdFunding"
	Donation     HelloAssoApiV5ModelsEnumsFormType = "Donation"
	Event        HelloAssoApiV5ModelsEnumsFormType = "Event"
	Membership   HelloAssoApiV5ModelsEnumsFormType = "Membership"
	PaymentForm  HelloAssoApiV5ModelsEnumsFormType = "PaymentForm"
	Shop         HelloAssoApiV5ModelsEnumsFormType = "Shop"
)

// Defines values for HelloAssoApiV5ModelsEnumsItemState.
const (
	HelloAssoApiV5ModelsEnumsItemStateAbandoned  HelloAssoApiV5ModelsEnumsItemState = "Abandoned"
	HelloAssoApiV5ModelsEnumsItemStateCanceled   HelloAssoApiV5ModelsEnumsItemState = "Canceled"
	HelloAssoApiV5ModelsEnumsItemStateContested  HelloAssoApiV5ModelsEnumsItemState = "Contested"
	HelloAssoApiV5ModelsEnumsItemStateDeleted    HelloAssoApiV5ModelsEnumsItemState = "Deleted"
	HelloAssoApiV5ModelsEnumsItemStateProcessed  HelloAssoApiV5ModelsEnumsItemState = "Processed"
	HelloAssoApiV5ModelsEnumsItemStateRefunded   HelloAssoApiV5ModelsEnumsItemState = "Refunded"
	HelloAssoApiV5ModelsEnumsItemStateRefused    HelloAssoApiV5ModelsEnumsItemState = "Refused"
	HelloAssoApiV5ModelsEnumsItemStateRegistered HelloAssoApiV5ModelsEnumsItemState = "Registered"
	HelloAssoApiV5ModelsEnumsItemStateUnknow     HelloAssoApiV5ModelsEnumsItemState = "Unknow"
	HelloAssoApiV5ModelsEnumsItemStateUnknown    HelloAssoApiV5ModelsEnumsItemState = "Unknown"
	HelloAssoApiV5ModelsEnumsItemStateWaiting    HelloAssoApiV5ModelsEnumsItemState = "Waiting"
)

// Defines values for HelloAssoApiV5ModelsEnumsMembershipValidityType.
const (
	Custom     HelloAssoApiV5ModelsEnumsMembershipValidityType = "Custom"
	Illimited  HelloAssoApiV5ModelsEnumsMembershipValidityType = "Illimited"
	MovingYear HelloAssoApiV5ModelsEnumsMembershipValidityType = "MovingYear"
)

// Defines values for HelloAssoApiV5ModelsEnumsOperationState.
const (
	HelloAssoApiV5ModelsEnumsOperationStateAborted       HelloAssoApiV5ModelsEnumsOperationState = "Aborted"
	HelloAssoApiV5ModelsEnumsOperationStateCanceled      HelloAssoApiV5ModelsEnumsOperationState = "Canceled"
	HelloAssoApiV5ModelsEnumsOperationStateError         HelloAssoApiV5ModelsEnumsOperationState = "Error"
	HelloAssoApiV5ModelsEnumsOperationStateInit          HelloAssoApiV5ModelsEnumsOperationState = "Init"
	HelloAssoApiV5ModelsEnumsOperationStateInternalError HelloAssoApiV5ModelsEnumsOperationState = "InternalError"
	HelloAssoApiV5ModelsEnumsOperationStateProcessed     HelloAssoApiV5ModelsEnumsOperationState = "Processed"
	HelloAssoApiV5ModelsEnumsOperationStateProcessing    HelloAssoApiV5ModelsEnumsOperationState = "Processing"
	HelloAssoApiV5ModelsEnumsOperationStateRefused       HelloAssoApiV5ModelsEnumsOperationState = "Refused"
	HelloAssoApiV5ModelsEnumsOperationStateUnknown       HelloAssoApiV5ModelsEnumsOperationState = "Unknown"
)

// Defines values for HelloAssoApiV5ModelsEnumsOrganizationType.
const (
	Association1901         HelloAssoApiV5ModelsEnumsOrganizationType = "Association1901"
	Association1901Rig      HelloAssoApiV5ModelsEnumsOrganizationType = "Association1901Rig"
	Association1901Rup      HelloAssoApiV5ModelsEnumsOrganizationType = "Association1901Rup"
	Association1905         HelloAssoApiV5ModelsEnumsOrganizationType = "Association1905"
	Association1905Rup      HelloAssoApiV5ModelsEnumsOrganizationType = "Association1905Rup"
	Association1908         HelloAssoApiV5ModelsEnumsOrganizationType = "Association1908"
	Association1908Rig      HelloAssoApiV5ModelsEnumsOrganizationType = "Association1908Rig"
	Association1908Rup      HelloAssoApiV5ModelsEnumsOrganizationType = "Association1908Rup"
	AssociationMilitaire    HelloAssoApiV5ModelsEnumsOrganizationType = "AssociationMilitaire"
	AssociationProprietaire HelloAssoApiV5ModelsEnumsOrganizationType = "AssociationProprietaire"
	Autres                  HelloAssoApiV5ModelsEnumsOrganizationType = "Autres"
	CSE                     HelloAssoApiV5ModelsEnumsOrganizationType = "CSE"
	Collectivités           HelloAssoApiV5ModelsEnumsOrganizationType = "Collectivités"
	ComiteEntreprise        HelloAssoApiV5ModelsEnumsOrganizationType = "ComiteEntreprise"
	Cooperative             HelloAssoApiV5ModelsEnumsOrganizationType = "Cooperative"
	Entreprise              HelloAssoApiV5ModelsEnumsOrganizationType = "Entreprise"
	Etablissement           HelloAssoApiV5ModelsEnumsOrganizationType = "Etablissement"
	FabriqueEglise          HelloAssoApiV5ModelsEnumsOrganizationType = "FabriqueEglise"
	FondDotation            HelloAssoApiV5ModelsEnumsOrganizationType = "FondDotation"
	FondationHospitaliere   HelloAssoApiV5ModelsEnumsOrganizationType = "FondationHospitaliere"
	FondationPartenariale   HelloAssoApiV5ModelsEnumsOrganizationType = "FondationPartenariale"
	FondationRup            HelloAssoApiV5ModelsEnumsOrganizationType = "FondationRup"
	FondationScientifique   HelloAssoApiV5ModelsEnumsOrganizationType = "FondationScientifique"
	FondationSousEgide      HelloAssoApiV5ModelsEnumsOrganizationType = "FondationSousEgide"
	FondationUniversitaire  HelloAssoApiV5ModelsEnumsOrganizationType = "FondationUniversitaire"
	FondsPerenite           HelloAssoApiV5ModelsEnumsOrganizationType = "FondsPerenite"
	GIE                     HelloAssoApiV5ModelsEnumsOrganizationType = "GIE"
	GIP                     HelloAssoApiV5ModelsEnumsOrganizationType = "GIP"
	MenseCuriale            HelloAssoApiV5ModelsEnumsOrganizationType = "MenseCuriale"
	SCIC                    HelloAssoApiV5ModelsEnumsOrganizationType = "SCIC"
	SCOP                    HelloAssoApiV5ModelsEnumsOrganizationType = "SCOP"
)

// Defines values for HelloAssoApiV5ModelsEnumsPaymentCashOutState.
const (
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateCantTransferReceiverFull      HelloAssoApiV5ModelsEnumsPaymentCashOutState = "CantTransferReceiverFull"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateCashedOut                     HelloAssoApiV5ModelsEnumsPaymentCashOutState = "CashedOut"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateContested                     HelloAssoApiV5ModelsEnumsPaymentCashOutState = "Contested"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateMoneyIn                       HelloAssoApiV5ModelsEnumsPaymentCashOutState = "MoneyIn"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateRefunded                      HelloAssoApiV5ModelsEnumsPaymentCashOutState = "Refunded"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateRefunding                     HelloAssoApiV5ModelsEnumsPaymentCashOutState = "Refunding"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateTransferInProgress            HelloAssoApiV5ModelsEnumsPaymentCashOutState = "TransferInProgress"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateTransfered                    HelloAssoApiV5ModelsEnumsPaymentCashOutState = "Transfered"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateUnknown                       HelloAssoApiV5ModelsEnumsPaymentCashOutState = "Unknown"
	HelloAssoApiV5ModelsEnumsPaymentCashOutStateWaitingForCashOutConfirmation HelloAssoApiV5ModelsEnumsPaymentCashOutState = "WaitingForCashOutConfirmation"
)

// Defines values for HelloAssoApiV5ModelsEnumsPaymentFrequencyType.
const (
	Installment HelloAssoApiV5ModelsEnumsPaymentFrequencyType = "Installment"
	Monthly     HelloAssoApiV5ModelsEnumsPaymentFrequencyType = "Monthly"
	Single      HelloAssoApiV5ModelsEnumsPaymentFrequencyType = "Single"
)

// Defines values for HelloAssoApiV5ModelsEnumsPaymentMeans.
const (
	BankTransfer HelloAssoApiV5ModelsEnumsPaymentMeans = "BankTransfer"
	Card         HelloAssoApiV5ModelsEnumsPaymentMeans = "Card"
	Cash         HelloAssoApiV5ModelsEnumsPaymentMeans = "Cash"
	Check        HelloAssoApiV5ModelsEnumsPaymentMeans = "Check"
	None         HelloAssoApiV5ModelsEnumsPaymentMeans = "None"
	Other        HelloAssoApiV5ModelsEnumsPaymentMeans = "Other"
	Sepa         HelloAssoApiV5ModelsEnumsPaymentMeans = "Sepa"
)

// Defines values for HelloAssoApiV5ModelsEnumsPaymentState.
const (
	Abandoned             HelloAssoApiV5ModelsEnumsPaymentState = "Abandoned"
	Authorized            HelloAssoApiV5ModelsEnumsPaymentState = "Authorized"
	AuthorizedPreprod     HelloAssoApiV5ModelsEnumsPaymentState = "AuthorizedPreprod"
	Canceled              HelloAssoApiV5ModelsEnumsPaymentState = "Canceled"
	Contested             HelloAssoApiV5ModelsEnumsPaymentState = "Contested"
	Corrected             HelloAssoApiV5ModelsEnumsPaymentState = "Corrected"
	Deleted               HelloAssoApiV5ModelsEnumsPaymentState = "Deleted"
	Error                 HelloAssoApiV5ModelsEnumsPaymentState = "Error"
	Inconsistent          HelloAssoApiV5ModelsEnumsPaymentState = "Inconsistent"
	Init                  HelloAssoApiV5ModelsEnumsPaymentState = "Init"
	NoDonation            HelloAssoApiV5ModelsEnumsPaymentState = "NoDonation"
	Pending               HelloAssoApiV5ModelsEnumsPaymentState = "Pending"
	Refunded              HelloAssoApiV5ModelsEnumsPaymentState = "Refunded"
	Refunding             HelloAssoApiV5ModelsEnumsPaymentState = "Refunding"
	Refused               HelloAssoApiV5ModelsEnumsPaymentState = "Refused"
	Registered            HelloAssoApiV5ModelsEnumsPaymentState = "Registered"
	Unknown               HelloAssoApiV5ModelsEnumsPaymentState = "Unknown"
	Waiting               HelloAssoApiV5ModelsEnumsPaymentState = "Waiting"
	WaitingAuthentication HelloAssoApiV5ModelsEnumsPaymentState = "WaitingAuthentication"
	WaitingBankValidation HelloAssoApiV5ModelsEnumsPaymentState = "WaitingBankValidation"
	WaitingBankWithdraw   HelloAssoApiV5ModelsEnumsPaymentState = "WaitingBankWithdraw"
)

// Defines values for HelloAssoApiV5ModelsEnumsPaymentType.
const (
	Credit  HelloAssoApiV5ModelsEnumsPaymentType = "Credit"
	Debit   HelloAssoApiV5ModelsEnumsPaymentType = "Debit"
	Offline HelloAssoApiV5ModelsEnumsPaymentType = "Offline"
)

// Defines values for HelloAssoApiV5ModelsEnumsPriceCategory.
const (
	Fixed HelloAssoApiV5ModelsEnumsPriceCategory = "Fixed"
	Free  HelloAssoApiV5ModelsEnumsPriceCategory = "Free"
	Pwyw  HelloAssoApiV5ModelsEnumsPriceCategory = "Pwyw"
)

// Defines values for HelloAssoApiV5ModelsEnumsRecordActionType.
const (
	Delete HelloAssoApiV5ModelsEnumsRecordActionType = "Delete"
	Insert HelloAssoApiV5ModelsEnumsRecordActionType = "Insert"
)

// Defines values for HelloAssoApiV5ModelsEnumsSortField.
const (
	HelloAssoApiV5ModelsEnumsSortFieldCreationDate HelloAssoApiV5ModelsEnumsSortField = "CreationDate"
	HelloAssoApiV5ModelsEnumsSortFieldDate         HelloAssoApiV5ModelsEnumsSortField = "Date"
	HelloAssoApiV5ModelsEnumsSortFieldUpdateDate   HelloAssoApiV5ModelsEnumsSortField = "UpdateDate"
)

// Defines values for HelloAssoApiV5ModelsEnumsSortOrder.
const (
	Asc  HelloAssoApiV5ModelsEnumsSortOrder = "Asc"
	Desc HelloAssoApiV5ModelsEnumsSortOrder = "Desc"
)

// Defines values for HelloAssoApiV5ModelsEnumsTagType.
const (
	Explore  HelloAssoApiV5ModelsEnumsTagType = "Explore"
	Internal HelloAssoApiV5ModelsEnumsTagType = "Internal"
)

// Defines values for HelloAssoApiV5ModelsEnumsTierType.
const (
	HelloAssoApiV5ModelsEnumsTierTypeBonus           HelloAssoApiV5ModelsEnumsTierType = "Bonus"
	HelloAssoApiV5ModelsEnumsTierTypeContribution    HelloAssoApiV5ModelsEnumsTierType = "Contribution"
	HelloAssoApiV5ModelsEnumsTierTypeDonation        HelloAssoApiV5ModelsEnumsTierType = "Donation"
	HelloAssoApiV5ModelsEnumsTierTypeMembership      HelloAssoApiV5ModelsEnumsTierType = "Membership"
	HelloAssoApiV5ModelsEnumsTierTypeMonthlyDonation HelloAssoApiV5ModelsEnumsTierType = "MonthlyDonation"
	HelloAssoApiV5ModelsEnumsTierTypeMonthlyPayment  HelloAssoApiV5ModelsEnumsTierType = "MonthlyPayment"
	HelloAssoApiV5ModelsEnumsTierTypeOfflineDonation HelloAssoApiV5ModelsEnumsTierType = "OfflineDonation"
	HelloAssoApiV5ModelsEnumsTierTypePayment         HelloAssoApiV5ModelsEnumsTierType = "Payment"
	HelloAssoApiV5ModelsEnumsTierTypeProduct         HelloAssoApiV5ModelsEnumsTierType = "Product"
	HelloAssoApiV5ModelsEnumsTierTypeRegistration    HelloAssoApiV5ModelsEnumsTierType = "Registration"
)

// Defines values for HelloAssoModelsEnumsGlobalRole.
const (
	FormAdmin         HelloAssoModelsEnumsGlobalRole = "FormAdmin"
	OrganizationAdmin HelloAssoModelsEnumsGlobalRole = "OrganizationAdmin"
)

// HaTrustContractLegalInformationAddressAddressDto defines model for HaTrust.Contract.LegalInformation.Address.AddressDto.
type HaTrustContractLegalInformationAddressAddressDto struct {
	City          *string `json:"city"`
	Country       *int32  `json:"country"`
	CountryAlpha3 *string `json:"countryAlpha3"`
	CountryName   *string `json:"countryName"`
	Line          *string `json:"line"`
	ZipCode       *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsAccountCompanyLegalStatusModel user/payer company legal status
type HelloAssoApiV5ModelsAccountCompanyLegalStatusModel struct {
	// Id Company legal status id
	Id *int32 `json:"id,omitempty"`

	// Label Company legal status label
	Label *string `json:"label"`
}

// HelloAssoApiV5ModelsAccountOrganismCategoryModel defines model for HelloAsso.Api.V5.Models.Account.OrganismCategoryModel.
type HelloAssoApiV5ModelsAccountOrganismCategoryModel struct {
	Id         *int32  `json:"id,omitempty"`
	Label      *string `json:"label"`
	ShortLabel *string `json:"shortLabel"`
}

// HelloAssoApiV5ModelsAccountsClientsApiClientModel defines model for HelloAsso.Api.V5.Models.Accounts.Clients.ApiClientModel.
type HelloAssoApiV5ModelsAccountsClientsApiClientModel struct {
	Domain      *string   `json:"domain"`
	Id          *string   `json:"id"`
	PartnerName *string   `json:"partnerName"`
	Privileges  *[]string `json:"privileges"`

	// Secret Filled only when requested by the organization back office
	Secret *string `json:"secret"`
}

// HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest defines model for HelloAsso.Api.V5.Models.Accounts.Clients.PublicPutApiClientRequest.
type HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest struct {
	// Domain Client domain : Url used to grant authorization redirection
	Domain *string `json:"domain"`
}

// HelloAssoApiV5ModelsApiNotificationsApiNotificationType defines model for HelloAsso.Api.V5.Models.ApiNotifications.ApiNotificationType.
type HelloAssoApiV5ModelsApiNotificationsApiNotificationType string

// HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel Organization notification URL Model class
type HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel struct {
	ApiNotificationType *HelloAssoApiV5ModelsApiNotificationsApiNotificationType `json:"apiNotificationType,omitempty"`

	// SignatureKey Signature Key : allows you to verify the authenticity of notifications
	SignatureKey *string `json:"signatureKey"`

	// Url The notification Url
	Url *string `json:"url"`
}

// HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody defines model for HelloAsso.Api.V5.Models.ApiNotifications.PostApiUrlNotificationBody.
type HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody struct {
	NotificationType *HelloAssoApiV5ModelsApiNotificationsApiNotificationType `json:"notificationType,omitempty"`

	// Url The Api notification Url
	Url string `json:"url"`
}

// HelloAssoApiV5ModelsCartsCheckoutIntentResponse defines model for HelloAsso.Api.V5.Models.Carts.CheckoutIntentResponse.
type HelloAssoApiV5ModelsCartsCheckoutIntentResponse struct {
	// Id Id of the checkout intent
	Id *int32 `json:"id,omitempty"`

	// Metadata Metadata (Json object)
	// Only if metadata were sent on the checkout form initialization
	Metadata *interface{}                               `json:"metadata"`
	Order    *HelloAssoApiV5ModelsStatisticsOrderDetail `json:"order,omitempty"`

	// RedirectUrl Url where the contributor must be redirected to
	RedirectUrl *string `json:"redirectUrl"`
}

// HelloAssoApiV5ModelsCartsCheckoutPayer defines model for HelloAsso.Api.V5.Models.Carts.CheckoutPayer.
type HelloAssoApiV5ModelsCartsCheckoutPayer struct {
	// Address Address
	Address *string `json:"address"`

	// City City
	City *string `json:"city"`

	// CompanyName Used if the payer is a company
	CompanyName *string `json:"companyName"`

	// Country 3 letter country code
	Country *string `json:"country"`

	// DateOfBirth Date of birth (Date only, no time part)
	DateOfBirth *time.Time `json:"dateOfBirth"`

	// Email Email
	Email *string `json:"email"`

	// FirstName FirstName
	FirstName *string `json:"firstName"`

	// LastName LastName
	LastName *string `json:"lastName"`

	// ZipCode ZipCode
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsCartsCheckoutTerm defines model for HelloAsso.Api.V5.Models.Carts.CheckoutTerm.
type HelloAssoApiV5ModelsCartsCheckoutTerm struct {
	// Amount Term amount, all taxes included, in cents
	Amount int32 `json:"amount"`

	// Date Term date
	Date time.Time `json:"date"`
}

// HelloAssoApiV5ModelsCartsInitCheckoutBody defines model for HelloAsso.Api.V5.Models.Carts.InitCheckoutBody.
type HelloAssoApiV5ModelsCartsInitCheckoutBody struct {
	// BackUrl Url followed by the contributor if he wants to return to its previous site
	BackUrl string `json:"backUrl"`

	// ContainsDonation The sale (or a part of) is a donation
	ContainsDonation bool `json:"containsDonation"`

	// ErrorUrl Url called in case of an error during the checkout process
	ErrorUrl string `json:"errorUrl"`

	// InitialAmount The amount for the first term, all taxes included, in cents (required)
	InitialAmount int32 `json:"initialAmount"`

	// ItemName Item name (required)
	// A text describing what the user paid for ('Renew license', '3 tickets', donation, etc).
	// Will be displayed in the near future in the user space and in the organization back office
	ItemName string `json:"itemName"`

	// Metadata Metadata (optional)
	// Json object (max length : 20000)
	Metadata *interface{}                            `json:"metadata"`
	Payer    *HelloAssoApiV5ModelsCartsCheckoutPayer `json:"payer,omitempty"`

	// ReturnUrl Url called after the payment
	ReturnUrl string `json:"returnUrl"`

	// Terms The list of future terms (if applicable)
	Terms *[]HelloAssoApiV5ModelsCartsCheckoutTerm `json:"terms"`

	// TotalAmount Total amount, all taxes included, in cents (required)
	// Must be equal to the sum of the initial amount and subsequent terms
	TotalAmount int32 `json:"totalAmount"`
}

// HelloAssoApiV5ModelsCartsInitCheckoutResponse defines model for HelloAsso.Api.V5.Models.Carts.InitCheckoutResponse.
type HelloAssoApiV5ModelsCartsInitCheckoutResponse struct {
	// Id Id of the checkout intent
	Id *int32 `json:"id,omitempty"`

	// RedirectUrl Url where the contributor must be redirected to
	RedirectUrl *string `json:"redirectUrl"`
}

// HelloAssoApiV5ModelsCommonContactModel Contact class
type HelloAssoApiV5ModelsCommonContactModel struct {
	// Email Contact email
	Email *string `json:"email"`

	// PhoneNumber Contact phone number
	PhoneNumber *string `json:"phoneNumber"`
}

// HelloAssoApiV5ModelsCommonDocumentModel DocumentModel class
type HelloAssoApiV5ModelsCommonDocumentModel struct {
	// FileName The file name of document
	FileName *string `json:"fileName"`
	Id       *int32  `json:"id"`

	// PublicUrl The public url of document
	PublicUrl *string `json:"publicUrl"`
}

// HelloAssoApiV5ModelsCommonMetaModel MetaModel class
type HelloAssoApiV5ModelsCommonMetaModel struct {
	// CreatedAt CreatedAt
	CreatedAt *time.Time `json:"createdAt,omitempty"`

	// UpdatedAt UpdateAt
	UpdatedAt *time.Time `json:"updatedAt,omitempty"`
}

// HelloAssoApiV5ModelsCommonPaginationModel Pagination model class
type HelloAssoApiV5ModelsCommonPaginationModel struct {
	// ContinuationToken Continuation Token to get next results
	ContinuationToken *string `json:"continuationToken"`

	// PageIndex Current page index
	PageIndex *int32 `json:"pageIndex,omitempty"`

	// PageSize Page size
	PageSize *int32 `json:"pageSize,omitempty"`

	// TotalCount Total number of results available
	TotalCount *int32 `json:"totalCount,omitempty"`

	// TotalPages Total number of pages of results with current page size
	TotalPages *int32 `json:"totalPages,omitempty"`
}

// HelloAssoApiV5ModelsCommonPlaceModel PlaceModel class
type HelloAssoApiV5ModelsCommonPlaceModel struct {
	// Address Address
	Address *string `json:"address"`

	// City City
	City *string `json:"city"`

	// Country 3 letter country code
	Country     *string                           `json:"country"`
	GeoLocation *HelloAssoModelsSharedGeoLocation `json:"geoLocation,omitempty"`

	// Name Name of the place
	Name *string `json:"name"`

	// ZipCode ZipCode
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsDirectoryDirectoryOrganizationPublicModel DirectoryOrganizationPublicModel class
type HelloAssoApiV5ModelsDirectoryDirectoryOrganizationPublicModel struct {
	// Address Organization Address (for authorized applications or if authorized by the organization)
	Address *string `json:"address"`

	// Banner The organization banner
	Banner *string `json:"banner"`

	// Category Organization category label
	Category     *string `json:"category"`
	CategoryJoId *int32  `json:"categoryJoId"`

	// City Organization city
	City *string `json:"city"`

	// Description Organization description
	Description *string `json:"description"`

	// FiscalReceiptEligibility The organism can issue fiscal receipts (type ok and has not deactivated it)
	// Must configure it and be authenticated to become enabled
	FiscalReceiptEligibility *bool `json:"fiscalReceiptEligibility,omitempty"`

	// FiscalReceiptIssuanceEnabled The organism is eligible, has set up his options, and is authenticated.
	FiscalReceiptIssuanceEnabled *bool                             `json:"fiscalReceiptIssuanceEnabled,omitempty"`
	Geolocation                  *HelloAssoModelsSharedGeoLocation `json:"geolocation,omitempty"`

	// IsAuthenticated The organization is authenticated. Property returned only when asked by an organization admin.
	IsAuthenticated *bool `json:"isAuthenticated"`

	// IsCashInCompliant If transaction can be init on the organization or not.
	IsCashInCompliant *bool `json:"isCashInCompliant"`

	// LinkedPartners Partners linked to this organization
	LinkedPartners *[]string `json:"linkedPartners"`

	// Logo Logo of organization
	Logo *string `json:"logo"`

	// Name Name of organization
	Name *string `json:"name"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// RnaNumber Unique identifier assigned when creating the association
	RnaNumber *string                         `json:"rnaNumber"`
	Role      *HelloAssoModelsEnumsGlobalRole `json:"role,omitempty"`

	// Tags The public tags of the organization
	Tags *[]string                                  `json:"tags"`
	Type *HelloAssoApiV5ModelsEnumsOrganizationType `json:"type,omitempty"`

	// UpdateDate Last update date of the organization
	UpdateDate *time.Time `json:"updateDate,omitempty"`

	// Url The organization url
	Url *string `json:"url"`

	// ZipCode Organization zip code
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsDirectoryListFormsRequest defines model for HelloAsso.Api.V5.Models.Directory.ListFormsRequest.
type HelloAssoApiV5ModelsDirectoryListFormsRequest struct {
	// FormActivityType The Activity Type of the form
	FormActivityType *[]string `json:"formActivityType"`

	// FormCities The cities where the forms are located
	FormCities *[]string `json:"formCities"`

	// FormCountries The countries where the forms are located
	FormCountries *[]string `json:"formCountries"`

	// FormDepartments The departments where the forms are located
	FormDepartments *[]string `json:"formDepartments"`

	// FormDescription Textual search for form description
	FormDescription *string `json:"formDescription"`

	// FormEndDateMax The exclusive maximum end date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormEndDateMax *time.Time `json:"formEndDateMax"`

	// FormEndDateMin The inclusive minimum end date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormEndDateMin *time.Time `json:"formEndDateMin"`

	// FormHasRemainingEntries Allow only forms with remaning entries if true
	FormHasRemainingEntries *bool `json:"formHasRemainingEntries"`

	// FormInternalTags Allow only forms with internal tags
	// this filter is for special operations only
	FormInternalTags *[]string `json:"formInternalTags"`

	// FormIsFree Allow only free forms if true
	FormIsFree *bool `json:"formIsFree"`

	// FormName Textual search for form name
	FormName *string `json:"formName"`

	// FormPublicTags Allow only forms with public tags
	FormPublicTags *[]string `json:"formPublicTags"`

	// FormPublicationStartDateMax The exclusive maximum publication date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormPublicationStartDateMax *time.Time `json:"formPublicationStartDateMax"`

	// FormPublicationStartDateMin The inclusive minimum publication date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormPublicationStartDateMin *time.Time `json:"formPublicationStartDateMin"`

	// FormRegions The regions where the forms are located
	FormRegions *[]string `json:"formRegions"`

	// FormStartDateMax The exclusive maximum start date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormStartDateMax *time.Time `json:"formStartDateMax"`

	// FormStartDateMin The inclusive minimum start date of the forms, format "yyyy-MM-ddTHH:mm:ss.fffK"
	FormStartDateMin *time.Time `json:"formStartDateMin"`

	// FormTypes The form types : CrowdFunding, Membership, Event, Donation, PaymentForm ...
	FormTypes *[]HelloAssoApiV5ModelsEnumsFormType `json:"formTypes"`

	// FormZipCodes The zip codes where the forms are located
	FormZipCodes *[]string `json:"formZipCodes"`

	// OrganizationCategories The categories of the forms
	OrganizationCategories *[]string `json:"organizationCategories"`

	// OrganizationCities The cities where the organizations are located
	OrganizationCities *[]string `json:"organizationCities"`

	// OrganizationDepartments The departments where the organizations are located
	OrganizationDepartments *[]string `json:"organizationDepartments"`

	// OrganizationDescription Textual search for organization description
	OrganizationDescription *string `json:"organizationDescription"`

	// OrganizationFiscalReceiptEligibility Allow only organization with a fiscal receipt eligibility
	OrganizationFiscalReceiptEligibility *bool `json:"organizationFiscalReceiptEligibility"`

	// OrganizationLinkedPartners Organization linked partners
	OrganizationLinkedPartners *[]string `json:"organizationLinkedPartners"`

	// OrganizationName Textual search for organization name
	OrganizationName *string `json:"organizationName"`

	// OrganizationRegions The regions where the organizations are located
	OrganizationRegions *[]string `json:"organizationRegions"`

	// OrganizationTypes The organization types
	OrganizationTypes *[]string `json:"organizationTypes"`

	// OrganizationZipCodes The zip codes where the organizations are located
	OrganizationZipCodes *[]string `json:"organizationZipCodes"`
}

// HelloAssoApiV5ModelsDirectoryListOrganizationsRequest defines model for HelloAsso.Api.V5.Models.Directory.ListOrganizationsRequest.
type HelloAssoApiV5ModelsDirectoryListOrganizationsRequest struct {
	// Categories The categories of the organizations
	Categories *[]string `json:"categories"`

	// Cities The cities where the organizations are located
	Cities *[]string `json:"cities"`

	// Departments The departments where the organizations are located
	Departments *[]string `json:"departments"`

	// Description Textual search for organization description
	Description *string `json:"description"`

	// FiscalReceiptEligibility Allow only organization with a fiscal receipt eligibility
	FiscalReceiptEligibility *bool `json:"fiscalReceiptEligibility"`

	// InternalTags Allow only Organization with internal tags
	// this filter is for special operations only
	InternalTags *[]string `json:"internalTags"`

	// LinkedPartners Allow only Organization with linked partners
	LinkedPartners *[]string `json:"linkedPartners"`

	// Name Textual search for organization name
	Name *string `json:"name"`

	// Regions The regions where the organizations are located
	Regions *[]string `json:"regions"`

	// Tags Allow only Organization with public tags
	Tags *[]string `json:"tags"`

	// Types The organization types
	Types *[]string `json:"types"`

	// ZipCodes The zip codes where the organizations are located
	ZipCodes *[]string `json:"zipCodes"`
}

// HelloAssoApiV5ModelsDirectoryPartnerOrganizationModel PartnerOrganizationModel class
type HelloAssoApiV5ModelsDirectoryPartnerOrganizationModel struct {
	// AvailableAccessToken True if exist a valid organization access token obtained by authorize flow
	AvailableAccessToken *bool `json:"availableAccessToken,omitempty"`

	// Organization DirectoryOrganizationPublicModel class
	Organization *HelloAssoApiV5ModelsDirectoryDirectoryOrganizationPublicModel `json:"organization,omitempty"`
}

// HelloAssoApiV5ModelsDirectorySynchronizableFormModel SynchronizableFormModel class
type HelloAssoApiV5ModelsDirectorySynchronizableFormModel struct {
	Action *HelloAssoApiV5ModelsEnumsRecordActionType `json:"action,omitempty"`

	// Record A basic form model
	Record *HelloAssoApiV5ModelsFormsFormBasicModel `json:"record,omitempty"`
}

// HelloAssoApiV5ModelsDirectorySynchronizableOrganizationModel SynchronizableOrganizationModel class
type HelloAssoApiV5ModelsDirectorySynchronizableOrganizationModel struct {
	Action *HelloAssoApiV5ModelsEnumsRecordActionType `json:"action,omitempty"`

	// Record A basic organization model
	Record *HelloAssoApiV5ModelsOrganizationOrganizationBasicModel `json:"record,omitempty"`
}

// HelloAssoApiV5ModelsEnumsFieldType defines model for HelloAsso.Api.V5.Models.Enums.FieldType.
type HelloAssoApiV5ModelsEnumsFieldType string

// HelloAssoApiV5ModelsEnumsFormState defines model for HelloAsso.Api.V5.Models.Enums.FormState.
type HelloAssoApiV5ModelsEnumsFormState string

// HelloAssoApiV5ModelsEnumsFormType defines model for HelloAsso.Api.V5.Models.Enums.FormType.
type HelloAssoApiV5ModelsEnumsFormType string

// HelloAssoApiV5ModelsEnumsItemState defines model for HelloAsso.Api.V5.Models.Enums.ItemState.
type HelloAssoApiV5ModelsEnumsItemState string

// HelloAssoApiV5ModelsEnumsMembershipValidityType Enum which represents the membership validity type
type HelloAssoApiV5ModelsEnumsMembershipValidityType string

// HelloAssoApiV5ModelsEnumsOperationState defines model for HelloAsso.Api.V5.Models.Enums.OperationState.
type HelloAssoApiV5ModelsEnumsOperationState string

// HelloAssoApiV5ModelsEnumsOrganizationType defines model for HelloAsso.Api.V5.Models.Enums.OrganizationType.
type HelloAssoApiV5ModelsEnumsOrganizationType string

// HelloAssoApiV5ModelsEnumsPaymentCashOutState defines model for HelloAsso.Api.V5.Models.Enums.PaymentCashOutState.
type HelloAssoApiV5ModelsEnumsPaymentCashOutState string

// HelloAssoApiV5ModelsEnumsPaymentFrequencyType defines model for HelloAsso.Api.V5.Models.Enums.PaymentFrequencyType.
type HelloAssoApiV5ModelsEnumsPaymentFrequencyType string

// HelloAssoApiV5ModelsEnumsPaymentMeans defines model for HelloAsso.Api.V5.Models.Enums.PaymentMeans.
type HelloAssoApiV5ModelsEnumsPaymentMeans string

// HelloAssoApiV5ModelsEnumsPaymentState defines model for HelloAsso.Api.V5.Models.Enums.PaymentState.
type HelloAssoApiV5ModelsEnumsPaymentState string

// HelloAssoApiV5ModelsEnumsPaymentType defines model for HelloAsso.Api.V5.Models.Enums.PaymentType.
type HelloAssoApiV5ModelsEnumsPaymentType string

// HelloAssoApiV5ModelsEnumsPriceCategory defines model for HelloAsso.Api.V5.Models.Enums.PriceCategory.
type HelloAssoApiV5ModelsEnumsPriceCategory string

// HelloAssoApiV5ModelsEnumsRecordActionType defines model for HelloAsso.Api.V5.Models.Enums.RecordActionType.
type HelloAssoApiV5ModelsEnumsRecordActionType string

// HelloAssoApiV5ModelsEnumsSortField defines model for HelloAsso.Api.V5.Models.Enums.SortField.
type HelloAssoApiV5ModelsEnumsSortField string

// HelloAssoApiV5ModelsEnumsSortOrder defines model for HelloAsso.Api.V5.Models.Enums.SortOrder.
type HelloAssoApiV5ModelsEnumsSortOrder string

// HelloAssoApiV5ModelsEnumsTagType defines model for HelloAsso.Api.V5.Models.Enums.TagType.
type HelloAssoApiV5ModelsEnumsTagType string

// HelloAssoApiV5ModelsEnumsTierType defines model for HelloAsso.Api.V5.Models.Enums.TierType.
type HelloAssoApiV5ModelsEnumsTierType string

// HelloAssoApiV5ModelsFormsCustomFieldPublicModel A custom field can be assigned to a Tier or an ExtraOption
// It is used to give extra information during the reservation of a tier
type HelloAssoApiV5ModelsFormsCustomFieldPublicModel struct {
	// Id Id of the customField
	Id *int32 `json:"id,omitempty"`

	// IsRequired True if the custom field must be filled by the user before validating a cart
	IsRequired *bool `json:"isRequired,omitempty"`

	// Label The label to be displayed to the user
	Label *string                             `json:"label"`
	Type  *HelloAssoApiV5ModelsEnumsFieldType `json:"type,omitempty"`

	// Values The list of possible values if type is a CHOICE_LIST
	Values *[]string `json:"values"`
}

// HelloAssoApiV5ModelsFormsExtraOptionPublicModel ExtraOptionFullModel
type HelloAssoApiV5ModelsFormsExtraOptionPublicModel struct {
	// CustomFields List of custom fields to be filled by the user
	CustomFields *[]HelloAssoApiV5ModelsFormsCustomFieldPublicModel `json:"customFields"`

	// Description The description of the option
	Description *string `json:"description"`

	// Id Id
	Id *int32 `json:"id,omitempty"`

	// IsRequired Additional option is required/mandatory
	IsRequired *bool `json:"isRequired,omitempty"`

	// Label The name of the option
	Label *string `json:"label"`

	// Price Price of the extraOption, can be free
	Price *int32 `json:"price,omitempty"`

	// VatRate Vat rate if applicable
	// Amount have to be 0.10 for 10%
	VatRate *float64 `json:"vatRate,omitempty"`
}

// HelloAssoApiV5ModelsFormsFormBasicModel A basic form model
type HelloAssoApiV5ModelsFormsFormBasicModel struct {
	// FormSlug The form slug
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// Url The form url
	Url *string `json:"url"`
}

// HelloAssoApiV5ModelsFormsFormLightModel FormLightModel class
type HelloAssoApiV5ModelsFormsFormLightModel struct {
	// Banner DocumentModel class
	Banner *HelloAssoApiV5ModelsCommonDocumentModel `json:"banner,omitempty"`

	// Currency Currency
	Currency *string `json:"currency"`

	// Description Short description (one line)
	Description *string `json:"description"`

	// EndDate The datetime of the activity end
	EndDate *time.Time `json:"endDate"`

	// FormSlug The form slug
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Logo DocumentModel class
	Logo *HelloAssoApiV5ModelsCommonDocumentModel `json:"logo,omitempty"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// PrivateTitle Private Title
	PrivateTitle *string `json:"privateTitle"`

	// StartDate The datetime of the activity start
	StartDate *time.Time                          `json:"startDate"`
	State     *HelloAssoApiV5ModelsEnumsFormState `json:"state,omitempty"`

	// Title Title
	Title *string `json:"title"`

	// Url The form url
	Url *string `json:"url"`

	// WidgetButtonUrl Url of the widget button
	WidgetButtonUrl *string `json:"widgetButtonUrl"`

	// WidgetCounterUrl Url of the counter widget
	WidgetCounterUrl *string `json:"widgetCounterUrl"`

	// WidgetFullUrl Url of the form widget
	WidgetFullUrl *string `json:"widgetFullUrl"`

	// WidgetVignetteHorizontalUrl Url of the horizontal vignette widget
	WidgetVignetteHorizontalUrl *string `json:"widgetVignetteHorizontalUrl"`

	// WidgetVignetteVerticalUrl Url of the vertical vignette widget
	WidgetVignetteVerticalUrl *string `json:"widgetVignetteVerticalUrl"`
}

// HelloAssoApiV5ModelsFormsFormPublicModel FormPublicModel class
type HelloAssoApiV5ModelsFormsFormPublicModel struct {
	// ActivityType Activity type of the event eg. "Atelier(s) / Stage(s)" matching one of the provided type values <a href="index#!/Values/Values_Get"> provided here</a> or a custom value is allowed.
	ActivityType *string `json:"activityType"`

	// ActivityTypeId Activity type identifier
	ActivityTypeId *int32 `json:"activityTypeId,omitempty"`

	// Banner DocumentModel class
	Banner *HelloAssoApiV5ModelsCommonDocumentModel `json:"banner,omitempty"`

	// Currency Currency
	Currency *string `json:"currency"`

	// Description Short description (one line)
	Description *string `json:"description"`

	// EndDate The datetime of the activity end
	EndDate *time.Time `json:"endDate"`

	// FormSlug The form slug
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Logo DocumentModel class
	Logo *HelloAssoApiV5ModelsCommonDocumentModel `json:"logo,omitempty"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrganizationLogo Organization Logo
	OrganizationLogo *string `json:"organizationLogo"`

	// OrganizationName Organization Name
	OrganizationName *string `json:"organizationName"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// PersonalizedMessage A message customized by the organization administrator.
	PersonalizedMessage *string `json:"personalizedMessage"`

	// Place PlaceModel class
	Place *HelloAssoApiV5ModelsCommonPlaceModel `json:"place,omitempty"`

	// PrivateTitle Private Title
	PrivateTitle *string `json:"privateTitle"`

	// SaleEndDate The datetime (Inclusive) at which the sales end.
	// If null the orders will be available until the end of the campaign.
	SaleEndDate *time.Time `json:"saleEndDate"`

	// SaleStartDate The datetime (Inclusive) at which the users can start placing orders.
	// If null the orders will be available as soon as the campaign is published.
	SaleStartDate *time.Time `json:"saleStartDate"`

	// StartDate The datetime of the activity start
	StartDate *time.Time                          `json:"startDate"`
	State     *HelloAssoApiV5ModelsEnumsFormState `json:"state,omitempty"`

	// Tiers Tiers
	Tiers *[]HelloAssoApiV5ModelsFormsTierPublicModel `json:"tiers"`

	// Title Title
	Title *string `json:"title"`

	// Url The form url
	Url *string `json:"url"`

	// ValidityType Enum which represents the membership validity type
	ValidityType *HelloAssoApiV5ModelsEnumsMembershipValidityType `json:"validityType,omitempty"`

	// WidgetButtonUrl Url of the widget button
	WidgetButtonUrl *string `json:"widgetButtonUrl"`

	// WidgetCounterUrl Url of the counter widget
	WidgetCounterUrl *string `json:"widgetCounterUrl"`

	// WidgetFullUrl Url of the form widget
	WidgetFullUrl *string `json:"widgetFullUrl"`

	// WidgetVignetteHorizontalUrl Url of the horizontal vignette widget
	WidgetVignetteHorizontalUrl *string `json:"widgetVignetteHorizontalUrl"`

	// WidgetVignetteVerticalUrl Url of the vertical vignette widget
	WidgetVignetteVerticalUrl *string `json:"widgetVignetteVerticalUrl"`
}

// HelloAssoApiV5ModelsFormsFormQuickCreateModel defines model for HelloAsso.Api.V5.Models.Forms.FormQuickCreateModel.
type HelloAssoApiV5ModelsFormsFormQuickCreateModel struct {
	FormSlug         *string `json:"formSlug"`
	OrganizationSlug *string `json:"organizationSlug"`
	PublicUrl        *string `json:"publicUrl"`
}

// HelloAssoApiV5ModelsFormsFormQuickCreateRequest defines model for HelloAsso.Api.V5.Models.Forms.FormQuickCreateRequest.
type HelloAssoApiV5ModelsFormsFormQuickCreateRequest struct {
	// AcceptOpenDonation Whether the user will be allowed to make a single open donation with an order. The amount of the donation is open, but 3 presets can be set in OpenDonationPresetAmount
	AcceptOpenDonation *bool `json:"acceptOpenDonation,omitempty"`

	// AcceptOpenMonthlyDonation Whether the user will be allowed to make a monthly open donation for donation forms
	AcceptOpenMonthlyDonation *bool `json:"acceptOpenMonthlyDonation,omitempty"`

	// ActivityTypeId Activity type identifier, matching one of the provided type values <a href="index#!/Values/Values_Get"> provided here</a>
	ActivityTypeId *int32 `json:"activityTypeId"`

	// AllowComment allowComment
	AllowComment *bool `json:"allowComment,omitempty"`

	// AllowIndividualPayer Whether user are allowed to personally contribute to this form (only for donation and crowdfunding).
	AllowIndividualPayer *bool `json:"allowIndividualPayer,omitempty"`

	// AllowOrganismPayer Whether users are allowed to contribute to this form through an organism (only for donation and crowdfunding).
	AllowOrganismPayer *bool `json:"allowOrganismPayer,omitempty"`

	// AmountVisible amountVisible
	AmountVisible *bool `json:"amountVisible,omitempty"`

	// Banner The banner of the form
	Banner *string `json:"banner"`

	// Color The color of the form
	Color *string `json:"color"`

	// Contact Contact class
	Contact *HelloAssoApiV5ModelsCommonContactModel `json:"contact,omitempty"`

	// Description The description of form
	Description *string `json:"description"`

	// DisplayContributorName Display contributor name for fundraiser
	DisplayContributorName *bool `json:"displayContributorName,omitempty"`

	// DisplayParticipantsCount Indicates that the members count must be displayed on the form.
	DisplayParticipantsCount *bool `json:"displayParticipantsCount,omitempty"`

	// DisplayRemainingEntries Indicates that the remaining entries must be displayed on the form.
	DisplayRemainingEntries *bool `json:"displayRemainingEntries,omitempty"`

	// DisplayVersion The form display version (only for donation).
	DisplayVersion *int32 `json:"displayVersion"`

	// EndDate The datetime of the activity end
	EndDate *time.Time `json:"endDate"`

	// FinancialGoal Indicates the financial goal (amount of money raised) for the whole form. Null means no goal.
	FinancialGoal *int64 `json:"financialGoal"`

	// GenerateMembershipCards Entrust the issuance of membership cards to HelloAsso (automatically sent by email to participants)
	GenerateMembershipCards *bool `json:"generateMembershipCards,omitempty"`

	// GenerateTickets Entrust the issuance of tickets to HelloAsso (automatically sent by email to participants)
	GenerateTickets *bool `json:"generateTickets,omitempty"`

	// InvertDescriptions Allows you to add the long description above the store catalog.
	InvertDescriptions *bool `json:"invertDescriptions,omitempty"`

	// LabelConditionsAndTermsFile Label conditions and terms file
	LabelConditionsAndTermsFile *string `json:"labelConditionsAndTermsFile"`

	// Logo The logo of the form
	Logo *string `json:"logo"`

	// LongDescription The long description of the form (rich Html)
	LongDescription *string `json:"longDescription"`

	// MaxEntries Indicates the maximum available entries for the whole form. Null means unlimited entries.
	MaxEntries *int32 `json:"maxEntries"`

	// OpenDonationPresetAmounts The preset amounts to be shown to the user. Maximum 3 amounts.
	OpenDonationPresetAmounts *[]int32 `json:"openDonationPresetAmounts"`

	// PersonalizedMessage Personalized message for participants
	PersonalizedMessage *string `json:"personalizedMessage"`

	// Place PlaceModel class
	Place *HelloAssoApiV5ModelsCommonPlaceModel `json:"place,omitempty"`

	// PrivateTitle Private Title : displayed only in the organization back office
	PrivateTitle *string `json:"privateTitle"`

	// ProjectBeneficiaries The project beneficiaries of the form (rich Html)
	ProjectBeneficiaries *string `json:"projectBeneficiaries"`

	// ProjectExpensesDetails Details of the project expenses (rich Html)
	ProjectExpensesDetails *string `json:"projectExpensesDetails"`

	// ProjectOwners Description of the project owners (rich Html)
	ProjectOwners *string `json:"projectOwners"`

	// ProjectTargetCountry 3 letter country code
	ProjectTargetCountry *string `json:"projectTargetCountry"`

	// SaleEndDate The datetime (Inclusive) at which the sales end.
	// If null the orders will be available until the end of the campaign.
	SaleEndDate *time.Time `json:"saleEndDate"`

	// SaleStartDate The datetime (Inclusive) at which the users can start placing orders.
	// If null the orders will be available as soon as the campaign is published.
	SaleStartDate *time.Time `json:"saleStartDate"`

	// StartDate The datetime of the activity start
	StartDate *time.Time                                 `json:"startDate"`
	TierList  *[]HelloAssoApiV5ModelsFormsTierLightModel `json:"tierList"`

	// Title The title of the form. It will be used to generate the url which that can't be changed.
	Title string `json:"title"`

	// ValidityType Enum which represents the membership validity type
	ValidityType *HelloAssoApiV5ModelsEnumsMembershipValidityType `json:"validityType,omitempty"`

	// WidgetButtonText The text displayed in the widget button
	WidgetButtonText *string `json:"widgetButtonText"`
}

// HelloAssoApiV5ModelsFormsTermModel TermsModel class
type HelloAssoApiV5ModelsFormsTermModel struct {
	// Amount Term Amount
	Amount *int32 `json:"amount,omitempty"`

	// Date Term Date
	Date *time.Time `json:"date"`
}

// HelloAssoApiV5ModelsFormsTierLightModel defines model for HelloAsso.Api.V5.Models.Forms.TierLightModel.
type HelloAssoApiV5ModelsFormsTierLightModel struct {
	Label *string `json:"label"`
	Price *int32  `json:"price,omitempty"`
}

// HelloAssoApiV5ModelsFormsTierPublicModel TierPublicModel class
type HelloAssoApiV5ModelsFormsTierPublicModel struct {
	// CustomFields List of custom fields to be filled by the user
	CustomFields *[]HelloAssoApiV5ModelsFormsCustomFieldPublicModel `json:"customFields"`

	// Description description
	Description *string `json:"description"`

	// ExtraOptions List of available extra options to buy along the tier
	ExtraOptions *[]HelloAssoApiV5ModelsFormsExtraOptionPublicModel `json:"extraOptions"`

	// Id id
	Id *int32 `json:"id,omitempty"`

	// IsEligibleTaxReceipt Whether this is eligible to a deduction
	IsEligibleTaxReceipt *bool `json:"isEligibleTaxReceipt,omitempty"`

	// IsExcludedFromFormPaymentTerms True means this tier must be paid in the initial payment, false means it can be paid in payment with installments
	// Null when the form payment terms are disabled or not compatible with the related form
	IsExcludedFromFormPaymentTerms *bool `json:"isExcludedFromFormPaymentTerms"`

	// Label label
	Label *string `json:"label"`

	// MaxPerUser Max quantity buyable in this cart
	MaxPerUser *int32 `json:"maxPerUser"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// MinAmount If set, it means the payment is free to choose, according to the specified minAmount in cents
	MinAmount        *int32                                         `json:"minAmount"`
	PaymentFrequency *HelloAssoApiV5ModelsEnumsPaymentFrequencyType `json:"paymentFrequency,omitempty"`

	// Picture DocumentModel class
	Picture *HelloAssoApiV5ModelsCommonDocumentModel `json:"picture,omitempty"`

	// Price the Price in cents
	// if price equals 0 then it is free or there is a MinAmount
	Price *int32 `json:"price"`

	// SaleEndDate The datetime (Inclusive) at which the tier is no longer available.
	// If null the tier will be available until the end of the event.
	SaleEndDate *time.Time `json:"saleEndDate"`

	// SaleStartDate The datetime (Inclusive) at which the users can start buying this tier.
	// If null the tier will be available at the start of the event.
	SaleStartDate *time.Time `json:"saleStartDate"`

	// Terms Terms of tier
	Terms    *[]HelloAssoApiV5ModelsFormsTermModel `json:"terms"`
	TierType *HelloAssoApiV5ModelsEnumsTierType    `json:"tierType,omitempty"`

	// VatRate Vat rate if applicable
	// Amount have to be 0.10 for 10%
	VatRate *float64 `json:"vatRate,omitempty"`
}

// HelloAssoApiV5ModelsOrganizationOrganizationBasicModel A basic organization model
type HelloAssoApiV5ModelsOrganizationOrganizationBasicModel struct {
	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// Url The organization url
	Url *string `json:"url"`
}

// HelloAssoApiV5ModelsOrganizationOrganizationLightModel OrganizationLightModel class
type HelloAssoApiV5ModelsOrganizationOrganizationLightModel struct {
	CategoryJoId *int32 `json:"categoryJoId"`

	// City Organization city
	City *string `json:"city"`

	// Description Organization description
	Description *string `json:"description"`

	// Logo Logo of organization
	Logo *string `json:"logo"`

	// Name Name of organization
	Name *string `json:"name"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string                         `json:"organizationSlug"`
	Role             *HelloAssoModelsEnumsGlobalRole `json:"role,omitempty"`

	// UpdateDate Last update date of the organization
	UpdateDate *time.Time `json:"updateDate,omitempty"`

	// Url The organization url
	Url *string `json:"url"`

	// ZipCode Organization zip code
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsOrganizationOrganizationModel OrganizationsModel class
type HelloAssoApiV5ModelsOrganizationOrganizationModel struct {
	// Address Organization Address (for authorized applications or if authorized by the organization)
	Address *string `json:"address"`

	// Banner The organization banner
	Banner *string `json:"banner"`

	// Category Organization category label
	Category     *string `json:"category"`
	CategoryJoId *int32  `json:"categoryJoId"`

	// City Organization city
	City *string `json:"city"`

	// Description Organization description
	Description *string `json:"description"`

	// FiscalReceiptEligibility The organism can issue fiscal receipts (type ok and has not deactivated it)
	// Must configure it and be authenticated to become enabled
	FiscalReceiptEligibility *bool `json:"fiscalReceiptEligibility,omitempty"`

	// FiscalReceiptIssuanceEnabled The organism is eligible, has set up his options, and is authenticated.
	FiscalReceiptIssuanceEnabled *bool                             `json:"fiscalReceiptIssuanceEnabled,omitempty"`
	Geolocation                  *HelloAssoModelsSharedGeoLocation `json:"geolocation,omitempty"`

	// IsAuthenticated The organization is authenticated. Property returned only when asked by an organization admin.
	IsAuthenticated *bool `json:"isAuthenticated"`

	// IsCashInCompliant If transaction can be init on the organization or not.
	IsCashInCompliant *bool `json:"isCashInCompliant"`

	// Logo Logo of organization
	Logo *string `json:"logo"`

	// Name Name of organization
	Name *string `json:"name"`

	// OrganizationSlug The organization slug
	OrganizationSlug *string `json:"organizationSlug"`

	// RnaNumber Unique identifier assigned when creating the association
	RnaNumber *string                                    `json:"rnaNumber"`
	Role      *HelloAssoModelsEnumsGlobalRole            `json:"role,omitempty"`
	Type      *HelloAssoApiV5ModelsEnumsOrganizationType `json:"type,omitempty"`

	// UpdateDate Last update date of the organization
	UpdateDate *time.Time `json:"updateDate,omitempty"`

	// Url The organization url
	Url *string `json:"url"`

	// ZipCode Organization zip code
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel defines model for HelloAsso.Api.V5.Models.OrganizationLegalInformations.OrganizationLegalStructuresModel.
type HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel struct {
	Agreement               *string `json:"agreement"`
	Id                      *int32  `json:"id,omitempty"`
	IsFiscalReceiptEligible *bool   `json:"isFiscalReceiptEligible,omitempty"`
	LegalStructure          *string `json:"legalStructure"`
}

// HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody defines model for HelloAsso.Api.V5.Models.OrganizationLegalInformations.UpdateOrganizationFiscalReceiptTransmitterBody.
type HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody struct {
	IsHelloAssoFiscalReceiptTransmitter *bool `json:"isHelloAssoFiscalReceiptTransmitter,omitempty"`
}

// HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody defines model for HelloAsso.Api.V5.Models.OrganizationLegalInformations.UpdateOrganizationLegalInformationConfigurationBody.
type HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody struct {
	AllowIfiTaxReductions bool  `json:"allowIfiTaxReductions"`
	IsColuche             bool  `json:"isColuche"`
	LegalStructureId      int32 `json:"legalStructureId"`
}

// HelloAssoApiV5ModelsPartnerStatisticsModel defines model for HelloAsso.Api.V5.Models.PartnerStatisticsModel.
type HelloAssoApiV5ModelsPartnerStatisticsModel struct {
	// AvailableOrganizationsAccessTokenCount Number of organizations access token obtains by authorize flow
	AvailableOrganizationsAccessTokenCount *int32 `json:"availableOrganizationsAccessTokenCount,omitempty"`

	// CheckoutCollectedAmount Collected amount by All partner checkouts
	CheckoutCollectedAmount *int64 `json:"checkoutCollectedAmount,omitempty"`

	// LinkedOrganizationsCollectedAmount Collected amount by linked organizations
	LinkedOrganizationsCollectedAmount *int64 `json:"linkedOrganizationsCollectedAmount,omitempty"`

	// LinkedOrganizationsCount Number of organizations linked to this partner
	LinkedOrganizationsCount *int32 `json:"linkedOrganizationsCount,omitempty"`

	// OrganizationsUsingCheckout Number of organizations using the checkout with this partner
	OrganizationsUsingCheckout *int32 `json:"organizationsUsingCheckout,omitempty"`
}

// HelloAssoApiV5ModelsPartnersPartnerPublicModel defines model for HelloAsso.Api.V5.Models.Partners.PartnerPublicModel.
type HelloAssoApiV5ModelsPartnersPartnerPublicModel struct {
	ApiClient *HelloAssoApiV5ModelsAccountsClientsApiClientModel `json:"apiClient,omitempty"`

	// Description Description of the partner
	Description *string `json:"description"`

	// DisplayName Display Name of the partner
	DisplayName *string `json:"displayName"`

	// Logo Logo of the partner : square format
	Logo *string `json:"logo"`

	// LogoRectangle Logo of the partner : rectangle format
	LogoRectangle *string `json:"logoRectangle"`

	// Name Name of the partner
	Name              *string                                     `json:"name"`
	PartnerStatistics *HelloAssoApiV5ModelsPartnerStatisticsModel `json:"partnerStatistics,omitempty"`

	// Url Website of the partner
	Url *string `json:"url"`

	// UrlNotificationList Url Notification of the partner
	UrlNotificationList *[]HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel `json:"urlNotificationList"`
}

// HelloAssoApiV5ModelsPaymentPublicPaymentModel defines model for HelloAsso.Api.V5.Models.Payment.PublicPaymentModel.
type HelloAssoApiV5ModelsPaymentPublicPaymentModel struct {
	// Amount Amount
	Amount *int32 `json:"amount,omitempty"`

	// AuthorizationDate If the payment is authorized, this is the date of authorization
	AuthorizationDate *time.Time                                    `json:"authorizationDate"`
	CashOutState      *HelloAssoApiV5ModelsEnumsPaymentCashOutState `json:"cashOutState,omitempty"`

	// Date The payment Date.
	Date *time.Time `json:"date,omitempty"`

	// FiscalReceiptGenerated Whether a Fiscal receipt document has been generated for this payment or not.
	FiscalReceiptGenerated *bool `json:"fiscalReceiptGenerated,omitempty"`

	// FormId The form id where the payment was made. Used with FormType
	FormId   *int32                             `json:"formId"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Id The payment id
	Id *int32 `json:"id,omitempty"`

	// InstallmentNumber Indicates the payment number (useful in the case of an order comprising payments with installments)
	// Starting with 1.
	InstallmentNumber *int32                                 `json:"installmentNumber"`
	MeansPayment      *HelloAssoApiV5ModelsEnumsPaymentMeans `json:"meansPayment,omitempty"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrderDate Date at which the Order was placed.
	// Important for monthly payments or scheduled payments.
	OrderDate *time.Time `json:"orderDate,omitempty"`

	// OrderId The id of the order
	OrderId *int32 `json:"orderId,omitempty"`

	// OrganizationId The Organization id, which the payment was made to
	OrganizationId *int32 `json:"organizationId,omitempty"`

	// PayerFirstName The inputted payer first name, might differs from User firstname, from linked user Id
	PayerFirstName *string `json:"payerFirstName"`

	// PayerLastName The inputted payer last name,  might differs from User lastname, from linked user Id
	PayerLastName *string `json:"payerLastName"`

	// ProviderTitle name of the provider
	ProviderTitle *string `json:"providerTitle"`

	// RefundOperations The refund operations for the specific payment.
	RefundOperations *[]HelloAssoApiV5ModelsStatisticsRefundOperationLightModel `json:"refundOperations"`
	Status           *HelloAssoApiV5ModelsEnumsPaymentState                     `json:"status,omitempty"`

	// UserEmail The email of the user account who initiated the payment.
	UserEmail *string `json:"userEmail"`

	// UserFirstName The name of the user who initiated the payment. May differ from PayerFirstName
	UserFirstName *string `json:"userFirstName"`

	// UserId The user id who initiated the payment
	UserId *int32 `json:"userId"`

	// UserLastName The name of the user who initiated the payment. May differ from PayerLastName
	UserLastName *string `json:"userLastName"`
}

// HelloAssoApiV5ModelsPaymentRefundOperationModel RefundOperationModel class
type HelloAssoApiV5ModelsPaymentRefundOperationModel struct {
	// Amount The amount to refund
	Amount *int32 `json:"amount,omitempty"`

	// CancelOrder Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded)
	CancelOrder *bool `json:"cancelOrder,omitempty"`

	// CreationDate The refund operation creation date
	CreationDate *time.Time `json:"creationDate,omitempty"`

	// Id The refund operation id
	Id *int32 `json:"id,omitempty"`

	// PaymentId The payment id
	PaymentId *int32 `json:"paymentId,omitempty"`

	// SendRefundMail Whether a refund mail must be send or not.
	SendRefundMail *bool                                    `json:"sendRefundMail,omitempty"`
	State          *HelloAssoApiV5ModelsEnumsOperationState `json:"state,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsItemCustomField Custom field associated with the item or option
type HelloAssoApiV5ModelsStatisticsItemCustomField struct {
	// Answer Participant or user answer
	Answer *string                             `json:"answer"`
	Id     *int32                              `json:"id,omitempty"`
	Name   *string                             `json:"name"`
	Type   *HelloAssoApiV5ModelsEnumsFieldType `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsItemDetail defines model for HelloAsso.Api.V5.Models.Statistics.ItemDetail.
type HelloAssoApiV5ModelsStatisticsItemDetail struct {
	// Amount Total item Price in cents (after discount without extra options)
	Amount  *int32  `json:"amount,omitempty"`
	Comment *string `json:"comment"`

	// CustomFields Custom fields related to this item
	CustomFields *[]HelloAssoApiV5ModelsStatisticsItemCustomField `json:"customFields"`

	// DayOfLevy The day of levy for monthly donation only
	DayOfLevy *int32                                      `json:"dayOfLevy"`
	Discount  *HelloAssoApiV5ModelsStatisticsItemDiscount `json:"discount,omitempty"`

	// Id ID of the Item
	Id *int32 `json:"id,omitempty"`

	// InitialAmount The raw amount (without reduction)
	InitialAmount *int32 `json:"initialAmount"`

	// MembershipCardUrl The Membership Card Url
	MembershipCardUrl *string `json:"membershipCardUrl"`

	// MinAmount Minimum amount that was specified on the tier (in cents)
	MinAmount *int32  `json:"minAmount"`
	Name      *string `json:"name"`

	// Options Extra options taken with this item
	Options *[]HelloAssoApiV5ModelsStatisticsItemOption `json:"options"`
	Order   *HelloAssoApiV5ModelsStatisticsOrderLight   `json:"order,omitempty"`
	Payer   *HelloAssoApiV5ModelsStatisticsPayer        `json:"payer,omitempty"`

	// Payments Payments linked to this item
	Payments      *[]HelloAssoApiV5ModelsStatisticsItemPayment `json:"payments"`
	PriceCategory *HelloAssoApiV5ModelsEnumsPriceCategory      `json:"priceCategory,omitempty"`

	// QrCode The item QrCode (for ticket scanning only)
	QrCode *string                             `json:"qrCode"`
	State  *HelloAssoApiV5ModelsEnumsItemState `json:"state,omitempty"`

	// TicketUrl The Ticket Url
	TicketUrl *string `json:"ticketUrl"`

	// TierDescription Tier description
	TierDescription *string                             `json:"tierDescription"`
	TierId          *int32                              `json:"tierId"`
	Type            *HelloAssoApiV5ModelsEnumsTierType  `json:"type,omitempty"`
	User            *HelloAssoApiV5ModelsStatisticsUser `json:"user,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsItemDiscount defines model for HelloAsso.Api.V5.Models.Statistics.ItemDiscount.
type HelloAssoApiV5ModelsStatisticsItemDiscount struct {
	// Amount The discount amount in cents
	Amount *int32 `json:"amount,omitempty"`

	// Code The discount code applied on the item
	Code *string `json:"code"`
}

// HelloAssoApiV5ModelsStatisticsItemOption ItemOption class
type HelloAssoApiV5ModelsStatisticsItemOption struct {
	// Amount Amount of the option in cents
	Amount *int32 `json:"amount,omitempty"`

	// CustomFields Custom fields related to this option
	CustomFields *[]HelloAssoApiV5ModelsStatisticsItemCustomField `json:"customFields"`

	// IsRequired Option is required or optional
	IsRequired *bool `json:"isRequired,omitempty"`

	// Name Name of the option
	Name          *string                                 `json:"name"`
	OptionId      *int32                                  `json:"optionId,omitempty"`
	PriceCategory *HelloAssoApiV5ModelsEnumsPriceCategory `json:"priceCategory,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsItemPayment Payment linked to the item
type HelloAssoApiV5ModelsStatisticsItemPayment struct {
	// Amount Total Amount of the payment (in cents)
	Amount *int32 `json:"amount,omitempty"`

	// AmountTip Tip Amount of the payment (in cents)
	AmountTip    *int32                                        `json:"amountTip"`
	CashOutState *HelloAssoApiV5ModelsEnumsPaymentCashOutState `json:"cashOutState,omitempty"`

	// Date Date of the payment
	Date *time.Time `json:"date,omitempty"`

	// Id The ID of the payment
	Id *int32 `json:"id,omitempty"`

	// InstallmentNumber Indicates the payment number (useful in the case of an order comprising payments with installments)
	InstallmentNumber *int32 `json:"installmentNumber"`

	// Meta MetaModel class
	Meta               *HelloAssoApiV5ModelsCommonMetaModel   `json:"meta,omitempty"`
	PaymentMeans       *HelloAssoApiV5ModelsEnumsPaymentMeans `json:"paymentMeans,omitempty"`
	PaymentOffLineMean *HelloAssoApiV5ModelsEnumsPaymentMeans `json:"paymentOffLineMean,omitempty"`

	// RefundOperations The refund operations information for the specific payment.
	RefundOperations *[]HelloAssoApiV5ModelsStatisticsRefundOperationLightModel `json:"refundOperations"`

	// ShareAmount Amount of the item and extra options payed on this payment term (in cents)
	ShareAmount *int32                                 `json:"shareAmount,omitempty"`
	State       *HelloAssoApiV5ModelsEnumsPaymentState `json:"state,omitempty"`
	Type        *HelloAssoApiV5ModelsEnumsPaymentType  `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsOrder defines model for HelloAsso.Api.V5.Models.Statistics.Order.
type HelloAssoApiV5ModelsStatisticsOrder struct {
	Amount *HelloAssoApiV5ModelsStatisticsOrderAmountModel `json:"amount,omitempty"`

	// CheckoutIntentId Checkout intent Id if available
	CheckoutIntentId *int32 `json:"checkoutIntentId"`

	// Date Order creation date
	Date *time.Time `json:"date,omitempty"`

	// FormSlug FormSlug (lowercase name of the form without special characters)
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Id The ID of the Order
	Id *int32 `json:"id,omitempty"`

	// Items All items of the order
	Items *[]HelloAssoApiV5ModelsStatisticsOrderItem `json:"items"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrganizationIsUnderColucheLaw Whether or not the organization is subject to the coluche law
	OrganizationIsUnderColucheLaw *bool `json:"organizationIsUnderColucheLaw,omitempty"`

	// OrganizationName The organization name.
	OrganizationName *string `json:"organizationName"`

	// OrganizationSlug OrganizationSlug (lowercase name of the organization without special characters)
	OrganizationSlug *string                                    `json:"organizationSlug"`
	OrganizationType *HelloAssoApiV5ModelsEnumsOrganizationType `json:"organizationType,omitempty"`
	Payer            *HelloAssoApiV5ModelsStatisticsPayer       `json:"payer,omitempty"`

	// Payments All payments of the order
	Payments *[]HelloAssoApiV5ModelsStatisticsOrderPayment `json:"payments"`
}

// HelloAssoApiV5ModelsStatisticsOrderAmountModel defines model for HelloAsso.Api.V5.Models.Statistics.OrderAmountModel.
type HelloAssoApiV5ModelsStatisticsOrderAmountModel struct {
	// Discount Discount amount in cents
	Discount *int32 `json:"discount,omitempty"`

	// Total Total amount in cents
	Total *int32 `json:"total,omitempty"`

	// Vat Vat amount in cents
	Vat *int32 `json:"vat,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsOrderDetail defines model for HelloAsso.Api.V5.Models.Statistics.OrderDetail.
type HelloAssoApiV5ModelsStatisticsOrderDetail struct {
	Amount *HelloAssoApiV5ModelsStatisticsOrderAmountModel `json:"amount,omitempty"`

	// CheckoutIntentId Checkout intent Id if available
	CheckoutIntentId *int32 `json:"checkoutIntentId"`

	// Date Order creation date
	Date *time.Time `json:"date,omitempty"`

	// FormSlug FormSlug (lowercase name of the form without special characters)
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Id The ID of the Order
	Id *int32 `json:"id,omitempty"`

	// Items All items of the order
	Items *[]HelloAssoApiV5ModelsStatisticsOrderItem `json:"items"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrganizationIsUnderColucheLaw Whether or not the organization is subject to the coluche law
	OrganizationIsUnderColucheLaw *bool `json:"organizationIsUnderColucheLaw,omitempty"`

	// OrganizationName The organization name.
	OrganizationName *string `json:"organizationName"`

	// OrganizationSlug OrganizationSlug (lowercase name of the organization without special characters)
	OrganizationSlug *string                                    `json:"organizationSlug"`
	OrganizationType *HelloAssoApiV5ModelsEnumsOrganizationType `json:"organizationType,omitempty"`
	Payer            *HelloAssoApiV5ModelsStatisticsPayer       `json:"payer,omitempty"`

	// Payments All payments of the order
	Payments *[]HelloAssoApiV5ModelsStatisticsOrderPayment `json:"payments"`
}

// HelloAssoApiV5ModelsStatisticsOrderItem Item on the order
type HelloAssoApiV5ModelsStatisticsOrderItem struct {
	// Amount Total item Price in cents (after discount without extra options)
	Amount  *int32  `json:"amount,omitempty"`
	Comment *string `json:"comment"`

	// CustomFields Custom fields related to this item
	CustomFields *[]HelloAssoApiV5ModelsStatisticsItemCustomField `json:"customFields"`

	// DayOfLevy The day of levy for monthly donation only
	DayOfLevy *int32                                      `json:"dayOfLevy"`
	Discount  *HelloAssoApiV5ModelsStatisticsItemDiscount `json:"discount,omitempty"`

	// Id ID of the Item
	Id *int32 `json:"id,omitempty"`

	// InitialAmount The raw amount (without reduction)
	InitialAmount *int32 `json:"initialAmount"`

	// MembershipCardUrl The Membership Card Url
	MembershipCardUrl *string `json:"membershipCardUrl"`

	// MinAmount Minimum amount that was specified on the tier (in cents)
	MinAmount *int32  `json:"minAmount"`
	Name      *string `json:"name"`

	// Options Extra options taken with this item
	Options *[]HelloAssoApiV5ModelsStatisticsItemOption `json:"options"`

	// Payments Payments linked to this item and each share between the item and the payment
	Payments      *[]HelloAssoApiV5ModelsStatisticsSharePayment `json:"payments"`
	PriceCategory *HelloAssoApiV5ModelsEnumsPriceCategory       `json:"priceCategory,omitempty"`

	// QrCode The item QrCode (for ticket scanning only)
	QrCode *string                             `json:"qrCode"`
	State  *HelloAssoApiV5ModelsEnumsItemState `json:"state,omitempty"`

	// TicketUrl The Ticket Url
	TicketUrl *string `json:"ticketUrl"`

	// TierDescription Tier description
	TierDescription *string                             `json:"tierDescription"`
	TierId          *int32                              `json:"tierId"`
	Type            *HelloAssoApiV5ModelsEnumsTierType  `json:"type,omitempty"`
	User            *HelloAssoApiV5ModelsStatisticsUser `json:"user,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsOrderLight defines model for HelloAsso.Api.V5.Models.Statistics.OrderLight.
type HelloAssoApiV5ModelsStatisticsOrderLight struct {
	// CheckoutIntentId Checkout intent Id if available
	CheckoutIntentId *int32 `json:"checkoutIntentId"`

	// Date Order creation date
	Date *time.Time `json:"date,omitempty"`

	// FormSlug FormSlug (lowercase name of the form without special characters)
	FormSlug *string                            `json:"formSlug"`
	FormType *HelloAssoApiV5ModelsEnumsFormType `json:"formType,omitempty"`

	// Id The ID of the Order
	Id *int32 `json:"id,omitempty"`

	// Meta MetaModel class
	Meta *HelloAssoApiV5ModelsCommonMetaModel `json:"meta,omitempty"`

	// OrganizationIsUnderColucheLaw Whether or not the organization is subject to the coluche law
	OrganizationIsUnderColucheLaw *bool `json:"organizationIsUnderColucheLaw,omitempty"`

	// OrganizationName The organization name.
	OrganizationName *string `json:"organizationName"`

	// OrganizationSlug OrganizationSlug (lowercase name of the organization without special characters)
	OrganizationSlug *string                                    `json:"organizationSlug"`
	OrganizationType *HelloAssoApiV5ModelsEnumsOrganizationType `json:"organizationType,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsOrderPayment Payment on the order
type HelloAssoApiV5ModelsStatisticsOrderPayment struct {
	// Amount Total Amount of the payment (in cents)
	Amount *int32 `json:"amount,omitempty"`

	// AmountTip Tip Amount of the payment (in cents)
	AmountTip *int32 `json:"amountTip"`

	// CashOutDate The date of the cash out
	CashOutDate  *time.Time                                    `json:"cashOutDate"`
	CashOutState *HelloAssoApiV5ModelsEnumsPaymentCashOutState `json:"cashOutState,omitempty"`

	// Date Date of the payment
	Date *time.Time `json:"date,omitempty"`

	// FiscalReceiptUrl The Fiscal Receipt Url
	FiscalReceiptUrl *string `json:"fiscalReceiptUrl"`

	// Id The ID of the payment
	Id *int32 `json:"id,omitempty"`

	// InstallmentNumber Indicates the payment number (useful in the case of an order comprising payments with installments)
	InstallmentNumber *int32 `json:"installmentNumber"`

	// Items Items linked to this payment and each share between the item and the payment
	Items *[]HelloAssoApiV5ModelsStatisticsShareItem `json:"items"`

	// Meta MetaModel class
	Meta               *HelloAssoApiV5ModelsCommonMetaModel   `json:"meta,omitempty"`
	PaymentMeans       *HelloAssoApiV5ModelsEnumsPaymentMeans `json:"paymentMeans,omitempty"`
	PaymentOffLineMean *HelloAssoApiV5ModelsEnumsPaymentMeans `json:"paymentOffLineMean,omitempty"`

	// PaymentReceiptUrl The Payment Receipt Url
	PaymentReceiptUrl *string `json:"paymentReceiptUrl"`

	// RefundOperations The refund operations information for the specific payment.
	RefundOperations *[]HelloAssoApiV5ModelsStatisticsRefundOperationLightModel `json:"refundOperations"`
	State            *HelloAssoApiV5ModelsEnumsPaymentState                     `json:"state,omitempty"`
	Type             *HelloAssoApiV5ModelsEnumsPaymentType                      `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsPayer defines model for HelloAsso.Api.V5.Models.Statistics.Payer.
type HelloAssoApiV5ModelsStatisticsPayer struct {
	// Address Gets or Sets Address
	Address *string `json:"address"`

	// City Gets or Sets City
	City *string `json:"city"`

	// Company Gets or Sets Company
	Company *string `json:"company"`

	// Country Gets or Sets Country
	Country *string `json:"country"`

	// DateOfBirth Gets or Sets date of birth
	DateOfBirth *time.Time `json:"dateOfBirth"`
	Email       *string    `json:"email"`
	FirstName   *string    `json:"firstName"`
	LastName    *string    `json:"lastName"`

	// ZipCode Gets or Sets ZipCode
	ZipCode *string `json:"zipCode"`
}

// HelloAssoApiV5ModelsStatisticsPayment defines model for HelloAsso.Api.V5.Models.Statistics.Payment.
type HelloAssoApiV5ModelsStatisticsPayment struct {
	// Amount Total Amount of the payment (in cents)
	Amount *int32 `json:"amount,omitempty"`

	// AmountTip Tip Amount of the payment (in cents)
	AmountTip *int32 `json:"amountTip"`

	// CashOutDate The date of the cash out
	CashOutDate  *time.Time                                    `json:"cashOutDate"`
	CashOutState *HelloAssoApiV5ModelsEnumsPaymentCashOutState `json:"cashOutState,omitempty"`

	// Date Date of the payment
	Date *time.Time `json:"date,omitempty"`

	// FiscalReceiptUrl The Fiscal Receipt Url
	FiscalReceiptUrl *string `json:"fiscalReceiptUrl"`

	// Id The ID of the payment
	Id *int32 `json:"id,omitempty"`

	// InstallmentNumber Indicates the payment number (useful in the case of an order comprising payments with installments)
	InstallmentNumber *int32 `json:"installmentNumber"`

	// Items Items linked to this payment
	Items *[]HelloAssoApiV5ModelsStatisticsPaymentItem `json:"items"`

	// Meta MetaModel class
	Meta               *HelloAssoApiV5ModelsCommonMetaModel      `json:"meta,omitempty"`
	Order              *HelloAssoApiV5ModelsStatisticsOrderLight `json:"order,omitempty"`
	Payer              *HelloAssoApiV5ModelsStatisticsPayer      `json:"payer,omitempty"`
	PaymentMeans       *HelloAssoApiV5ModelsEnumsPaymentMeans    `json:"paymentMeans,omitempty"`
	PaymentOffLineMean *HelloAssoApiV5ModelsEnumsPaymentMeans    `json:"paymentOffLineMean,omitempty"`

	// PaymentReceiptUrl The Payment Receipt Url
	PaymentReceiptUrl *string `json:"paymentReceiptUrl"`

	// RefundOperations The refund operations information for the specific payment.
	RefundOperations *[]HelloAssoApiV5ModelsStatisticsRefundOperationLightModel `json:"refundOperations"`
	State            *HelloAssoApiV5ModelsEnumsPaymentState                     `json:"state,omitempty"`
	Type             *HelloAssoApiV5ModelsEnumsPaymentType                      `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsPaymentDetail defines model for HelloAsso.Api.V5.Models.Statistics.PaymentDetail.
type HelloAssoApiV5ModelsStatisticsPaymentDetail struct {
	// Amount Total Amount of the payment (in cents)
	Amount *int32 `json:"amount,omitempty"`

	// AmountTip Tip Amount of the payment (in cents)
	AmountTip *int32 `json:"amountTip"`

	// CashOutDate The date of the cash out
	CashOutDate  *time.Time                                    `json:"cashOutDate"`
	CashOutState *HelloAssoApiV5ModelsEnumsPaymentCashOutState `json:"cashOutState,omitempty"`

	// Date Date of the payment
	Date *time.Time `json:"date,omitempty"`

	// FiscalReceiptUrl The Fiscal Receipt Url
	FiscalReceiptUrl *string `json:"fiscalReceiptUrl"`

	// Id The ID of the payment
	Id *int32 `json:"id,omitempty"`

	// InstallmentNumber Indicates the payment number (useful in the case of an order comprising payments with installments)
	InstallmentNumber *int32 `json:"installmentNumber"`

	// Items Items linked to this payment
	Items *[]HelloAssoApiV5ModelsStatisticsPaymentItem `json:"items"`

	// Meta MetaModel class
	Meta               *HelloAssoApiV5ModelsCommonMetaModel      `json:"meta,omitempty"`
	Order              *HelloAssoApiV5ModelsStatisticsOrderLight `json:"order,omitempty"`
	Payer              *HelloAssoApiV5ModelsStatisticsPayer      `json:"payer,omitempty"`
	PaymentMeans       *HelloAssoApiV5ModelsEnumsPaymentMeans    `json:"paymentMeans,omitempty"`
	PaymentOffLineMean *HelloAssoApiV5ModelsEnumsPaymentMeans    `json:"paymentOffLineMean,omitempty"`

	// PaymentReceiptUrl The Payment Receipt Url
	PaymentReceiptUrl *string `json:"paymentReceiptUrl"`

	// RefundOperations The refund operations information for the specific payment.
	RefundOperations *[]HelloAssoApiV5ModelsStatisticsRefundOperationLightModel `json:"refundOperations"`
	State            *HelloAssoApiV5ModelsEnumsPaymentState                     `json:"state,omitempty"`
	Type             *HelloAssoApiV5ModelsEnumsPaymentType                      `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsPaymentItem Item linked to a payment
type HelloAssoApiV5ModelsStatisticsPaymentItem struct {
	// Amount Total item Price in cents (after discount without extra options)
	Amount *int32 `json:"amount,omitempty"`

	// Id ID of the Item
	Id *int32 `json:"id,omitempty"`

	// InitialAmount The raw amount (without reduction)
	InitialAmount *int32 `json:"initialAmount"`

	// Name Name of the item paid (relevant for checkout forms)
	Name *string `json:"name"`

	// ShareAmount Amount of the payment assigned to the item and its options (in cents)
	ShareAmount *int32 `json:"shareAmount,omitempty"`

	// ShareItemAmount Amount of the item payed on this payment term (in cents)
	ShareItemAmount *int32 `json:"shareItemAmount,omitempty"`

	// ShareOptionsAmount Amount of all extra options linked to this item and payed on this payment (in cents)
	ShareOptionsAmount *int32                              `json:"shareOptionsAmount"`
	State              *HelloAssoApiV5ModelsEnumsItemState `json:"state,omitempty"`
	Type               *HelloAssoApiV5ModelsEnumsTierType  `json:"type,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsRefundOperationLightModel The refund operation with the Id, amount, amount tip and the status.
type HelloAssoApiV5ModelsStatisticsRefundOperationLightModel struct {
	// Amount The amount for this refund.
	Amount *int32 `json:"amount,omitempty"`

	// AmountTip The amount tip for this refund.
	AmountTip *int32 `json:"amountTip,omitempty"`

	// Id The refund operation identifier.
	Id *int32 `json:"id,omitempty"`

	// Meta MetaModel class
	Meta   *HelloAssoApiV5ModelsCommonMetaModel     `json:"meta,omitempty"`
	Status *HelloAssoApiV5ModelsEnumsOperationState `json:"status,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsShareItem defines model for HelloAsso.Api.V5.Models.Statistics.ShareItem.
type HelloAssoApiV5ModelsStatisticsShareItem struct {
	// Id Id of the order item
	Id *int32 `json:"id,omitempty"`

	// ShareAmount Amount of the payment assigned to the item and its options (in cents)
	ShareAmount *int32 `json:"shareAmount,omitempty"`

	// ShareItemAmount Amount of the item payed on this payment term (in cents)
	ShareItemAmount *int32 `json:"shareItemAmount,omitempty"`

	// ShareOptionsAmount Amount of all extra options linked to this item and payed on this payment (in cents)
	ShareOptionsAmount *int32 `json:"shareOptionsAmount"`
}

// HelloAssoApiV5ModelsStatisticsSharePayment defines model for HelloAsso.Api.V5.Models.Statistics.SharePayment.
type HelloAssoApiV5ModelsStatisticsSharePayment struct {
	// Id Id of the payment
	Id *int32 `json:"id,omitempty"`

	// ShareAmount Amount of the item payed on this payment term (in cents)
	ShareAmount *int32 `json:"shareAmount,omitempty"`
}

// HelloAssoApiV5ModelsStatisticsUser defines model for HelloAsso.Api.V5.Models.Statistics.User.
type HelloAssoApiV5ModelsStatisticsUser struct {
	FirstName *string `json:"firstName"`
	LastName  *string `json:"lastName"`
}

// HelloAssoApiV5ModelsTagsInternalTagModel InternalTagModel class
type HelloAssoApiV5ModelsTagsInternalTagModel struct {
	// AmountCollected Amount collected by all forms linked to this tag (in cents)
	AmountCollected *int64 `json:"amountCollected"`

	// FormCount Count of times Tag is used by forms
	FormCount *int32 `json:"formCount"`

	// Id Tag Id
	Id *int32 `json:"id,omitempty"`

	// Name Name tag
	Name *string `json:"name"`

	// OrganizationCount Count of times Tag is used by Organizations
	OrganizationCount *int32 `json:"organizationCount"`

	// TagParent InternalTagModel class
	TagParent *HelloAssoApiV5ModelsTagsInternalTagModel `json:"tagParent,omitempty"`
	TagType   *HelloAssoApiV5ModelsEnumsTagType         `json:"tagType,omitempty"`
}

// HelloAssoApiV5ModelsTagsPublicTagModel PublicNameTagModel class
type HelloAssoApiV5ModelsTagsPublicTagModel struct {
	// Name Name tag
	Name *string `json:"name"`

	// Score Tag score : measure tag relevance
	Score *float64 `json:"score,omitempty"`
}

// HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration defines model for HelloAsso.Core.Accounts.TaxReceipts.OrganizationFiscalReceiptOptionsConfiguration.
type HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration struct {
	AddressModel      *HaTrustContractLegalInformationAddressAddressDto                                `json:"addressModel,omitempty"`
	CerfaTypeId       *int32                                                                           `json:"cerfaTypeId"`
	FormatOptionModel *HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption             `json:"formatOptionModel,omitempty"`
	JoCategoryId      *int32                                                                           `json:"joCategoryId"`
	Purpose           *string                                                                          `json:"purpose"`
	SignatoryModel    *HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel `json:"signatoryModel,omitempty"`
}

// HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel defines model for HelloAsso.Models.Accounts.OrganizationLegalInformations.FiscalReceiptSignatoryModel.
type HelloAssoModelsAccountsOrganizationLegalInformationsFiscalReceiptSignatoryModel struct {
	FileUrl   *string `json:"fileUrl"`
	FirstName *string `json:"firstName"`
	Function  *string `json:"function"`
	LastName  *string `json:"lastName"`
}

// HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfiguration defines model for HelloAsso.Models.Accounts.OrganizationLegalInformations.OrganizationLegalInformationConfiguration.
type HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfiguration struct {
	IsColucheLawEnabled                 *bool  `json:"isColucheLawEnabled,omitempty"`
	IsHelloAssoFiscalReceiptTransmitter *bool  `json:"isHelloAssoFiscalReceiptTransmitter"`
	IsIfiEnabled                        *bool  `json:"isIfiEnabled,omitempty"`
	LegalStructureId                    *int32 `json:"legalStructureId,omitempty"`
}

// HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText defines model for HelloAsso.Models.Accounts.OrganizationLegalInformations.TaxInformationText.
type HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText struct {
	CompanyText         *string `json:"companyText"`
	IndividualText      *string `json:"individualText"`
	IsColucheLawEnabled *bool   `json:"isColucheLawEnabled,omitempty"`
	IsIfiEnabled        *bool   `json:"isIfiEnabled,omitempty"`
}

// HelloAssoModelsEnumsGlobalRole defines model for HelloAsso.Models.Enums.GlobalRole.
type HelloAssoModelsEnumsGlobalRole string

// HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption defines model for HelloAsso.Models.Payments.CashIn.FiscalReceipt.FiscalReceiptFormatOption.
type HelloAssoModelsPaymentsCashInFiscalReceiptFiscalReceiptFormatOption struct {
	Date      *string `json:"date"`
	Order     *string `json:"order"`
	Root      *string `json:"root"`
	Separator *string `json:"separator"`
}

// HelloAssoModelsSharedGeoLocation defines model for HelloAsso.Models.Shared.GeoLocation.
type HelloAssoModelsSharedGeoLocation struct {
	Latitude  *float64 `json:"latitude,omitempty"`
	Longitude *float64 `json:"longitude,omitempty"`
}

// ResultsWithPaginationModelFormLightModel ResultsWithPaginationModel class
type ResultsWithPaginationModelFormLightModel struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsFormsFormLightModel `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelOrder ResultsWithPaginationModel class
type ResultsWithPaginationModelOrder struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsStatisticsOrder `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelPartnerOrganizationModel ResultsWithPaginationModel class
type ResultsWithPaginationModelPartnerOrganizationModel struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsDirectoryPartnerOrganizationModel `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelPayment ResultsWithPaginationModel class
type ResultsWithPaginationModelPayment struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsStatisticsPayment `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelPublicPaymentModel ResultsWithPaginationModel class
type ResultsWithPaginationModelPublicPaymentModel struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsPaymentPublicPaymentModel `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelSynchronizableFormModel ResultsWithPaginationModel class
type ResultsWithPaginationModelSynchronizableFormModel struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsDirectorySynchronizableFormModel `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// ResultsWithPaginationModelSynchronizableOrganizationModel ResultsWithPaginationModel class
type ResultsWithPaginationModelSynchronizableOrganizationModel struct {
	// Data Data property
	Data *[]HelloAssoApiV5ModelsDirectorySynchronizableOrganizationModel `json:"data"`

	// Pagination Pagination model class
	Pagination *HelloAssoApiV5ModelsCommonPaginationModel `json:"pagination,omitempty"`
}

// PostDirectoryFormsParams defines parameters for PostDirectoryForms.
type PostDirectoryFormsParams struct {
	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`
}

// PostDirectoryOrganizationsParams defines parameters for PostDirectoryOrganizations.
type PostDirectoryOrganizationsParams struct {
	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`
}

// GetItemsItemIdParams defines parameters for GetItemsItemId.
type GetItemsItemIdParams struct {
	// WithDetails Set to true to return CustomFields and Options
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`
}

// GetOrganizationsLegalInformationsTaxInformationTextsParams defines parameters for GetOrganizationsLegalInformationsTaxInformationTexts.
type GetOrganizationsLegalInformationsTaxInformationTextsParams struct {
	OrganizationSlug *string `form:"organizationSlug,omitempty" json:"organizationSlug,omitempty"`
}

// GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams defines parameters for GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId.
type GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams struct {
	WithFailedRefundOperation *bool `form:"withFailedRefundOperation,omitempty" json:"withFailedRefundOperation,omitempty"`
}

// GetOrganizationsOrganizationSlugFormTypesParams defines parameters for GetOrganizationsOrganizationSlugFormTypes.
type GetOrganizationsOrganizationSlugFormTypesParams struct {
	// States List of Form States to filter with. If none specified, it won't filter results.
	//
	// Available values:
	// * `Public` - The form is publicly visible and findable on search engines
	// * `Private` - The form is visible only with the URL, you cannot find it on search engines
	// * `Draft` - The form is not yet published but visible if you have admin rights
	// * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
	States *[]HelloAssoApiV5ModelsEnumsFormState `form:"states,omitempty" json:"states,omitempty"`
}

// GetOrganizationsOrganizationSlugFormsParams defines parameters for GetOrganizationsOrganizationSlugForms.
type GetOrganizationsOrganizationSlugFormsParams struct {
	// States States to filter
	//
	// Available values:
	// * `Public` - The form is publicly visible and findable on search engines
	// * `Private` - The form is visible only with the URL, you cannot find it on search engines
	// * `Draft` - The form is not yet published but visible if you have admin rights
	// * `Disabled` - The form is disabled and can be reenabled by changing state to public or private
	States *[]HelloAssoApiV5ModelsEnumsFormState `form:"states,omitempty" json:"states,omitempty"`

	// FormTypes Types to filter
	FormTypes *[]HelloAssoApiV5ModelsEnumsFormType `form:"formTypes,omitempty" json:"formTypes,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams defines parameters for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems.
type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// TierTypes The type of tiers
	TierTypes *[]HelloAssoApiV5ModelsEnumsTierType `form:"tierTypes,omitempty" json:"tierTypes,omitempty"`

	// ItemStates The item states
	//
	// Available values:
	// * `Processed` - The item is paid and is valid
	// * `Registered` - The item has been registered manually by the organization and is valid
	// * `Unknown`
	// * `Canceled` - The item has been canceled, and is no longer valid
	ItemStates *[]HelloAssoApiV5ModelsEnumsItemState `form:"itemStates,omitempty" json:"itemStates,omitempty"`

	// TierName The name of a tier
	TierName *string `form:"tierName,omitempty" json:"tierName,omitempty"`

	// WithDetails Set to true to return CustomFields and Options
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`

	// SortOrder Sort forms items by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortField Sort forms items by a specific field (Date or UpdateDate). Default is date
	SortField *HelloAssoApiV5ModelsEnumsSortField `form:"sortField,omitempty" json:"sortField,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams defines parameters for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders.
type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// WithDetails Set to true to return CustomFields
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`

	// SortOrder Sort forms orders by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams defines parameters for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments.
type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// States Filter results by states of payments
	//
	// Available values:
	// * `Pending` - A payment scheduled at a later date, not yet processed.
	// * `Authorized` - The payment has been authorized, validated, processed.
	// * `Refused` - The payment has been refused by the bank.
	// * `Unknown`
	// * `Registered` - Represents a payment made offline.
	//             Probably for an item of type
	// * `Refunded` - The payment has been refunded.
	// * `Refunding` - The payment is being refunded.
	// * `Contested` - Payment has been contested by the contributor
	States *[]HelloAssoApiV5ModelsEnumsPaymentState `form:"states,omitempty" json:"states,omitempty"`

	// SortOrder Sort payments by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortField Sort payments by a specific field (Date or UpdateDate). Default is date
	SortField *HelloAssoApiV5ModelsEnumsSortField `form:"sortField,omitempty" json:"sortField,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugItemsParams defines parameters for GetOrganizationsOrganizationSlugItems.
type GetOrganizationsOrganizationSlugItemsParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// TierTypes The type of tiers Donation, Payment, Registration, Membership, MonthlyDonation, MonthlyPayment, OfflineDonation, Contribution, Bonus
	TierTypes *[]HelloAssoApiV5ModelsEnumsTierType `form:"tierTypes,omitempty" json:"tierTypes,omitempty"`

	// ItemStates The item states
	//
	// Available values:
	// * `Processed` - The item is paid and is valid
	// * `Registered` - The item has been registered manually by the organization and is valid
	// * `Unknown`
	// * `Canceled` - The item has been canceled, and is no longer valid
	ItemStates *[]HelloAssoApiV5ModelsEnumsItemState `form:"itemStates,omitempty" json:"itemStates,omitempty"`

	// TierName The name of a tier
	TierName *string `form:"tierName,omitempty" json:"tierName,omitempty"`

	// WithDetails Set to true to return CustomFields and Options
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`

	// SortOrder Sort organizations items by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortField Sort organizations items by a specific field (Date or UpdateDate). Default is date
	SortField *HelloAssoApiV5ModelsEnumsSortField `form:"sortField,omitempty" json:"sortField,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugOrdersParams defines parameters for GetOrganizationsOrganizationSlugOrders.
type GetOrganizationsOrganizationSlugOrdersParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// FormTypes The type of the form CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
	FormTypes *[]HelloAssoApiV5ModelsEnumsFormType `form:"formTypes,omitempty" json:"formTypes,omitempty"`

	// WithDetails Set to true to return CustomFields
	WithDetails *bool `form:"withDetails,omitempty" json:"withDetails,omitempty"`

	// SortOrder Sort organizations orders by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugPaymentsParams defines parameters for GetOrganizationsOrganizationSlugPayments.
type GetOrganizationsOrganizationSlugPaymentsParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// UserSearchKey Filter results on user or payer first name, last name or email
	UserSearchKey *string `form:"userSearchKey,omitempty" json:"userSearchKey,omitempty"`

	// PageIndex The page of results to retrieve
	PageIndex *int32 `form:"pageIndex,omitempty" json:"pageIndex,omitempty"`

	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// States The payment states
	//
	// Available values:
	// * `Pending` - A payment scheduled at a later date, not yet processed.
	// * `Authorized` - The payment has been authorized, validated, processed.
	// * `Refused` - The payment has been refused by the bank.
	// * `Unknown`
	// * `Registered` - Represents a payment made offline.
	//             Probably for an item of type
	// * `Refunded` - The payment has been refunded.
	// * `Refunding` - The payment is being refunded.
	// * `Contested` - Payment has been contested by the contributor
	States *[]HelloAssoApiV5ModelsEnumsPaymentState `form:"states,omitempty" json:"states,omitempty"`

	// SortOrder Sort payments by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortField Sort payments by a specific field (Date or UpdateDate). Default is date
	SortField *HelloAssoApiV5ModelsEnumsSortField `form:"sortField,omitempty" json:"sortField,omitempty"`

	// WithCount Whether the pagination should include totalCount and totalPages.
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`
}

// GetOrganizationsOrganizationSlugPaymentsSearchParams defines parameters for GetOrganizationsOrganizationSlugPaymentsSearch.
type GetOrganizationsOrganizationSlugPaymentsSearchParams struct {
	// From First Date Filter
	From *time.Time `form:"from,omitempty" json:"from,omitempty"`

	// To End Date Filter (exclusive)
	To *time.Time `form:"to,omitempty" json:"to,omitempty"`

	// PageSize The number of items to retrieve
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`

	// FormTypes The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop
	FormTypes *[]HelloAssoApiV5ModelsEnumsFormType `form:"formTypes,omitempty" json:"formTypes,omitempty"`

	// FormType The form type CrowdFunding, Membership, Event, Donation, PaymentForm, Checkout, Shop. This parameter must be used with the parameter formId.
	FormType *HelloAssoApiV5ModelsEnumsFormType `form:"formType,omitempty" json:"formType,omitempty"`

	// States Filter results by states of payments
	//
	// Available values:
	// * `Pending` - A payment scheduled at a later date, not yet processed.
	// * `Authorized` - The payment has been authorized, validated, processed.
	// * `Refused` - The payment has been refused by the bank.
	// * `Unknown`
	// * `Registered` - Represents a payment made offline.
	//             Probably for an item of type
	// * `Refunded` - The payment has been refunded.
	// * `Refunding` - The payment is being refunded.
	// * `Contested` - Payment has been contested by the contributor
	States *[]HelloAssoApiV5ModelsEnumsPaymentState `form:"states,omitempty" json:"states,omitempty"`

	// UserId The User identifier
	UserId *int32 `form:"userId,omitempty" json:"userId,omitempty"`

	// SearchKey Filter results on user or payer first name, last name or email.
	SearchKey *string `form:"searchKey,omitempty" json:"searchKey,omitempty"`

	// Amount Amount of the payment in cents. Filter payments with exact amount with or without the contribution.
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`

	// SortOrder Sort payments by ascending or descending order. Default is descending
	SortOrder *HelloAssoApiV5ModelsEnumsSortOrder `form:"sortOrder,omitempty" json:"sortOrder,omitempty"`

	// SortField Sort payments by a specific field (Date or UpdateDate). Default is date
	SortField *HelloAssoApiV5ModelsEnumsSortField `form:"sortField,omitempty" json:"sortField,omitempty"`
}

// PutOrganizationsOrganizationSlugTaxReceiptConfigurationMultipartBody defines parameters for PutOrganizationsOrganizationSlugTaxReceiptConfiguration.
type PutOrganizationsOrganizationSlugTaxReceiptConfigurationMultipartBody = map[string]interface{}

// PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams defines parameters for PutOrganizationsOrganizationSlugTaxReceiptConfiguration.
type PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams struct {
	// File Upload File
	File openapi_types.File `form:"file" json:"file"`

	// Config config
	Config *string `form:"config,omitempty" json:"config,omitempty"`
}

// PostOrganizationsOrganizationSlugTaxReceiptPreviewMultipartBody defines parameters for PostOrganizationsOrganizationSlugTaxReceiptPreview.
type PostOrganizationsOrganizationSlugTaxReceiptPreviewMultipartBody = map[string]interface{}

// PostOrganizationsOrganizationSlugTaxReceiptPreviewParams defines parameters for PostOrganizationsOrganizationSlugTaxReceiptPreview.
type PostOrganizationsOrganizationSlugTaxReceiptPreviewParams struct {
	// File Upload File
	File openapi_types.File `form:"file" json:"file"`

	// Config config
	Config *string `form:"config,omitempty" json:"config,omitempty"`
}

// DeletePartnersMeApiNotificationsParams defines parameters for DeletePartnersMeApiNotifications.
type DeletePartnersMeApiNotificationsParams struct {
	// NotificationType Do not specify a notification type to remove the main notification Url
	NotificationType *HelloAssoApiV5ModelsApiNotificationsApiNotificationType `form:"notificationType,omitempty" json:"notificationType,omitempty"`
}

// DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams defines parameters for DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug.
type DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams struct {
	// NotificationType Do not specify a notification type to remove the main notification Url
	NotificationType *HelloAssoApiV5ModelsApiNotificationsApiNotificationType `form:"notificationType,omitempty" json:"notificationType,omitempty"`
}

// GetPartnersMeOrganizationsParams defines parameters for GetPartnersMeOrganizations.
type GetPartnersMeOrganizationsParams struct {
	// PageSize The number of items per page
	PageSize *int32 `form:"pageSize,omitempty" json:"pageSize,omitempty"`

	// ContinuationToken Continuation Token from which we wish to retrieve results
	ContinuationToken *string `form:"continuationToken,omitempty" json:"continuationToken,omitempty"`
}

// GetPaymentsPaymentIdParams defines parameters for GetPaymentsPaymentId.
type GetPaymentsPaymentIdParams struct {
	// WithFailedRefundOperation True to retrieve the refund operation in the states 'ABORTED', 'CANCELED', 'ERROR', 'REFUSED'.
	WithFailedRefundOperation *bool `form:"withFailedRefundOperation,omitempty" json:"withFailedRefundOperation,omitempty"`
}

// PostPaymentsPaymentIdRefundParams defines parameters for PostPaymentsPaymentIdRefund.
type PostPaymentsPaymentIdRefundParams struct {
	// Comment The comment about this refund.
	Comment *string `form:"comment,omitempty" json:"comment,omitempty"`

	// CancelOrder Whether the future payments and linked items of this order must be canceled (possible only if the payment is fully refunded)
	CancelOrder *bool `form:"cancelOrder,omitempty" json:"cancelOrder,omitempty"`

	// SendRefundMail Whether a refund mail must be sent or not.
	SendRefundMail *bool `form:"sendRefundMail,omitempty" json:"sendRefundMail,omitempty"`

	// Amount The amount in cents to refund. Enter this amount only for a partial refund for stripe. If not filled in then the entire payment is refunded
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// GetTagsTagNameParams defines parameters for GetTagsTagName.
type GetTagsTagNameParams struct {
	// WithCount If true : Count of times Tag is used
	WithCount *bool `form:"withCount,omitempty" json:"withCount,omitempty"`

	// WithAmount If true : Amount collected by all forms linked to this Tag
	WithAmount *bool `form:"withAmount,omitempty" json:"withAmount,omitempty"`
}

// PostDirectoryFormsApplicationWildcardPlusJSONRequestBody defines body for PostDirectoryForms for application/*+json ContentType.
type PostDirectoryFormsApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsDirectoryListFormsRequest

// PostDirectoryFormsJSONRequestBody defines body for PostDirectoryForms for application/json ContentType.
type PostDirectoryFormsJSONRequestBody = HelloAssoApiV5ModelsDirectoryListFormsRequest

// PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody defines body for PostDirectoryForms for application/json-patch+json ContentType.
type PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsDirectoryListFormsRequest

// PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody defines body for PostDirectoryOrganizations for application/*+json ContentType.
type PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsDirectoryListOrganizationsRequest

// PostDirectoryOrganizationsJSONRequestBody defines body for PostDirectoryOrganizations for application/json ContentType.
type PostDirectoryOrganizationsJSONRequestBody = HelloAssoApiV5ModelsDirectoryListOrganizationsRequest

// PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody defines body for PostDirectoryOrganizations for application/json-patch+json ContentType.
type PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsDirectoryListOrganizationsRequest

// PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody defines body for PutOrganizationsLegalInformationsOrganizationSlugConfiguration for application/*+json ContentType.
type PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody

// PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody defines body for PutOrganizationsLegalInformationsOrganizationSlugConfiguration for application/json ContentType.
type PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody

// PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody defines body for PutOrganizationsLegalInformationsOrganizationSlugConfiguration for application/json-patch+json ContentType.
type PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationLegalInformationConfigurationBody

// PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody defines body for PostOrganizationsOrganizationSlugCheckoutIntents for application/*+json ContentType.
type PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsCartsInitCheckoutBody

// PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody defines body for PostOrganizationsOrganizationSlugCheckoutIntents for application/json ContentType.
type PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody = HelloAssoApiV5ModelsCartsInitCheckoutBody

// PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody defines body for PostOrganizationsOrganizationSlugCheckoutIntents for application/json-patch+json ContentType.
type PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsCartsInitCheckoutBody

// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody defines body for PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate for application/*+json ContentType.
type PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsFormsFormQuickCreateRequest

// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody defines body for PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate for application/json ContentType.
type PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody = HelloAssoApiV5ModelsFormsFormQuickCreateRequest

// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody defines body for PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate for application/json-patch+json ContentType.
type PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsFormsFormQuickCreateRequest

// PutOrganizationsOrganizationSlugTaxReceiptConfigurationMultipartRequestBody defines body for PutOrganizationsOrganizationSlugTaxReceiptConfiguration for multipart/form-data ContentType.
type PutOrganizationsOrganizationSlugTaxReceiptConfigurationMultipartRequestBody = PutOrganizationsOrganizationSlugTaxReceiptConfigurationMultipartBody

// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody defines body for PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter for application/*+json ContentType.
type PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody

// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody defines body for PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter for application/json ContentType.
type PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody

// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody defines body for PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter for application/json-patch+json ContentType.
type PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsOrganizationLegalInformationsUpdateOrganizationFiscalReceiptTransmitterBody

// PostOrganizationsOrganizationSlugTaxReceiptPreviewMultipartRequestBody defines body for PostOrganizationsOrganizationSlugTaxReceiptPreview for multipart/form-data ContentType.
type PostOrganizationsOrganizationSlugTaxReceiptPreviewMultipartRequestBody = PostOrganizationsOrganizationSlugTaxReceiptPreviewMultipartBody

// PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody defines body for PutPartnersMeApiClients for application/*+json ContentType.
type PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest

// PutPartnersMeApiClientsJSONRequestBody defines body for PutPartnersMeApiClients for application/json ContentType.
type PutPartnersMeApiClientsJSONRequestBody = HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest

// PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody defines body for PutPartnersMeApiClients for application/json-patch+json ContentType.
type PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsAccountsClientsPublicPutApiClientRequest

// PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody defines body for PutPartnersMeApiNotifications for application/*+json ContentType.
type PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// PutPartnersMeApiNotificationsJSONRequestBody defines body for PutPartnersMeApiNotifications for application/json ContentType.
type PutPartnersMeApiNotificationsJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody defines body for PutPartnersMeApiNotifications for application/json-patch+json ContentType.
type PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody defines body for PutPartnersMeApiNotificationsOrganizationsOrganizationSlug for application/*+json ContentType.
type PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody defines body for PutPartnersMeApiNotificationsOrganizationsOrganizationSlug for application/json ContentType.
type PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody defines body for PutPartnersMeApiNotificationsOrganizationsOrganizationSlug for application/json-patch+json ContentType.
type PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody = HelloAssoApiV5ModelsApiNotificationsPostApiUrlNotificationBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostDirectoryFormsWithBody request with any body
	PostDirectoryFormsWithBody(ctx context.Context, params *PostDirectoryFormsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryFormsWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryForms(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryFormsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostDirectoryOrganizationsWithBody request with any body
	PostDirectoryOrganizationsWithBody(ctx context.Context, params *PostDirectoryOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryOrganizationsWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryOrganizations(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostDirectoryOrganizationsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetItemsItemId request
	GetItemsItemId(ctx context.Context, itemId int32, params *GetItemsItemIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrdersOrderId request
	GetOrdersOrderId(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrdersOrderIdCancel request
	PostOrdersOrderIdCancel(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsLegalInformationsLegalStructures request
	GetOrganizationsLegalInformationsLegalStructures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsLegalInformationsTaxInformationTexts request
	GetOrganizationsLegalInformationsTaxInformationTexts(ctx context.Context, params *GetOrganizationsLegalInformationsTaxInformationTextsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsLegalInformationsOrganizationSlugConfiguration request
	GetOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBody request with any body
	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlug request
	GetOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrganizationSlugCheckoutIntentsWithBody request with any body
	PostOrganizationsOrganizationSlugCheckoutIntentsWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugCheckoutIntents(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId request
	GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId(ctx context.Context, organizationSlug string, checkoutIntentId int32, params *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugFormTypes request
	GetOrganizationsOrganizationSlugFormTypes(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugForms request
	GetOrganizationsOrganizationSlugForms(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBody request with any body
	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublic request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublic(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugItems request
	GetOrganizationsOrganizationSlugItems(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugOrders request
	GetOrganizationsOrganizationSlugOrders(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugPayments request
	GetOrganizationsOrganizationSlugPayments(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugPaymentsSearch request
	GetOrganizationsOrganizationSlugPaymentsSearch(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOrganizationsOrganizationSlugTaxReceiptConfiguration request
	GetOrganizationsOrganizationSlugTaxReceiptConfiguration(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBody request with any body
	PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBody(ctx context.Context, organizationSlug string, params *PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBody request with any body
	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBody request with any body
	PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBody(ctx context.Context, organizationSlug string, params *PostOrganizationsOrganizationSlugTaxReceiptPreviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnersMe request
	GetPartnersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPartnersMeApiClientsWithBody request with any body
	PutPartnersMeApiClientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiClientsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiClients(ctx context.Context, body PutPartnersMeApiClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiClientsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePartnersMeApiNotifications request
	DeletePartnersMeApiNotifications(ctx context.Context, params *DeletePartnersMeApiNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPartnersMeApiNotificationsWithBody request with any body
	PutPartnersMeApiNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotificationsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotifications(ctx context.Context, body PutPartnersMeApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotificationsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug request
	DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, params *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBody request with any body
	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnersMeOrganizations request
	GetPartnersMeOrganizations(ctx context.Context, params *GetPartnersMeOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPaymentsPaymentId request
	GetPaymentsPaymentId(ctx context.Context, paymentId int32, params *GetPaymentsPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPaymentsPaymentIdRefund request
	PostPaymentsPaymentIdRefund(ctx context.Context, paymentId int32, params *PostPaymentsPaymentIdRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTagsTagName request
	GetTagsTagName(ctx context.Context, tagName string, params *GetTagsTagNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUsersMeOrganizations request
	GetUsersMeOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValuesCompanyLegalStatus request
	GetValuesCompanyLegalStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValuesOrganizationCategories request
	GetValuesOrganizationCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetValuesTags request
	GetValuesTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostDirectoryFormsWithBody(ctx context.Context, params *PostDirectoryFormsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryFormsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryFormsWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryFormsRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryForms(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryFormsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryFormsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryFormsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryOrganizationsWithBody(ctx context.Context, params *PostDirectoryOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryOrganizationsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryOrganizationsWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryOrganizationsRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryOrganizations(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryOrganizationsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostDirectoryOrganizationsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostDirectoryOrganizationsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetItemsItemId(ctx context.Context, itemId int32, params *GetItemsItemIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetItemsItemIdRequest(c.Server, itemId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrdersOrderId(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrdersOrderIdRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrdersOrderIdCancel(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrdersOrderIdCancelRequest(c.Server, orderId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsLegalInformationsLegalStructures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsLegalInformationsLegalStructuresRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsLegalInformationsTaxInformationTexts(ctx context.Context, params *GetOrganizationsLegalInformationsTaxInformationTextsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsLegalInformationsTaxInformationTextsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsLegalInformationsOrganizationSlugConfigurationRequest(c.Server, organizationSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody(c.Server, organizationSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationWildcardPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequest(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationJSONPatchPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugRequest(c.Server, organizationSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugCheckoutIntentsWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody(c.Server, organizationSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationWildcardPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugCheckoutIntents(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugCheckoutIntentsRequest(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId(ctx context.Context, organizationSlug string, checkoutIntentId int32, params *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdRequest(c.Server, organizationSlug, checkoutIntentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugFormTypes(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormTypesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormTypesRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugForms(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormsRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody(c.Server, organizationSlug, formType, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationWildcardPlusJSONBody(c.Server, organizationSlug, formType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequest(c.Server, organizationSlug, formType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationJSONPatchPlusJSONBody(c.Server, organizationSlug, formType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsRequest(c.Server, organizationSlug, formType, formSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersRequest(c.Server, organizationSlug, formType, formSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsRequest(c.Server, organizationSlug, formType, formSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublic(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicRequest(c.Server, organizationSlug, formType, formSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugItems(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugItemsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugItemsRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugOrders(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugOrdersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugOrdersRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugPayments(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugPaymentsRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugPaymentsSearch(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsSearchParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugPaymentsSearchRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOrganizationsOrganizationSlugTaxReceiptConfiguration(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOrganizationsOrganizationSlugTaxReceiptConfigurationRequest(c.Server, organizationSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBody(ctx context.Context, organizationSlug string, params *PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrganizationSlugTaxReceiptConfigurationRequestWithBody(c.Server, organizationSlug, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody(c.Server, organizationSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationWildcardPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequest(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationJSONPatchPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBody(ctx context.Context, organizationSlug string, params *PostOrganizationsOrganizationSlugTaxReceiptPreviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostOrganizationsOrganizationSlugTaxReceiptPreviewRequestWithBody(c.Server, organizationSlug, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnersMe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnersMeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiClientsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiClientsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiClientsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiClientsRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiClients(ctx context.Context, body PutPartnersMeApiClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiClientsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiClientsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiClientsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePartnersMeApiNotifications(ctx context.Context, params *DeletePartnersMeApiNotificationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePartnersMeApiNotificationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotifications(ctx context.Context, body PutPartnersMeApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, params *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugRequest(c.Server, organizationSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBody(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody(c.Server, organizationSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationWildcardPlusJSONBody(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationWildcardPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequest(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationJSONPatchPlusJSONBody(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationJSONPatchPlusJSONBody(c.Server, organizationSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnersMeOrganizations(ctx context.Context, params *GetPartnersMeOrganizationsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnersMeOrganizationsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPaymentsPaymentId(ctx context.Context, paymentId int32, params *GetPaymentsPaymentIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPaymentsPaymentIdRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPaymentsPaymentIdRefund(ctx context.Context, paymentId int32, params *PostPaymentsPaymentIdRefundParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPaymentsPaymentIdRefundRequest(c.Server, paymentId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTagsTagName(ctx context.Context, tagName string, params *GetTagsTagNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTagsTagNameRequest(c.Server, tagName, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUsersMeOrganizations(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUsersMeOrganizationsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValuesCompanyLegalStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValuesCompanyLegalStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValuesOrganizationCategories(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValuesOrganizationCategoriesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetValuesTags(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetValuesTagsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostDirectoryFormsRequestWithApplicationWildcardPlusJSONBody calls the generic PostDirectoryForms builder with application/*+json body
func NewPostDirectoryFormsRequestWithApplicationWildcardPlusJSONBody(server string, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryFormsRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostDirectoryFormsRequest calls the generic PostDirectoryForms builder with application/json body
func NewPostDirectoryFormsRequest(server string, params *PostDirectoryFormsParams, body PostDirectoryFormsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryFormsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDirectoryFormsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostDirectoryForms builder with application/json-patch+json body
func NewPostDirectoryFormsRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryFormsRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostDirectoryFormsRequestWithBody generates requests for PostDirectoryForms with any type of body
func NewPostDirectoryFormsRequestWithBody(server string, params *PostDirectoryFormsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/directory/forms")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostDirectoryOrganizationsRequestWithApplicationWildcardPlusJSONBody calls the generic PostDirectoryOrganizations builder with application/*+json body
func NewPostDirectoryOrganizationsRequestWithApplicationWildcardPlusJSONBody(server string, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryOrganizationsRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostDirectoryOrganizationsRequest calls the generic PostDirectoryOrganizations builder with application/json body
func NewPostDirectoryOrganizationsRequest(server string, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryOrganizationsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostDirectoryOrganizationsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostDirectoryOrganizations builder with application/json-patch+json body
func NewPostDirectoryOrganizationsRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostDirectoryOrganizationsRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostDirectoryOrganizationsRequestWithBody generates requests for PostDirectoryOrganizations with any type of body
func NewPostDirectoryOrganizationsRequestWithBody(server string, params *PostDirectoryOrganizationsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/directory/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetItemsItemIdRequest generates requests for GetItemsItemId
func NewGetItemsItemIdRequest(server string, itemId int32, params *GetItemsItemIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "itemId", runtime.ParamLocationPath, itemId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/items/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrdersOrderIdRequest generates requests for GetOrdersOrderId
func NewGetOrdersOrderIdRequest(server string, orderId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrdersOrderIdCancelRequest generates requests for PostOrdersOrderIdCancel
func NewPostOrdersOrderIdCancelRequest(server string, orderId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/orders/%s/cancel", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsLegalInformationsLegalStructuresRequest generates requests for GetOrganizationsLegalInformationsLegalStructures
func NewGetOrganizationsLegalInformationsLegalStructuresRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/legal-informations/legal-structures")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsLegalInformationsTaxInformationTextsRequest generates requests for GetOrganizationsLegalInformationsTaxInformationTexts
func NewGetOrganizationsLegalInformationsTaxInformationTextsRequest(server string, params *GetOrganizationsLegalInformationsTaxInformationTextsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/legal-informations/tax-information-texts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.OrganizationSlug != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "organizationSlug", runtime.ParamLocationQuery, *params.OrganizationSlug); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsLegalInformationsOrganizationSlugConfigurationRequest generates requests for GetOrganizationsLegalInformationsOrganizationSlugConfiguration
func NewGetOrganizationsLegalInformationsOrganizationSlugConfigurationRequest(server string, organizationSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/legal-informations/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationWildcardPlusJSONBody calls the generic PutOrganizationsLegalInformationsOrganizationSlugConfiguration builder with application/*+json body
func NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationWildcardPlusJSONBody(server string, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody(server, organizationSlug, "application/*+json", bodyReader)
}

// NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequest calls the generic PutOrganizationsLegalInformationsOrganizationSlugConfiguration builder with application/json body
func NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequest(server string, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody(server, organizationSlug, "application/json", bodyReader)
}

// NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutOrganizationsLegalInformationsOrganizationSlugConfiguration builder with application/json-patch+json body
func NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithApplicationJSONPatchPlusJSONBody(server string, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody(server, organizationSlug, "application/json-patch+json", bodyReader)
}

// NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody generates requests for PutOrganizationsLegalInformationsOrganizationSlugConfiguration with any type of body
func NewPutOrganizationsLegalInformationsOrganizationSlugConfigurationRequestWithBody(server string, organizationSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/legal-informations/%s/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrganizationSlugRequest generates requests for GetOrganizationsOrganizationSlug
func NewGetOrganizationsOrganizationSlugRequest(server string, organizationSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationWildcardPlusJSONBody calls the generic PostOrganizationsOrganizationSlugCheckoutIntents builder with application/*+json body
func NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationWildcardPlusJSONBody(server string, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody(server, organizationSlug, "application/*+json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugCheckoutIntentsRequest calls the generic PostOrganizationsOrganizationSlugCheckoutIntents builder with application/json body
func NewPostOrganizationsOrganizationSlugCheckoutIntentsRequest(server string, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody(server, organizationSlug, "application/json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostOrganizationsOrganizationSlugCheckoutIntents builder with application/json-patch+json body
func NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithApplicationJSONPatchPlusJSONBody(server string, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody(server, organizationSlug, "application/json-patch+json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody generates requests for PostOrganizationsOrganizationSlugCheckoutIntents with any type of body
func NewPostOrganizationsOrganizationSlugCheckoutIntentsRequestWithBody(server string, organizationSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/checkout-intents", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdRequest generates requests for GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId
func NewGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdRequest(server string, organizationSlug string, checkoutIntentId int32, params *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "checkoutIntentId", runtime.ParamLocationPath, checkoutIntentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/checkout-intents/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithFailedRefundOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withFailedRefundOperation", runtime.ParamLocationQuery, *params.WithFailedRefundOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormTypesRequest generates requests for GetOrganizationsOrganizationSlugFormTypes
func NewGetOrganizationsOrganizationSlugFormTypesRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugFormTypesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/formTypes", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormsRequest generates requests for GetOrganizationsOrganizationSlugForms
func NewGetOrganizationsOrganizationSlugFormsRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugFormsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FormTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formTypes", runtime.ParamLocationQuery, *params.FormTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationWildcardPlusJSONBody calls the generic PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate builder with application/*+json body
func NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationWildcardPlusJSONBody(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody(server, organizationSlug, formType, "application/*+json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequest calls the generic PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate builder with application/json body
func NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequest(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody(server, organizationSlug, formType, "application/json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate builder with application/json-patch+json body
func NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithApplicationJSONPatchPlusJSONBody(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody(server, organizationSlug, formType, "application/json-patch+json", bodyReader)
}

// NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody generates requests for PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate with any type of body
func NewPostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateRequestWithBody(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "formType", runtime.ParamLocationPath, formType)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s/action/quick-create", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsRequest generates requests for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems
func NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsRequest(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "formType", runtime.ParamLocationPath, formType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "formSlug", runtime.ParamLocationPath, formSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s/%s/items", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TierTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tierTypes", runtime.ParamLocationQuery, *params.TierTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemStates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemStates", runtime.ParamLocationQuery, *params.ItemStates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TierName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tierName", runtime.ParamLocationQuery, *params.TierName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersRequest generates requests for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders
func NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersRequest(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "formType", runtime.ParamLocationPath, formType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "formSlug", runtime.ParamLocationPath, formSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s/%s/orders", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsRequest generates requests for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments
func NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsRequest(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "formType", runtime.ParamLocationPath, formType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "formSlug", runtime.ParamLocationPath, formSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s/%s/payments", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicRequest generates requests for GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublic
func NewGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicRequest(server string, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "formType", runtime.ParamLocationPath, formType)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "formSlug", runtime.ParamLocationPath, formSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/forms/%s/%s/public", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugItemsRequest generates requests for GetOrganizationsOrganizationSlugItems
func NewGetOrganizationsOrganizationSlugItemsRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugItemsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/items", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TierTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tierTypes", runtime.ParamLocationQuery, *params.TierTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ItemStates != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "itemStates", runtime.ParamLocationQuery, *params.ItemStates); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TierName != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "tierName", runtime.ParamLocationQuery, *params.TierName); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugOrdersRequest generates requests for GetOrganizationsOrganizationSlugOrders
func NewGetOrganizationsOrganizationSlugOrdersRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugOrdersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/orders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FormTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formTypes", runtime.ParamLocationQuery, *params.FormTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithDetails != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withDetails", runtime.ParamLocationQuery, *params.WithDetails); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugPaymentsRequest generates requests for GetOrganizationsOrganizationSlugPayments
func NewGetOrganizationsOrganizationSlugPaymentsRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/payments", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserSearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userSearchKey", runtime.ParamLocationQuery, *params.UserSearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageIndex != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageIndex", runtime.ParamLocationQuery, *params.PageIndex); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugPaymentsSearchRequest generates requests for GetOrganizationsOrganizationSlugPaymentsSearch
func NewGetOrganizationsOrganizationSlugPaymentsSearchRequest(server string, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsSearchParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/payments/search", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.From != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "from", runtime.ParamLocationQuery, *params.From); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.To != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "to", runtime.ParamLocationQuery, *params.To); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FormTypes != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formTypes", runtime.ParamLocationQuery, *params.FormTypes); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FormType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "formType", runtime.ParamLocationQuery, *params.FormType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.States != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "states", runtime.ParamLocationQuery, *params.States); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SearchKey != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "searchKey", runtime.ParamLocationQuery, *params.SearchKey); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortOrder", runtime.ParamLocationQuery, *params.SortOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SortField != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sortField", runtime.ParamLocationQuery, *params.SortField); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetOrganizationsOrganizationSlugTaxReceiptConfigurationRequest generates requests for GetOrganizationsOrganizationSlugTaxReceiptConfiguration
func NewGetOrganizationsOrganizationSlugTaxReceiptConfigurationRequest(server string, organizationSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax-receipt/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutOrganizationsOrganizationSlugTaxReceiptConfigurationRequestWithBody generates requests for PutOrganizationsOrganizationSlugTaxReceiptConfiguration with any type of body
func NewPutOrganizationsOrganizationSlugTaxReceiptConfigurationRequestWithBody(server string, organizationSlug string, params *PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax-receipt/configuration", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Config != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "config", runtime.ParamLocationQuery, *params.Config); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationWildcardPlusJSONBody calls the generic PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter builder with application/*+json body
func NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationWildcardPlusJSONBody(server string, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody(server, organizationSlug, "application/*+json", bodyReader)
}

// NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequest calls the generic PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter builder with application/json body
func NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequest(server string, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody(server, organizationSlug, "application/json", bodyReader)
}

// NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter builder with application/json-patch+json body
func NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithApplicationJSONPatchPlusJSONBody(server string, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody(server, organizationSlug, "application/json-patch+json", bodyReader)
}

// NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody generates requests for PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter with any type of body
func NewPutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterRequestWithBody(server string, organizationSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax-receipt/fiscal-receipt-transmitter", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostOrganizationsOrganizationSlugTaxReceiptPreviewRequestWithBody generates requests for PostOrganizationsOrganizationSlugTaxReceiptPreview with any type of body
func NewPostOrganizationsOrganizationSlugTaxReceiptPreviewRequestWithBody(server string, organizationSlug string, params *PostOrganizationsOrganizationSlugTaxReceiptPreviewParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/organizations/%s/tax-receipt/preview", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "file", runtime.ParamLocationQuery, params.File); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Config != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "config", runtime.ParamLocationQuery, *params.Config); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnersMeRequest generates requests for GetPartnersMe
func NewGetPartnersMeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPartnersMeApiClientsRequestWithApplicationWildcardPlusJSONBody calls the generic PutPartnersMeApiClients builder with application/*+json body
func NewPutPartnersMeApiClientsRequestWithApplicationWildcardPlusJSONBody(server string, body PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiClientsRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutPartnersMeApiClientsRequest calls the generic PutPartnersMeApiClients builder with application/json body
func NewPutPartnersMeApiClientsRequest(server string, body PutPartnersMeApiClientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiClientsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPartnersMeApiClientsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutPartnersMeApiClients builder with application/json-patch+json body
func NewPutPartnersMeApiClientsRequestWithApplicationJSONPatchPlusJSONBody(server string, body PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiClientsRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPutPartnersMeApiClientsRequestWithBody generates requests for PutPartnersMeApiClients with any type of body
func NewPutPartnersMeApiClientsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/api-clients")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePartnersMeApiNotificationsRequest generates requests for DeletePartnersMeApiNotifications
func NewDeletePartnersMeApiNotificationsRequest(server string, params *DeletePartnersMeApiNotificationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/api-notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NotificationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notificationType", runtime.ParamLocationQuery, *params.NotificationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPartnersMeApiNotificationsRequestWithApplicationWildcardPlusJSONBody calls the generic PutPartnersMeApiNotifications builder with application/*+json body
func NewPutPartnersMeApiNotificationsRequestWithApplicationWildcardPlusJSONBody(server string, body PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutPartnersMeApiNotificationsRequest calls the generic PutPartnersMeApiNotifications builder with application/json body
func NewPutPartnersMeApiNotificationsRequest(server string, body PutPartnersMeApiNotificationsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutPartnersMeApiNotificationsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutPartnersMeApiNotifications builder with application/json-patch+json body
func NewPutPartnersMeApiNotificationsRequestWithApplicationJSONPatchPlusJSONBody(server string, body PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPutPartnersMeApiNotificationsRequestWithBody generates requests for PutPartnersMeApiNotifications with any type of body
func NewPutPartnersMeApiNotificationsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/api-notifications")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugRequest generates requests for DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug
func NewDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugRequest(server string, organizationSlug string, params *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/api-notifications/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.NotificationType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "notificationType", runtime.ParamLocationQuery, *params.NotificationType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationWildcardPlusJSONBody calls the generic PutPartnersMeApiNotificationsOrganizationsOrganizationSlug builder with application/*+json body
func NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationWildcardPlusJSONBody(server string, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody(server, organizationSlug, "application/*+json", bodyReader)
}

// NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequest calls the generic PutPartnersMeApiNotificationsOrganizationsOrganizationSlug builder with application/json body
func NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequest(server string, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody(server, organizationSlug, "application/json", bodyReader)
}

// NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutPartnersMeApiNotificationsOrganizationsOrganizationSlug builder with application/json-patch+json body
func NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithApplicationJSONPatchPlusJSONBody(server string, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody(server, organizationSlug, "application/json-patch+json", bodyReader)
}

// NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody generates requests for PutPartnersMeApiNotificationsOrganizationsOrganizationSlug with any type of body
func NewPutPartnersMeApiNotificationsOrganizationsOrganizationSlugRequestWithBody(server string, organizationSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "organizationSlug", runtime.ParamLocationPath, organizationSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/api-notifications/organizations/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPartnersMeOrganizationsRequest generates requests for GetPartnersMeOrganizations
func NewGetPartnersMeOrganizationsRequest(server string, params *GetPartnersMeOrganizationsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partners/me/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.PageSize != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "pageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ContinuationToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "continuationToken", runtime.ParamLocationQuery, *params.ContinuationToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetPaymentsPaymentIdRequest generates requests for GetPaymentsPaymentId
func NewGetPaymentsPaymentIdRequest(server string, paymentId int32, params *GetPaymentsPaymentIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithFailedRefundOperation != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withFailedRefundOperation", runtime.ParamLocationQuery, *params.WithFailedRefundOperation); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPaymentsPaymentIdRefundRequest generates requests for PostPaymentsPaymentIdRefund
func NewPostPaymentsPaymentIdRefundRequest(server string, paymentId int32, params *PostPaymentsPaymentIdRefundParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "paymentId", runtime.ParamLocationPath, paymentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/payments/%s/refund", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Comment != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "comment", runtime.ParamLocationQuery, *params.Comment); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CancelOrder != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "cancelOrder", runtime.ParamLocationQuery, *params.CancelOrder); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SendRefundMail != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sendRefundMail", runtime.ParamLocationQuery, *params.SendRefundMail); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTagsTagNameRequest generates requests for GetTagsTagName
func NewGetTagsTagNameRequest(server string, tagName string, params *GetTagsTagNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "tagName", runtime.ParamLocationPath, tagName)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/tags/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.WithCount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withCount", runtime.ParamLocationQuery, *params.WithCount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.WithAmount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "withAmount", runtime.ParamLocationQuery, *params.WithAmount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUsersMeOrganizationsRequest generates requests for GetUsersMeOrganizations
func NewGetUsersMeOrganizationsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/me/organizations")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValuesCompanyLegalStatusRequest generates requests for GetValuesCompanyLegalStatus
func NewGetValuesCompanyLegalStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/values/company-legal-status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValuesOrganizationCategoriesRequest generates requests for GetValuesOrganizationCategories
func NewGetValuesOrganizationCategoriesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/values/organization/categories")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetValuesTagsRequest generates requests for GetValuesTags
func NewGetValuesTagsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/values/tags")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostDirectoryFormsWithBodyWithResponse request with any body
	PostDirectoryFormsWithBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error)

	PostDirectoryFormsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error)

	PostDirectoryFormsWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error)

	PostDirectoryFormsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error)

	// PostDirectoryOrganizationsWithBodyWithResponse request with any body
	PostDirectoryOrganizationsWithBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error)

	PostDirectoryOrganizationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error)

	PostDirectoryOrganizationsWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error)

	PostDirectoryOrganizationsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error)

	// GetItemsItemIdWithResponse request
	GetItemsItemIdWithResponse(ctx context.Context, itemId int32, params *GetItemsItemIdParams, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error)

	// GetOrdersOrderIdWithResponse request
	GetOrdersOrderIdWithResponse(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*GetOrdersOrderIdResponse, error)

	// PostOrdersOrderIdCancelWithResponse request
	PostOrdersOrderIdCancelWithResponse(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*PostOrdersOrderIdCancelResponse, error)

	// GetOrganizationsLegalInformationsLegalStructuresWithResponse request
	GetOrganizationsLegalInformationsLegalStructuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsLegalStructuresResponse, error)

	// GetOrganizationsLegalInformationsTaxInformationTextsWithResponse request
	GetOrganizationsLegalInformationsTaxInformationTextsWithResponse(ctx context.Context, params *GetOrganizationsLegalInformationsTaxInformationTextsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsTaxInformationTextsResponse, error)

	// GetOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse request
	GetOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error)

	// PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBodyWithResponse request with any body
	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error)

	PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error)

	// GetOrganizationsOrganizationSlugWithResponse request
	GetOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugResponse, error)

	// PostOrganizationsOrganizationSlugCheckoutIntentsWithBodyWithResponse request with any body
	PostOrganizationsOrganizationSlugCheckoutIntentsWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error)

	PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error)

	PostOrganizationsOrganizationSlugCheckoutIntentsWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error)

	PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error)

	// GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdWithResponse request
	GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdWithResponse(ctx context.Context, organizationSlug string, checkoutIntentId int32, params *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse, error)

	// GetOrganizationsOrganizationSlugFormTypesWithResponse request
	GetOrganizationsOrganizationSlugFormTypesWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormTypesParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormTypesResponse, error)

	// GetOrganizationsOrganizationSlugFormsWithResponse request
	GetOrganizationsOrganizationSlugFormsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsResponse, error)

	// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBodyWithResponse request with any body
	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error)

	PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsWithResponse request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersWithResponse request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsWithResponse request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse, error)

	// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicWithResponse request
	GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse, error)

	// GetOrganizationsOrganizationSlugItemsWithResponse request
	GetOrganizationsOrganizationSlugItemsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugItemsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugItemsResponse, error)

	// GetOrganizationsOrganizationSlugOrdersWithResponse request
	GetOrganizationsOrganizationSlugOrdersWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugOrdersParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugOrdersResponse, error)

	// GetOrganizationsOrganizationSlugPaymentsWithResponse request
	GetOrganizationsOrganizationSlugPaymentsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugPaymentsResponse, error)

	// GetOrganizationsOrganizationSlugPaymentsSearchWithResponse request
	GetOrganizationsOrganizationSlugPaymentsSearchWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugPaymentsSearchResponse, error)

	// GetOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse request
	GetOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error)

	// PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBodyWithResponse request with any body
	PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBodyWithResponse(ctx context.Context, organizationSlug string, params *PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error)

	// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBodyWithResponse request with any body
	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error)

	PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error)

	// PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBodyWithResponse request with any body
	PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBodyWithResponse(ctx context.Context, organizationSlug string, params *PostOrganizationsOrganizationSlugTaxReceiptPreviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse, error)

	// GetPartnersMeWithResponse request
	GetPartnersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPartnersMeResponse, error)

	// PutPartnersMeApiClientsWithBodyWithResponse request with any body
	PutPartnersMeApiClientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error)

	PutPartnersMeApiClientsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error)

	PutPartnersMeApiClientsWithResponse(ctx context.Context, body PutPartnersMeApiClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error)

	PutPartnersMeApiClientsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error)

	// DeletePartnersMeApiNotificationsWithResponse request
	DeletePartnersMeApiNotificationsWithResponse(ctx context.Context, params *DeletePartnersMeApiNotificationsParams, reqEditors ...RequestEditorFn) (*DeletePartnersMeApiNotificationsResponse, error)

	// PutPartnersMeApiNotificationsWithBodyWithResponse request with any body
	PutPartnersMeApiNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error)

	PutPartnersMeApiNotificationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error)

	PutPartnersMeApiNotificationsWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error)

	PutPartnersMeApiNotificationsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error)

	// DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse request
	DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, params *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams, reqEditors ...RequestEditorFn) (*DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error)

	// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBodyWithResponse request with any body
	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error)

	PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error)

	// GetPartnersMeOrganizationsWithResponse request
	GetPartnersMeOrganizationsWithResponse(ctx context.Context, params *GetPartnersMeOrganizationsParams, reqEditors ...RequestEditorFn) (*GetPartnersMeOrganizationsResponse, error)

	// GetPaymentsPaymentIdWithResponse request
	GetPaymentsPaymentIdWithResponse(ctx context.Context, paymentId int32, params *GetPaymentsPaymentIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentIdResponse, error)

	// PostPaymentsPaymentIdRefundWithResponse request
	PostPaymentsPaymentIdRefundWithResponse(ctx context.Context, paymentId int32, params *PostPaymentsPaymentIdRefundParams, reqEditors ...RequestEditorFn) (*PostPaymentsPaymentIdRefundResponse, error)

	// GetTagsTagNameWithResponse request
	GetTagsTagNameWithResponse(ctx context.Context, tagName string, params *GetTagsTagNameParams, reqEditors ...RequestEditorFn) (*GetTagsTagNameResponse, error)

	// GetUsersMeOrganizationsWithResponse request
	GetUsersMeOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeOrganizationsResponse, error)

	// GetValuesCompanyLegalStatusWithResponse request
	GetValuesCompanyLegalStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesCompanyLegalStatusResponse, error)

	// GetValuesOrganizationCategoriesWithResponse request
	GetValuesOrganizationCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesOrganizationCategoriesResponse, error)

	// GetValuesTagsWithResponse request
	GetValuesTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesTagsResponse, error)
}

type PostDirectoryFormsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelSynchronizableFormModel
}

// Status returns HTTPResponse.Status
func (r PostDirectoryFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDirectoryFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostDirectoryOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelSynchronizableOrganizationModel
}

// Status returns HTTPResponse.Status
func (r PostDirectoryOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostDirectoryOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetItemsItemIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsStatisticsItemDetail
}

// Status returns HTTPResponse.Status
func (r GetItemsItemIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetItemsItemIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrdersOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsStatisticsOrderDetail
}

// Status returns HTTPResponse.Status
func (r GetOrdersOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrdersOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrdersOrderIdCancelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrdersOrderIdCancelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrdersOrderIdCancelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsLegalInformationsLegalStructuresResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsLegalInformationsLegalStructuresResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsLegalInformationsLegalStructuresResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsLegalInformationsTaxInformationTextsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsLegalInformationsTaxInformationTextsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsLegalInformationsTaxInformationTextsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfiguration
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsOrganizationOrganizationModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrganizationSlugCheckoutIntentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsCartsInitCheckoutResponse
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrganizationSlugCheckoutIntentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrganizationSlugCheckoutIntentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsCartsCheckoutIntentResponse
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormTypesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsEnumsFormType
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormTypesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormTypesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelFormLightModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsFormsFormQuickCreateModel
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelOrder
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelPayment
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsFormsFormPublicModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugItemsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugItemsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugItemsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugOrdersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelOrder
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugOrdersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugOrdersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugPaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugPaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugPaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugPaymentsSearchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelPublicPaymentModel
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugPaymentsSearchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugPaymentsSearchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration
}

// Status returns HTTPResponse.Status
func (r GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnersMeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsPartnersPartnerPublicModel
}

// Status returns HTTPResponse.Status
func (r GetPartnersMeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnersMeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPartnersMeApiClientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutPartnersMeApiClientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPartnersMeApiClientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePartnersMeApiNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePartnersMeApiNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePartnersMeApiNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPartnersMeApiNotificationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel
}

// Status returns HTTPResponse.Status
func (r PutPartnersMeApiNotificationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPartnersMeApiNotificationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel
}

// Status returns HTTPResponse.Status
func (r PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnersMeOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ResultsWithPaginationModelPartnerOrganizationModel
}

// Status returns HTTPResponse.Status
func (r GetPartnersMeOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnersMeOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPaymentsPaymentIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsStatisticsPaymentDetail
}

// Status returns HTTPResponse.Status
func (r GetPaymentsPaymentIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPaymentsPaymentIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPaymentsPaymentIdRefundResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsPaymentRefundOperationModel
}

// Status returns HTTPResponse.Status
func (r PostPaymentsPaymentIdRefundResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPaymentsPaymentIdRefundResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTagsTagNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HelloAssoApiV5ModelsTagsInternalTagModel
}

// Status returns HTTPResponse.Status
func (r GetTagsTagNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTagsTagNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUsersMeOrganizationsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsOrganizationOrganizationLightModel
}

// Status returns HTTPResponse.Status
func (r GetUsersMeOrganizationsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUsersMeOrganizationsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValuesCompanyLegalStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsAccountCompanyLegalStatusModel
}

// Status returns HTTPResponse.Status
func (r GetValuesCompanyLegalStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValuesCompanyLegalStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValuesOrganizationCategoriesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsAccountOrganismCategoryModel
}

// Status returns HTTPResponse.Status
func (r GetValuesOrganizationCategoriesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValuesOrganizationCategoriesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetValuesTagsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HelloAssoApiV5ModelsTagsPublicTagModel
}

// Status returns HTTPResponse.Status
func (r GetValuesTagsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetValuesTagsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostDirectoryFormsWithBodyWithResponse request with arbitrary body returning *PostDirectoryFormsResponse
func (c *ClientWithResponses) PostDirectoryFormsWithBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error) {
	rsp, err := c.PostDirectoryFormsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryFormsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryFormsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error) {
	rsp, err := c.PostDirectoryFormsWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryFormsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryFormsWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error) {
	rsp, err := c.PostDirectoryForms(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryFormsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryFormsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryFormsParams, body PostDirectoryFormsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryFormsResponse, error) {
	rsp, err := c.PostDirectoryFormsWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryFormsResponse(rsp)
}

// PostDirectoryOrganizationsWithBodyWithResponse request with arbitrary body returning *PostDirectoryOrganizationsResponse
func (c *ClientWithResponses) PostDirectoryOrganizationsWithBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error) {
	rsp, err := c.PostDirectoryOrganizationsWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryOrganizationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error) {
	rsp, err := c.PostDirectoryOrganizationsWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryOrganizationsWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error) {
	rsp, err := c.PostDirectoryOrganizations(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryOrganizationsResponse(rsp)
}

func (c *ClientWithResponses) PostDirectoryOrganizationsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostDirectoryOrganizationsParams, body PostDirectoryOrganizationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostDirectoryOrganizationsResponse, error) {
	rsp, err := c.PostDirectoryOrganizationsWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostDirectoryOrganizationsResponse(rsp)
}

// GetItemsItemIdWithResponse request returning *GetItemsItemIdResponse
func (c *ClientWithResponses) GetItemsItemIdWithResponse(ctx context.Context, itemId int32, params *GetItemsItemIdParams, reqEditors ...RequestEditorFn) (*GetItemsItemIdResponse, error) {
	rsp, err := c.GetItemsItemId(ctx, itemId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetItemsItemIdResponse(rsp)
}

// GetOrdersOrderIdWithResponse request returning *GetOrdersOrderIdResponse
func (c *ClientWithResponses) GetOrdersOrderIdWithResponse(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*GetOrdersOrderIdResponse, error) {
	rsp, err := c.GetOrdersOrderId(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrdersOrderIdResponse(rsp)
}

// PostOrdersOrderIdCancelWithResponse request returning *PostOrdersOrderIdCancelResponse
func (c *ClientWithResponses) PostOrdersOrderIdCancelWithResponse(ctx context.Context, orderId int32, reqEditors ...RequestEditorFn) (*PostOrdersOrderIdCancelResponse, error) {
	rsp, err := c.PostOrdersOrderIdCancel(ctx, orderId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrdersOrderIdCancelResponse(rsp)
}

// GetOrganizationsLegalInformationsLegalStructuresWithResponse request returning *GetOrganizationsLegalInformationsLegalStructuresResponse
func (c *ClientWithResponses) GetOrganizationsLegalInformationsLegalStructuresWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsLegalStructuresResponse, error) {
	rsp, err := c.GetOrganizationsLegalInformationsLegalStructures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsLegalInformationsLegalStructuresResponse(rsp)
}

// GetOrganizationsLegalInformationsTaxInformationTextsWithResponse request returning *GetOrganizationsLegalInformationsTaxInformationTextsResponse
func (c *ClientWithResponses) GetOrganizationsLegalInformationsTaxInformationTextsWithResponse(ctx context.Context, params *GetOrganizationsLegalInformationsTaxInformationTextsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsTaxInformationTextsResponse, error) {
	rsp, err := c.GetOrganizationsLegalInformationsTaxInformationTexts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsLegalInformationsTaxInformationTextsResponse(rsp)
}

// GetOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse request returning *GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse
func (c *ClientWithResponses) GetOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	rsp, err := c.GetOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx, organizationSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp)
}

// PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBodyWithResponse request with arbitrary body returning *PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse
func (c *ClientWithResponses) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	rsp, err := c.PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithBody(ctx, organizationSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	rsp, err := c.PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationWildcardPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	rsp, err := c.PutOrganizationsLegalInformationsOrganizationSlugConfiguration(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsLegalInformationsOrganizationSlugConfigurationApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	rsp, err := c.PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithApplicationJSONPatchPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp)
}

// GetOrganizationsOrganizationSlugWithResponse request returning *GetOrganizationsOrganizationSlugResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlug(ctx, organizationSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugResponse(rsp)
}

// PostOrganizationsOrganizationSlugCheckoutIntentsWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrganizationSlugCheckoutIntentsResponse
func (c *ClientWithResponses) PostOrganizationsOrganizationSlugCheckoutIntentsWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugCheckoutIntentsWithBody(ctx, organizationSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationWildcardPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugCheckoutIntentsWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugCheckoutIntents(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PostOrganizationsOrganizationSlugCheckoutIntentsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugCheckoutIntentsWithApplicationJSONPatchPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse(rsp)
}

// GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdWithResponse request returning *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdWithResponse(ctx context.Context, organizationSlug string, checkoutIntentId int32, params *GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentId(ctx, organizationSlug, checkoutIntentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormTypesWithResponse request returning *GetOrganizationsOrganizationSlugFormTypesResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormTypesWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormTypesParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormTypesResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugFormTypes(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormTypesResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormsWithResponse request returning *GetOrganizationsOrganizationSlugFormsResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugFormsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugForms(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormsResponse(rsp)
}

// PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse
func (c *ClientWithResponses) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithBody(ctx, organizationSlug, formType, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationWildcardPlusJSONBody(ctx, organizationSlug, formType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreate(ctx, organizationSlug, formType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse(rsp)
}

func (c *ClientWithResponses) PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, body PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithApplicationJSONPatchPlusJSONBody(ctx, organizationSlug, formType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsWithResponse request returning *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItems(ctx, organizationSlug, formType, formSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersWithResponse request returning *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrders(ctx, organizationSlug, formType, formSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsWithResponse request returning *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, params *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPayments(ctx, organizationSlug, formType, formSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse(rsp)
}

// GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicWithResponse request returning *GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicWithResponse(ctx context.Context, organizationSlug string, formType HelloAssoApiV5ModelsEnumsFormType, formSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublic(ctx, organizationSlug, formType, formSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse(rsp)
}

// GetOrganizationsOrganizationSlugItemsWithResponse request returning *GetOrganizationsOrganizationSlugItemsResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugItemsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugItemsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugItemsResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugItems(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugItemsResponse(rsp)
}

// GetOrganizationsOrganizationSlugOrdersWithResponse request returning *GetOrganizationsOrganizationSlugOrdersResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugOrdersWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugOrdersParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugOrdersResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugOrders(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugOrdersResponse(rsp)
}

// GetOrganizationsOrganizationSlugPaymentsWithResponse request returning *GetOrganizationsOrganizationSlugPaymentsResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugPaymentsWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugPaymentsResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugPayments(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugPaymentsResponse(rsp)
}

// GetOrganizationsOrganizationSlugPaymentsSearchWithResponse request returning *GetOrganizationsOrganizationSlugPaymentsSearchResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugPaymentsSearchWithResponse(ctx context.Context, organizationSlug string, params *GetOrganizationsOrganizationSlugPaymentsSearchParams, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugPaymentsSearchResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugPaymentsSearch(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugPaymentsSearchResponse(rsp)
}

// GetOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse request returning *GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse
func (c *ClientWithResponses) GetOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse(ctx context.Context, organizationSlug string, reqEditors ...RequestEditorFn) (*GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error) {
	rsp, err := c.GetOrganizationsOrganizationSlugTaxReceiptConfiguration(ctx, organizationSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse(rsp)
}

// PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse
func (c *ClientWithResponses) PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBodyWithResponse(ctx context.Context, organizationSlug string, params *PutOrganizationsOrganizationSlugTaxReceiptConfigurationParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error) {
	rsp, err := c.PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithBody(ctx, organizationSlug, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse(rsp)
}

// PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBodyWithResponse request with arbitrary body returning *PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse
func (c *ClientWithResponses) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error) {
	rsp, err := c.PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithBody(ctx, organizationSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error) {
	rsp, err := c.PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationWildcardPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error) {
	rsp, err := c.PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitter(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse(rsp)
}

func (c *ClientWithResponses) PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error) {
	rsp, err := c.PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithApplicationJSONPatchPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse(rsp)
}

// PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBodyWithResponse request with arbitrary body returning *PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse
func (c *ClientWithResponses) PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBodyWithResponse(ctx context.Context, organizationSlug string, params *PostOrganizationsOrganizationSlugTaxReceiptPreviewParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse, error) {
	rsp, err := c.PostOrganizationsOrganizationSlugTaxReceiptPreviewWithBody(ctx, organizationSlug, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostOrganizationsOrganizationSlugTaxReceiptPreviewResponse(rsp)
}

// GetPartnersMeWithResponse request returning *GetPartnersMeResponse
func (c *ClientWithResponses) GetPartnersMeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetPartnersMeResponse, error) {
	rsp, err := c.GetPartnersMe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnersMeResponse(rsp)
}

// PutPartnersMeApiClientsWithBodyWithResponse request with arbitrary body returning *PutPartnersMeApiClientsResponse
func (c *ClientWithResponses) PutPartnersMeApiClientsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error) {
	rsp, err := c.PutPartnersMeApiClientsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiClientsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiClientsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiClientsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error) {
	rsp, err := c.PutPartnersMeApiClientsWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiClientsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiClientsWithResponse(ctx context.Context, body PutPartnersMeApiClientsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error) {
	rsp, err := c.PutPartnersMeApiClients(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiClientsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiClientsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiClientsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiClientsResponse, error) {
	rsp, err := c.PutPartnersMeApiClientsWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiClientsResponse(rsp)
}

// DeletePartnersMeApiNotificationsWithResponse request returning *DeletePartnersMeApiNotificationsResponse
func (c *ClientWithResponses) DeletePartnersMeApiNotificationsWithResponse(ctx context.Context, params *DeletePartnersMeApiNotificationsParams, reqEditors ...RequestEditorFn) (*DeletePartnersMeApiNotificationsResponse, error) {
	rsp, err := c.DeletePartnersMeApiNotifications(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePartnersMeApiNotificationsResponse(rsp)
}

// PutPartnersMeApiNotificationsWithBodyWithResponse request with arbitrary body returning *PutPartnersMeApiNotificationsResponse
func (c *ClientWithResponses) PutPartnersMeApiNotificationsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error) {
	rsp, err := c.PutPartnersMeApiNotifications(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutPartnersMeApiNotificationsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsResponse(rsp)
}

// DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse request returning *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse
func (c *ClientWithResponses) DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, params *DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugParams, reqEditors ...RequestEditorFn) (*DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.DeletePartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx, organizationSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp)
}

// PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBodyWithResponse request with arbitrary body returning *PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse
func (c *ClientWithResponses) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBodyWithResponse(ctx context.Context, organizationSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithBody(ctx, organizationSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationWildcardPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsOrganizationsOrganizationSlug(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp)
}

func (c *ClientWithResponses) PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, organizationSlug string, body PutPartnersMeApiNotificationsOrganizationsOrganizationSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	rsp, err := c.PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithApplicationJSONPatchPlusJSONBody(ctx, organizationSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp)
}

// GetPartnersMeOrganizationsWithResponse request returning *GetPartnersMeOrganizationsResponse
func (c *ClientWithResponses) GetPartnersMeOrganizationsWithResponse(ctx context.Context, params *GetPartnersMeOrganizationsParams, reqEditors ...RequestEditorFn) (*GetPartnersMeOrganizationsResponse, error) {
	rsp, err := c.GetPartnersMeOrganizations(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnersMeOrganizationsResponse(rsp)
}

// GetPaymentsPaymentIdWithResponse request returning *GetPaymentsPaymentIdResponse
func (c *ClientWithResponses) GetPaymentsPaymentIdWithResponse(ctx context.Context, paymentId int32, params *GetPaymentsPaymentIdParams, reqEditors ...RequestEditorFn) (*GetPaymentsPaymentIdResponse, error) {
	rsp, err := c.GetPaymentsPaymentId(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPaymentsPaymentIdResponse(rsp)
}

// PostPaymentsPaymentIdRefundWithResponse request returning *PostPaymentsPaymentIdRefundResponse
func (c *ClientWithResponses) PostPaymentsPaymentIdRefundWithResponse(ctx context.Context, paymentId int32, params *PostPaymentsPaymentIdRefundParams, reqEditors ...RequestEditorFn) (*PostPaymentsPaymentIdRefundResponse, error) {
	rsp, err := c.PostPaymentsPaymentIdRefund(ctx, paymentId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPaymentsPaymentIdRefundResponse(rsp)
}

// GetTagsTagNameWithResponse request returning *GetTagsTagNameResponse
func (c *ClientWithResponses) GetTagsTagNameWithResponse(ctx context.Context, tagName string, params *GetTagsTagNameParams, reqEditors ...RequestEditorFn) (*GetTagsTagNameResponse, error) {
	rsp, err := c.GetTagsTagName(ctx, tagName, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTagsTagNameResponse(rsp)
}

// GetUsersMeOrganizationsWithResponse request returning *GetUsersMeOrganizationsResponse
func (c *ClientWithResponses) GetUsersMeOrganizationsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUsersMeOrganizationsResponse, error) {
	rsp, err := c.GetUsersMeOrganizations(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUsersMeOrganizationsResponse(rsp)
}

// GetValuesCompanyLegalStatusWithResponse request returning *GetValuesCompanyLegalStatusResponse
func (c *ClientWithResponses) GetValuesCompanyLegalStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesCompanyLegalStatusResponse, error) {
	rsp, err := c.GetValuesCompanyLegalStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValuesCompanyLegalStatusResponse(rsp)
}

// GetValuesOrganizationCategoriesWithResponse request returning *GetValuesOrganizationCategoriesResponse
func (c *ClientWithResponses) GetValuesOrganizationCategoriesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesOrganizationCategoriesResponse, error) {
	rsp, err := c.GetValuesOrganizationCategories(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValuesOrganizationCategoriesResponse(rsp)
}

// GetValuesTagsWithResponse request returning *GetValuesTagsResponse
func (c *ClientWithResponses) GetValuesTagsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetValuesTagsResponse, error) {
	rsp, err := c.GetValuesTags(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetValuesTagsResponse(rsp)
}

// ParsePostDirectoryFormsResponse parses an HTTP response from a PostDirectoryFormsWithResponse call
func ParsePostDirectoryFormsResponse(rsp *http.Response) (*PostDirectoryFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDirectoryFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelSynchronizableFormModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostDirectoryOrganizationsResponse parses an HTTP response from a PostDirectoryOrganizationsWithResponse call
func ParsePostDirectoryOrganizationsResponse(rsp *http.Response) (*PostDirectoryOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostDirectoryOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelSynchronizableOrganizationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetItemsItemIdResponse parses an HTTP response from a GetItemsItemIdWithResponse call
func ParseGetItemsItemIdResponse(rsp *http.Response) (*GetItemsItemIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetItemsItemIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsStatisticsItemDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrdersOrderIdResponse parses an HTTP response from a GetOrdersOrderIdWithResponse call
func ParseGetOrdersOrderIdResponse(rsp *http.Response) (*GetOrdersOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrdersOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsStatisticsOrderDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrdersOrderIdCancelResponse parses an HTTP response from a PostOrdersOrderIdCancelWithResponse call
func ParsePostOrdersOrderIdCancelResponse(rsp *http.Response) (*PostOrdersOrderIdCancelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrdersOrderIdCancelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsLegalInformationsLegalStructuresResponse parses an HTTP response from a GetOrganizationsLegalInformationsLegalStructuresWithResponse call
func ParseGetOrganizationsLegalInformationsLegalStructuresResponse(rsp *http.Response) (*GetOrganizationsLegalInformationsLegalStructuresResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsLegalInformationsLegalStructuresResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsOrganizationLegalInformationsOrganizationLegalStructuresModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsLegalInformationsTaxInformationTextsResponse parses an HTTP response from a GetOrganizationsLegalInformationsTaxInformationTextsWithResponse call
func ParseGetOrganizationsLegalInformationsTaxInformationTextsResponse(rsp *http.Response) (*GetOrganizationsLegalInformationsTaxInformationTextsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsLegalInformationsTaxInformationTextsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoModelsAccountsOrganizationLegalInformationsTaxInformationText
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse parses an HTTP response from a GetOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse call
func ParseGetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp *http.Response) (*GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsLegalInformationsOrganizationSlugConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoModelsAccountsOrganizationLegalInformationsOrganizationLegalInformationConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse parses an HTTP response from a PutOrganizationsLegalInformationsOrganizationSlugConfigurationWithResponse call
func ParsePutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse(rsp *http.Response) (*PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsLegalInformationsOrganizationSlugConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugResponse parses an HTTP response from a GetOrganizationsOrganizationSlugWithResponse call
func ParseGetOrganizationsOrganizationSlugResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsOrganizationOrganizationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse parses an HTTP response from a PostOrganizationsOrganizationSlugCheckoutIntentsWithResponse call
func ParsePostOrganizationsOrganizationSlugCheckoutIntentsResponse(rsp *http.Response) (*PostOrganizationsOrganizationSlugCheckoutIntentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrganizationSlugCheckoutIntentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsCartsInitCheckoutResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse parses an HTTP response from a GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdWithResponse call
func ParseGetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugCheckoutIntentsCheckoutIntentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsCartsCheckoutIntentResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormTypesResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormTypesWithResponse call
func ParseGetOrganizationsOrganizationSlugFormTypesResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormTypesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormTypesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsEnumsFormType
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormsResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormsWithResponse call
func ParseGetOrganizationsOrganizationSlugFormsResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelFormLightModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse parses an HTTP response from a PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateWithResponse call
func ParsePostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse(rsp *http.Response) (*PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrganizationSlugFormsFormTypeActionQuickCreateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsFormsFormQuickCreateModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsWithResponse call
func ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormsFormTypeFormSlugItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersWithResponse call
func ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormsFormTypeFormSlugOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsWithResponse call
func ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelPayment
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse parses an HTTP response from a GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicWithResponse call
func ParseGetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugFormsFormTypeFormSlugPublicResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsFormsFormPublicModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugItemsResponse parses an HTTP response from a GetOrganizationsOrganizationSlugItemsWithResponse call
func ParseGetOrganizationsOrganizationSlugItemsResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugItemsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugItemsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugOrdersResponse parses an HTTP response from a GetOrganizationsOrganizationSlugOrdersWithResponse call
func ParseGetOrganizationsOrganizationSlugOrdersResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugOrdersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugOrdersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelOrder
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugPaymentsResponse parses an HTTP response from a GetOrganizationsOrganizationSlugPaymentsWithResponse call
func ParseGetOrganizationsOrganizationSlugPaymentsResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugPaymentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugPaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugPaymentsSearchResponse parses an HTTP response from a GetOrganizationsOrganizationSlugPaymentsSearchWithResponse call
func ParseGetOrganizationsOrganizationSlugPaymentsSearchResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugPaymentsSearchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugPaymentsSearchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelPublicPaymentModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse parses an HTTP response from a GetOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse call
func ParseGetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse(rsp *http.Response) (*GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOrganizationsOrganizationSlugTaxReceiptConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoCoreAccountsTaxReceiptsOrganizationFiscalReceiptOptionsConfiguration
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse parses an HTTP response from a PutOrganizationsOrganizationSlugTaxReceiptConfigurationWithResponse call
func ParsePutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse(rsp *http.Response) (*PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrganizationSlugTaxReceiptConfigurationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse parses an HTTP response from a PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterWithResponse call
func ParsePutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse(rsp *http.Response) (*PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutOrganizationsOrganizationSlugTaxReceiptFiscalReceiptTransmitterResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostOrganizationsOrganizationSlugTaxReceiptPreviewResponse parses an HTTP response from a PostOrganizationsOrganizationSlugTaxReceiptPreviewWithResponse call
func ParsePostOrganizationsOrganizationSlugTaxReceiptPreviewResponse(rsp *http.Response) (*PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostOrganizationsOrganizationSlugTaxReceiptPreviewResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetPartnersMeResponse parses an HTTP response from a GetPartnersMeWithResponse call
func ParseGetPartnersMeResponse(rsp *http.Response) (*GetPartnersMeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnersMeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsPartnersPartnerPublicModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutPartnersMeApiClientsResponse parses an HTTP response from a PutPartnersMeApiClientsWithResponse call
func ParsePutPartnersMeApiClientsResponse(rsp *http.Response) (*PutPartnersMeApiClientsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPartnersMeApiClientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeletePartnersMeApiNotificationsResponse parses an HTTP response from a DeletePartnersMeApiNotificationsWithResponse call
func ParseDeletePartnersMeApiNotificationsResponse(rsp *http.Response) (*DeletePartnersMeApiNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePartnersMeApiNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPartnersMeApiNotificationsResponse parses an HTTP response from a PutPartnersMeApiNotificationsWithResponse call
func ParsePutPartnersMeApiNotificationsResponse(rsp *http.Response) (*PutPartnersMeApiNotificationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPartnersMeApiNotificationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse parses an HTTP response from a DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse call
func ParseDeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp *http.Response) (*DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePartnersMeApiNotificationsOrganizationsOrganizationSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse parses an HTTP response from a PutPartnersMeApiNotificationsOrganizationsOrganizationSlugWithResponse call
func ParsePutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse(rsp *http.Response) (*PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPartnersMeApiNotificationsOrganizationsOrganizationSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsApiNotificationsApiUrlNotificationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPartnersMeOrganizationsResponse parses an HTTP response from a GetPartnersMeOrganizationsWithResponse call
func ParseGetPartnersMeOrganizationsResponse(rsp *http.Response) (*GetPartnersMeOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnersMeOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ResultsWithPaginationModelPartnerOrganizationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPaymentsPaymentIdResponse parses an HTTP response from a GetPaymentsPaymentIdWithResponse call
func ParseGetPaymentsPaymentIdResponse(rsp *http.Response) (*GetPaymentsPaymentIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPaymentsPaymentIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsStatisticsPaymentDetail
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPaymentsPaymentIdRefundResponse parses an HTTP response from a PostPaymentsPaymentIdRefundWithResponse call
func ParsePostPaymentsPaymentIdRefundResponse(rsp *http.Response) (*PostPaymentsPaymentIdRefundResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPaymentsPaymentIdRefundResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsPaymentRefundOperationModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetTagsTagNameResponse parses an HTTP response from a GetTagsTagNameWithResponse call
func ParseGetTagsTagNameResponse(rsp *http.Response) (*GetTagsTagNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTagsTagNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HelloAssoApiV5ModelsTagsInternalTagModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetUsersMeOrganizationsResponse parses an HTTP response from a GetUsersMeOrganizationsWithResponse call
func ParseGetUsersMeOrganizationsResponse(rsp *http.Response) (*GetUsersMeOrganizationsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUsersMeOrganizationsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsOrganizationOrganizationLightModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetValuesCompanyLegalStatusResponse parses an HTTP response from a GetValuesCompanyLegalStatusWithResponse call
func ParseGetValuesCompanyLegalStatusResponse(rsp *http.Response) (*GetValuesCompanyLegalStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValuesCompanyLegalStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsAccountCompanyLegalStatusModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetValuesOrganizationCategoriesResponse parses an HTTP response from a GetValuesOrganizationCategoriesWithResponse call
func ParseGetValuesOrganizationCategoriesResponse(rsp *http.Response) (*GetValuesOrganizationCategoriesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValuesOrganizationCategoriesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsAccountOrganismCategoryModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetValuesTagsResponse parses an HTTP response from a GetValuesTagsWithResponse call
func ParseGetValuesTagsResponse(rsp *http.Response) (*GetValuesTagsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetValuesTagsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HelloAssoApiV5ModelsTagsPublicTagModel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}
