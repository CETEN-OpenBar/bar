// Package autogen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package autogen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"mime/multipart"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	strictecho "github.com/oapi-codegen/runtime/strictmiddleware/echo"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	Admin_authScopes    = "admin_auth.Scopes"
	AuthScopes          = "auth.Scopes"
	Local_tokenScopes   = "local_token.Scopes"
	Not_onboardedScopes = "not_onboarded.Scopes"
)

// Defines values for AccountPriceRole.
const (
	AccountPriceCeten       AccountPriceRole = "ceten"
	AccountPriceCoutant     AccountPriceRole = "coutant"
	AccountPriceExterne     AccountPriceRole = "externe"
	AccountPriceMenu        AccountPriceRole = "menu"
	AccountPricePrivilegies AccountPriceRole = "privilegies"
	AccountPriceStaffBar    AccountPriceRole = "staff_bar"
)

// Defines values for AccountRestrictions.
const (
	AccountBlocked          AccountRestrictions = "blocked"
	AccountRemoteRestricted AccountRestrictions = "remote_restricted"
)

// Defines values for AccountRole.
const (
	AccountAdmin               AccountRole = "admin"
	AccountGhost               AccountRole = "ghost"
	AccountMember              AccountRole = "member"
	AccountStudent             AccountRole = "student"
	AccountStudentWithBenefits AccountRole = "student_with_benefits"
	AccountSuperAdmin          AccountRole = "superadmin"
)

// Defines values for AccountState.
const (
	AccountNotOnBoarded AccountState = "not_onboarded"
	AccountOK           AccountState = "account_ok"
)

// Defines values for ErrorCodes.
const (
	ErrAccountNotFound     ErrorCodes = "account_not_found"
	ErrBadRequest          ErrorCodes = "bad_request"
	ErrCategoryNotFound    ErrorCodes = "category_not_found"
	ErrForbidden           ErrorCodes = "forbidden"
	ErrImageNotFound       ErrorCodes = "image_not_found"
	ErrInternalServerError ErrorCodes = "internal_server_error"
	ErrItemNotFound        ErrorCodes = "item_not_found"
	ErrNotAuthenticated    ErrorCodes = "not_authenticated"
	ErrQRInvalid           ErrorCodes = "qr_invalid"
	ErrRefillNotFound      ErrorCodes = "refill_not_found"
	ErrStarringNotFound    ErrorCodes = "starring_not_found"
	ErrTextNotFound        ErrorCodes = "text_not_found"
	ErrTransactionNotFound ErrorCodes = "transaction_not_found"
)

// Defines values for Fournisseur.
const (
	Auchan       Fournisseur = "auchan"
	AuchanDrive  Fournisseur = "auchan_drive"
	Holy         Fournisseur = "holy"
	Promocash    Fournisseur = "promocash"
	Viennoiserie Fournisseur = "viennoiserie"
)

// Defines values for ItemState.
const (
	ItemBuyable    ItemState = "buyable"
	ItemNotBuyable ItemState = "not_buyable"
)

// Defines values for Messages.
const (
	MsgAccountAlreadyExists Messages = "Account already exists"
	MsgAccountNotAllowed    Messages = "Account is not allowed to use ressource"
	MsgAccountNotAvailable  Messages = "Account cannot use ressource at the time being"
	MsgAccountNotFound      Messages = "Account not found"
	MsgBadRequest           Messages = "Bad request"
	MsgCategoryNotFound     Messages = "Category does not exists"
	MsgImageNotFound        Messages = "Image does not exists"
	MsgInternalServerError  Messages = "Internal server error"
	MsgItemNotFound         Messages = "Item does not exists"
	MsgMissingFields        Messages = "Missing fields %v"
	MsgNotAuthenticated     Messages = "You are not authenticated"
	MsgNotConnected         Messages = "Not connected"
	MsgQRInvalid            Messages = "Invalid QR Code nonce"
	MsgRefillNotFound       Messages = "Refill does not exists"
	MsgStarringNotFound     Messages = "Starring does not exists"
	MsgTextNotFound         Messages = "Text does not exists"
	MsgTransactionNotFound  Messages = "Transaction does not exists"
)

// Defines values for RefillState.
const (
	RefillStateCanceled RefillState = "canceled"
	RefillStateValid    RefillState = "valid"
)

// Defines values for RefillType.
const (
	RefillCard      RefillType = "card"
	RefillCash      RefillType = "cash"
	RefillCheck     RefillType = "check"
	RefillHelloAsso RefillType = "helloasso"
	RefillOther     RefillType = "other"
	RefillTransfer  RefillType = "tranfer"
)

// Defines values for RemoteRefillState.
const (
	RemoteRefillProcessed RemoteRefillState = "processed"
	RemoteRefillStarted   RemoteRefillState = "started"
)

// Defines values for RestockState.
const (
	RestockFinished RestockState = "finished"
	RestockPending  RestockState = "pending"
)

// Defines values for RestockType.
const (
	RestockAuchan       RestockType = "auchan"
	RestockAuchanDrive  RestockType = "auchan_drive"
	RestockHoly         RestockType = "holy"
	RestockPromocash    RestockType = "promocash"
	RestockViennoiserie RestockType = "viennoiserie"
)

// Defines values for StarringState.
const (
	StarringStateCanceled StarringState = "canceled"
	StarringStateValid    StarringState = "valid"
)

// Defines values for TransactionItemState.
const (
	TransactionItemCanceled    TransactionItemState = "canceled"
	TransactionItemFinished    TransactionItemState = "finished"
	TransactionItemStarted     TransactionItemState = "started"
	TransactionItemTakenCareOf TransactionItemState = "taken_care_of"
)

// Defines values for TransactionState.
const (
	TransactionCanceled    TransactionState = "canceled"
	TransactionFinished    TransactionState = "finished"
	TransactionStarted     TransactionState = "started"
	TransactionTakenCareOf TransactionState = "taken_care_of"
)

// Account defines model for Account.
type Account struct {
	Balance       int64   `json:"balance" bson:"balance"`
	CardId        *string `json:"card_id,omitempty" bson:"card_id"`
	CardPin       string  `json:"-" bson:"card_pin"`
	DeletedAt     *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	EmailAddress  string  `json:"email_address" bson:"email_address"`
	FirstName     string  `json:"first_name" bson:"first_name"`
	GoogleId      *string `json:"google_id,omitempty" bson:"google_id"`
	GooglePicture *string `json:"google_picture,omitempty" bson:"google_picture"`
	Id            UUID    `json:"id" bson:"id"`
	LastName      string  `json:"last_name" bson:"last_name"`
	Nickname      *string `json:"nickname,omitempty" bson:"nickname"`
	Password      *string `json:"-" bson:"password"`
	Points        int64   `json:"points" bson:"points"`

	// PriceRole Role of the account
	PriceRole    AccountPriceRole      `json:"price_role" bson:"price_role"`
	Restrictions []AccountRestrictions `json:"restrictions" bson:"restrictions"`

	// Role Role of the account
	Role AccountRole `json:"role" bson:"role"`

	// State State of the account
	State        AccountState `json:"state" bson:"state"`
	WantsToStaff bool         `json:"wants_to_staff" bson:"wants_to_staff"`
}

// AccountPriceRole Role of the account
type AccountPriceRole string

// AccountRestrictions Restrictions of the account
type AccountRestrictions string

// AccountRole Role of the account
type AccountRole string

// AccountState State of the account
type AccountState string

// CarouselImage defines model for CarouselImage.
type CarouselImage struct {
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID    `json:"id" bson:"id"`

	// ImageUrl Image to display
	ImageUrl string `json:"image_url" bson:"image_url"`
}

// CarouselImageUpload defines model for CarouselImageUpload.
type CarouselImageUpload struct {
	// Image Image to display
	Image openapi_types.File `json:"image" bson:"image"`
}

// CarouselText defines model for CarouselText.
type CarouselText struct {
	// Color Color of the text
	Color     string  `json:"color" bson:"color"`
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id        UUID    `json:"id" bson:"id"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// CarouselTextCreate defines model for CarouselTextCreate.
type CarouselTextCreate struct {
	// Color Color of the text
	Color *string `json:"color,omitempty" bson:"color"`

	// Text Text to display
	Text string `json:"text" bson:"text"`
}

// CashMovement defines model for CashMovement.
type CashMovement struct {
	Amount        int64   `json:"amount" bson:"amount"`
	CreatedAt     uint64  `json:"created_at" bson:"created_at"`
	CreatedBy     UUID    `json:"created_by" bson:"created_by"`
	CreatedByName string  `json:"created_by_name" bson:"created_by_name"`
	DeletedAt     *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	DeletedByName *string `json:"deleted_by_name,omitempty" bson:"deleted_by_name"`
	Id            UUID    `json:"id" bson:"id"`
	OldAmount     int64   `json:"old_amount" bson:"old_amount"`
	Reason        string  `json:"reason" bson:"reason"`
}

// Category defines model for Category.
type Category struct {
	DeletedAt *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Hidden    bool    `json:"hidden" bson:"hidden"`
	Id        UUID    `json:"id" bson:"id"`

	// Name Name of the current category
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current category
	PictureUri   string `json:"picture_uri" bson:"picture_uri"`
	Position     uint64 `json:"position" bson:"position"`
	SpecialPrice bool   `json:"special_price" bson:"special_price"`
}

// CourseItem defines model for CourseItem.
type CourseItem struct {
	AmountToBuy uint64 `json:"amountToBuy" bson:"amount_to_buy"`
	Item        Item   `json:"item" bson:"item"`
}

// ErrorCodes defines model for ErrorCodes.
type ErrorCodes string

// Fournisseur defines model for Fournisseur.
type Fournisseur string

// HTTPError defines model for HTTPError.
type HTTPError struct {
	ErrorCode ErrorCodes `json:"error_code" bson:"error_code"`
	Message   Messages   `json:"message" bson:"message"`
}

// Item defines model for Item.
type Item struct {
	AmountLeft      uint64          `json:"amount_left" bson:"amount_left"`
	AmountPerBundle *uint64         `json:"amount_per_bundle,omitempty" bson:"amount_per_bundle"`
	AvailableFrom   *uint64         `json:"available_from,omitempty" bson:"available_from"`
	AvailableUntil  *uint64         `json:"available_until,omitempty" bson:"available_until"`
	BuyLimit        *uint64         `json:"buy_limit,omitempty" bson:"buy_limit"`
	CategoryId      UUID            `json:"category_id" bson:"category_id"`
	DeletedAt       *uint64         `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy       *UUID           `json:"deleted_by,omitempty" bson:"deleted_by"`
	DisplayPrice    *uint64         `json:"display_price,omitempty" bson:"display_price"`
	DisplayPrices   *ItemPrices     `json:"display_prices,omitempty" bson:"display_prices"`
	Fournisseur     *Fournisseur    `json:"fournisseur,omitempty" bson:"fournisseur"`
	Id              UUID            `json:"id" bson:"id"`
	IsMenu          bool            `json:"is_menu" bson:"is_menu"`
	LastTva         *uint64         `json:"last_tva,omitempty" bson:"last_tva"`
	MenuCategories  *[]MenuCategory `json:"menu_categories,omitempty" bson:"menu_categories"`
	MenuItems       *[]MenuItem     `json:"menu_items,omitempty" bson:"menu_items"`

	// Name Name of the current item
	Name          string `json:"name" bson:"name"`
	OptimalAmount uint64 `json:"optimal_amount" bson:"optimal_amount"`

	// PictureUri Link to picture of the current item
	PictureUri      string     `json:"picture_uri" bson:"picture_uri"`
	Prices          ItemPrices `json:"prices" bson:"prices"`
	Promotion       *uint64    `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64    `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`

	// RefBundle Referal code of the product in the Drive
	RefBundle *string `json:"ref_bundle,omitempty" bson:"ref_bundle"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// ItemPrices defines model for ItemPrices.
type ItemPrices struct {
	Ceten       uint64 `json:"ceten" bson:"ceten"`
	Coutant     uint64 `json:"coutant" bson:"coutant"`
	Externe     uint64 `json:"externe" bson:"externe"`
	Menu        uint64 `json:"menu" bson:"menu"`
	Privilegies uint64 `json:"privilegies" bson:"privilegies"`
	StaffBar    uint64 `json:"staff_bar" bson:"staff_bar"`
}

// ItemState State of the item
type ItemState string

// MenuCategory defines model for MenuCategory.
type MenuCategory struct {
	Amount uint64 `json:"amount" bson:"amount"`
	Id     UUID   `json:"id" bson:"id"`

	// Name Name of the category
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the category
	PictureUri string `json:"picture_uri" bson:"picture_uri"`
}

// MenuItem defines model for MenuItem.
type MenuItem struct {
	Amount uint64 `json:"amount" bson:"amount"`
	Id     UUID   `json:"id" bson:"id"`

	// Name Name of the current item
	Name string `json:"name" bson:"name"`

	// PictureUri Link to picture of the current item
	PictureUri string  `json:"picture_uri" bson:"picture_uri"`
	Promotion  *uint64 `json:"promotion,omitempty" bson:"promotion"`
}

// Messages defines model for Messages.
type Messages string

// NewAccount defines model for NewAccount.
type NewAccount struct {
	Balance      int64   `json:"balance" bson:"balance"`
	CardId       *string `json:"card_id,omitempty" bson:"card_id"`
	EmailAddress string  `json:"email_address" bson:"email_address"`
	FirstName    string  `json:"first_name" bson:"first_name"`
	LastName     string  `json:"last_name" bson:"last_name"`

	// PriceRole Role of the account
	PriceRole *AccountPriceRole `json:"price_role,omitempty" bson:"price_role"`

	// Role Role of the account
	Role AccountRole `json:"role" bson:"role"`
}

// NewCashMovement defines model for NewCashMovement.
type NewCashMovement struct {
	Amount int64  `json:"amount" bson:"amount"`
	Reason string `json:"reason" bson:"reason"`
}

// NewCategory defines model for NewCategory.
type NewCategory struct {
	// Name Name of the current category
	Name     string `json:"name" bson:"name"`
	Picture  string `json:"picture" bson:"picture"`
	Position uint64 `json:"position" bson:"position"`
}

// NewItem defines model for NewItem.
type NewItem struct {
	AmountLeft     uint64          `json:"amount_left" bson:"amount_left"`
	AvailableFrom  *uint64         `json:"available_from,omitempty" bson:"available_from"`
	AvailableUntil *uint64         `json:"available_until,omitempty" bson:"available_until"`
	BuyLimit       *uint64         `json:"buy_limit,omitempty" bson:"buy_limit"`
	IsMenu         *bool           `json:"is_menu,omitempty" bson:"is_menu"`
	MenuCategories *[]MenuCategory `json:"menu_categories,omitempty" bson:"menu_categories"`
	MenuItems      *[]MenuItem     `json:"menu_items,omitempty" bson:"menu_items"`

	// Name Name of the current item
	Name          string `json:"name" bson:"name"`
	OptimalAmount uint64 `json:"optimal_amount" bson:"optimal_amount"`

	// Picture Picture of the current item
	Picture         string     `json:"picture" bson:"picture"`
	Prices          ItemPrices `json:"prices" bson:"prices"`
	Promotion       *uint64    `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64    `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`

	// State State of the item
	State ItemState `json:"state" bson:"state"`
}

// NewRestock defines model for NewRestock.
type NewRestock struct {
	DriverId     *UUID            `json:"driver_id,omitempty" bson:"driver_id"`
	Items        []NewRestockItem `json:"items" bson:"items"`
	State        RestockState     `json:"state" bson:"state"`
	TotalCostHt  uint64           `json:"total_cost_ht" bson:"total_cost_ht"`
	TotalCostTtc uint64           `json:"total_cost_ttc" bson:"total_cost_ttc"`
	Type         RestockType      `json:"type" bson:"type"`
}

// NewRestockItem defines model for NewRestockItem.
type NewRestockItem struct {
	AmountOfBundle     uint64   `json:"amount_of_bundle" bson:"amount_of_bundle"`
	AmountPerBundle    uint64   `json:"amount_per_bundle" bson:"amount_per_bundle"`
	BundleCostFloatTtc *float32 `json:"bundle_cost_float_ttc,omitempty" bson:"bundle_cost_float_ttc"`
	BundleCostHt       uint64   `json:"bundle_cost_ht" bson:"bundle_cost_ht"`
	BundleCostTtc      uint64   `json:"bundle_cost_ttc" bson:"bundle_cost_ttc"`
	ItemId             UUID     `json:"item_id" bson:"item_id"`

	// ItemName Name of the current item
	ItemName string `json:"item_name" bson:"item_name"`
	Tva      uint64 `json:"tva" bson:"tva"`
}

// NewTransaction defines model for NewTransaction.
type NewTransaction struct {
	// CardPin Pin of the card
	CardPin string `json:"card_pin" bson:"card_pin"`

	// IsRemote True if the transaction was not created from a kiosk
	IsRemote *bool                `json:"is_remote,omitempty" bson:"is_remote"`
	Items    []NewTransactionItem `json:"items" bson:"items"`
}

// NewTransactionItem defines model for NewTransactionItem.
type NewTransactionItem struct {
	Amount                uint64                `json:"amount" bson:"amount"`
	ItemId                UUID                  `json:"item_id" bson:"item_id"`
	PickedCategoriesItems *[]NewTransactionItem `json:"picked_categories_items,omitempty" bson:"picked_categories_items"`
}

// Refill defines model for Refill.
type Refill struct {
	AccountId UUID `json:"account_id" bson:"account_id"`

	// AccountName Name of the account
	AccountName    string      `json:"account_name" bson:"account_name"`
	Amount         int64       `json:"amount" bson:"amount"`
	CanceledBy     *UUID       `json:"canceled_by,omitempty" bson:"canceled_by"`
	CanceledByName *string     `json:"canceled_by_name,omitempty" bson:"canceled_by_name"`
	DeletedAt      *uint64     `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy      *UUID       `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id             UUID        `json:"id" bson:"id"`
	IssuedAt       uint64      `json:"issued_at" bson:"issued_at"`
	IssuedBy       UUID        `json:"issued_by" bson:"issued_by"`
	IssuedByName   string      `json:"issued_by_name" bson:"issued_by_name"`
	State          RefillState `json:"state" bson:"state"`
	Type           RefillType  `json:"type" bson:"type"`
}

// RefillState defines model for RefillState.
type RefillState string

// RefillType defines model for RefillType.
type RefillType string

// RemoteRefill A remote (HelloAsso) refill
type RemoteRefill struct {
	AccountId UUID `json:"account_id" bson:"account_id"`

	// AccountName Name of the account
	AccountName string `json:"account_name" bson:"account_name"`
	Amount      int32  `json:"amount" bson:"amount"`

	// CheckoutIntentId HelloAsso checkout id
	CheckoutIntentId *int32 `json:"checkout_intent_id,omitempty" bson:"checkout_intent_id"`
	CreatedAt        uint64 `json:"created_at" bson:"created_at"`
	Id               UUID   `json:"id" bson:"id"`

	// OrderId HelloAsso order id, if the transaction suceeded
	OrderId  *int32            `json:"order_id,omitempty" bson:"order_id"`
	RefillId *UUID             `json:"refill_id,omitempty" bson:"refill_id"`
	State    RemoteRefillState `json:"state" bson:"state"`
}

// RemoteRefillState defines model for RemoteRefillState.
type RemoteRefillState string

// Restock defines model for Restock.
type Restock struct {
	CreatedAt     uint64  `json:"created_at" bson:"created_at"`
	CreatedBy     UUID    `json:"created_by" bson:"created_by"`
	CreatedByName string  `json:"created_by_name" bson:"created_by_name"`
	DeletedAt     *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy     *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	DriverId      *UUID   `json:"driver_id,omitempty" bson:"driver_id"`

	// DriverName Name of the driver
	DriverName   *string       `json:"driver_name,omitempty" bson:"driver_name"`
	Id           UUID          `json:"id" bson:"id"`
	Items        []RestockItem `json:"items" bson:"items"`
	State        RestockState  `json:"state" bson:"state"`
	TotalCostHt  uint64        `json:"total_cost_ht" bson:"total_cost_ht"`
	TotalCostTtc uint64        `json:"total_cost_ttc" bson:"total_cost_ttc"`
	Type         RestockType   `json:"type" bson:"type"`
}

// RestockItem defines model for RestockItem.
type RestockItem struct {
	AmountOfBundle  uint64 `json:"amount_of_bundle" bson:"amount_of_bundle"`
	AmountPerBundle uint64 `json:"amount_per_bundle" bson:"amount_per_bundle"`
	BundleCostHt    uint64 `json:"bundle_cost_ht" bson:"bundle_cost_ht"`
	BundleCostTtc   uint64 `json:"bundle_cost_ttc" bson:"bundle_cost_ttc"`
	ItemId          UUID   `json:"item_id" bson:"item_id"`

	// ItemName Name of the current item
	ItemName string `json:"item_name" bson:"item_name"`

	// ItemPictureUri Link to picture of the current item
	ItemPictureUri string `json:"item_picture_uri" bson:"item_picture_uri"`
	Tva            uint64 `json:"tva" bson:"tva"`
}

// RestockState defines model for RestockState.
type RestockState string

// RestockType defines model for RestockType.
type RestockType string

// Starring defines model for Starring.
type Starring struct {
	AccountId UUID `json:"account_id" bson:"account_id"`

	// AccountName Name of the account
	AccountName    string        `json:"account_name" bson:"account_name"`
	Amount         int64         `json:"amount" bson:"amount"`
	CanceledBy     *UUID         `json:"canceled_by,omitempty" bson:"canceled_by"`
	CanceledByName *string       `json:"canceled_by_name,omitempty" bson:"canceled_by_name"`
	DeletedAt      *uint64       `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy      *UUID         `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id             UUID          `json:"id" bson:"id"`
	IssuedAt       uint64        `json:"issued_at" bson:"issued_at"`
	IssuedBy       UUID          `json:"issued_by" bson:"issued_by"`
	IssuedByName   string        `json:"issued_by_name" bson:"issued_by_name"`
	State          StarringState `json:"state" bson:"state"`
}

// StarringState defines model for StarringState.
type StarringState string

// Transaction defines model for Transaction.
type Transaction struct {
	AccountId string `json:"account_id" bson:"account_id"`

	// AccountName Name of the account
	AccountName string `json:"account_name" bson:"account_name"`

	// AccountNickName Nickname of the account
	AccountNickName *string `json:"account_nick_name,omitempty" bson:"account_nick_name"`
	CreatedAt       uint64  `json:"created_at" bson:"created_at"`
	DeletedAt       *uint64 `json:"deleted_at,omitempty" bson:"deleted_at"`
	DeletedBy       *UUID   `json:"deleted_by,omitempty" bson:"deleted_by"`
	Id              UUID    `json:"id" bson:"id"`

	// IsRemote True if the transaction was not created from a kiosk
	IsRemote  *bool             `json:"is_remote,omitempty" bson:"is_remote"`
	Items     []TransactionItem `json:"items" bson:"items"`
	State     TransactionState  `json:"state" bson:"state"`
	TotalCost uint64            `json:"total_cost" bson:"total_cost"`
}

// TransactionItem defines model for TransactionItem.
type TransactionItem struct {
	IsMenu          bool   `json:"is_menu" bson:"is_menu"`
	ItemAlreadyDone uint64 `json:"item_already_done" bson:"item_already_done"`
	ItemAmount      uint64 `json:"item_amount" bson:"item_amount"`
	ItemId          UUID   `json:"item_id" bson:"item_id"`

	// ItemName Name of the current item
	ItemName              string             `json:"item_name" bson:"item_name"`
	MenuCategories        *[]MenuCategory    `json:"menu_categories,omitempty" bson:"menu_categories"`
	MenuItems             *[]MenuItem        `json:"menu_items,omitempty" bson:"menu_items"`
	PickedCategoriesItems *[]TransactionItem `json:"picked_categories_items,omitempty" bson:"picked_categories_items"`

	// PictureUri Link to picture of the current item
	PictureUri string               `json:"picture_uri" bson:"picture_uri"`
	State      TransactionItemState `json:"state" bson:"state"`
	TotalCost  uint64               `json:"total_cost" bson:"total_cost"`
	UnitCost   uint64               `json:"unit_cost" bson:"unit_cost"`
}

// TransactionItemState defines model for TransactionItemState.
type TransactionItemState string

// TransactionState defines model for TransactionState.
type TransactionState string

// UUID defines model for UUID.
type UUID = openapi_types.UUID

// UpdateAccountAdmin defines model for UpdateAccountAdmin.
type UpdateAccountAdmin struct {
	CardId       *string `json:"card_id,omitempty" bson:"card_id"`
	EmailAddress *string `json:"email_address,omitempty" bson:"email_address"`
	FirstName    *string `json:"first_name,omitempty" bson:"first_name"`
	LastName     *string `json:"last_name,omitempty" bson:"last_name"`
	Nickname     *string `json:"nickname,omitempty" bson:"nickname"`

	// PriceRole Role of the account
	PriceRole    *AccountPriceRole      `json:"price_role,omitempty" bson:"price_role"`
	Restrictions *[]AccountRestrictions `json:"restrictions,omitempty" bson:"restrictions"`

	// Role Role of the account
	Role *AccountRole `json:"role,omitempty" bson:"role"`

	// State State of the account
	State *AccountState `json:"state,omitempty" bson:"state"`
}

// UpdateCategory defines model for UpdateCategory.
type UpdateCategory struct {
	Hidden *bool `json:"hidden,omitempty" bson:"hidden"`

	// Name Name of the current category
	Name         *string `json:"name,omitempty" bson:"name"`
	Picture      *string `json:"picture,omitempty" bson:"picture"`
	Position     *uint64 `json:"position,omitempty" bson:"position"`
	SpecialPrice *bool   `json:"special_price,omitempty" bson:"special_price"`
}

// UpdateItem defines model for UpdateItem.
type UpdateItem struct {
	AmountLeft      *uint64         `json:"amount_left,omitempty" bson:"amount_left"`
	AmountPerBundle *uint64         `json:"amount_per_bundle,omitempty" bson:"amount_per_bundle"`
	AvailableFrom   *uint64         `json:"available_from,omitempty" bson:"available_from"`
	AvailableUntil  *uint64         `json:"available_until,omitempty" bson:"available_until"`
	BuyLimit        *int64          `json:"buy_limit,omitempty" bson:"buy_limit"`
	CategoryId      *UUID           `json:"category_id,omitempty" bson:"category_id"`
	Fournisseur     *Fournisseur    `json:"fournisseur,omitempty" bson:"fournisseur"`
	IsMenu          *bool           `json:"is_menu,omitempty" bson:"is_menu"`
	MenuCategories  *[]MenuCategory `json:"menu_categories,omitempty" bson:"menu_categories"`
	MenuItems       *[]MenuItem     `json:"menu_items,omitempty" bson:"menu_items"`

	// Name Name of the current item
	Name          *string `json:"name,omitempty" bson:"name"`
	OptimalAmount *uint64 `json:"optimal_amount,omitempty" bson:"optimal_amount"`

	// Picture Picture of the current item
	Picture         *string     `json:"picture,omitempty" bson:"picture"`
	Prices          *ItemPrices `json:"prices,omitempty" bson:"prices"`
	Promotion       *uint64     `json:"promotion,omitempty" bson:"promotion"`
	PromotionEndsAt *uint64     `json:"promotion_ends_at,omitempty" bson:"promotion_ends_at"`
	RefBundle       *string     `json:"ref_bundle,omitempty" bson:"ref_bundle"`

	// State State of the item
	State *ItemState `json:"state,omitempty" bson:"state"`
}

// PatchAccountPasswordJSONBody defines parameters for PatchAccountPassword.
type PatchAccountPasswordJSONBody struct {
	NewPassword string `json:"new_password" bson:"new_password"`
	OldPassword string `json:"old_password" bson:"old_password"`
}

// PatchAccountPinJSONBody defines parameters for PatchAccountPin.
type PatchAccountPinJSONBody struct {
	CardId     *string `json:"card_id,omitempty" bson:"card_id"`
	NewCardPin string  `json:"new_card_pin" bson:"new_card_pin"`
	OldCardPin string  `json:"old_card_pin" bson:"old_card_pin"`
}

// GetAccountQRJSONBody defines parameters for GetAccountQR.
type GetAccountQRJSONBody struct {
	CardPin string `json:"card_pin" bson:"card_pin"`
}

// GetSelfRefillsParams defines parameters for GetSelfRefills.
type GetSelfRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// StartRemoteRefillParams defines parameters for StartRemoteRefill.
type StartRemoteRefillParams struct {
	// Amount Amount of the refill in cents
	Amount int32 `form:"amount" json:"amount" bson:"amount"`
}

// SelfValidateRemoteRefillParams defines parameters for SelfValidateRemoteRefill.
type SelfValidateRemoteRefillParams struct {
	// CheckoutIntentId HelloAsso checkout intent id to validate
	CheckoutIntentId int32 `form:"checkout_intent_id" json:"checkout_intent_id" bson:"checkout_intent_id"`
}

// GetSelfStarringParams defines parameters for GetSelfStarring.
type GetSelfStarringParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of donations per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the donation
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the donation
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetCurrentAccountTransactionsParams defines parameters for GetCurrentAccountTransactions.
type GetCurrentAccountTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetAccountsParams defines parameters for GetAccounts.
type GetAccountsParams struct {
	// Page page to get
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit number of accounts to get
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// GetAccountRefillsParams defines parameters for GetAccountRefills.
type GetAccountRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// PostRefillParams defines parameters for PostRefill.
type PostRefillParams struct {
	// Amount Amount of the refill
	Amount int64 `form:"amount" json:"amount" bson:"amount"`

	// Type Type of the refill
	Type RefillType `form:"type" json:"type" bson:"type"`
}

// PatchRefillIdParams defines parameters for PatchRefillId.
type PatchRefillIdParams struct {
	// State New state of the refill
	State *RefillState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// Type New type of the refill
	Type *RefillType `form:"type,omitempty" json:"type,omitempty" bson:"type"`
}

// GetAccountStarringParams defines parameters for GetAccountStarring.
type GetAccountStarringParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of donations per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the donation
	StartDate *openapi_types.Date `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the donation
	EndDate *openapi_types.Date `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// PostStarringParams defines parameters for PostStarring.
type PostStarringParams struct {
	// Amount Amount of the starring
	Amount int64 `form:"amount" json:"amount" bson:"amount"`
}

// PatchStarringIdParams defines parameters for PatchStarringId.
type PatchStarringIdParams struct {
	// State New state of the donation
	State *StarringState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetAccountTransactionsParams defines parameters for GetAccountTransactions.
type GetAccountTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// PatchTransactionIdParams defines parameters for PatchTransactionId.
type PatchTransactionIdParams struct {
	// State New state of the transaction
	State TransactionState `form:"state" json:"state" bson:"state"`
}

// PatchTransactionItemIdParams defines parameters for PatchTransactionItemId.
type PatchTransactionItemIdParams struct {
	// State New state of the item
	State *TransactionItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// Amount New amount of the item
	Amount *uint64 `form:"amount,omitempty" json:"amount,omitempty" bson:"amount"`

	// AlreadyDone Update item's already done
	AlreadyDone *uint64 `form:"already_done,omitempty" json:"already_done,omitempty" bson:"already_done"`
}

// ConnectCardJSONBody defines parameters for ConnectCard.
type ConnectCardJSONBody struct {
	CardId  string `json:"card_id" bson:"card_id"`
	CardPin string `json:"card_pin" bson:"card_pin"`
}

// ConnectGoogleParams defines parameters for ConnectGoogle.
type ConnectGoogleParams struct {
	// R Redirect to this url after connecting
	R string `form:"r" json:"r" bson:"r"`
}

// CallbackParams defines parameters for Callback.
type CallbackParams struct {
	// Code Google OAuth code
	Code string `form:"code" json:"code" bson:"code"`

	// State Google OAuth state
	State string `form:"state" json:"state" bson:"state"`
}

// ConnectPasswordJSONBody defines parameters for ConnectPassword.
type ConnectPasswordJSONBody struct {
	CardId   string `json:"card_id" bson:"card_id"`
	Password string `json:"password" bson:"password"`
}

// PostBorneAuthQRJSONBody defines parameters for PostBorneAuthQR.
type PostBorneAuthQRJSONBody struct {
	Nonce string `json:"nonce" bson:"nonce"`
}

// GetCashMovementsParams defines parameters for GetCashMovements.
type GetCashMovementsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of cash movements per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// GetCategoriesParams defines parameters for GetCategories.
type GetCategoriesParams struct {
	// Hidden Show hidden categories (admin only)
	Hidden *bool `form:"hidden,omitempty" json:"hidden,omitempty" bson:"hidden"`
}

// GetCategoryItemsParams defines parameters for GetCategoryItems.
type GetCategoryItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of items per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *ItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetCourseParams defines parameters for GetCourse.
type GetCourseParams struct {
	// Fournisseur Fournisseur name
	Fournisseur *string `form:"fournisseur,omitempty" json:"fournisseur,omitempty" bson:"fournisseur"`
}

// GetDeletedAccountsParams defines parameters for GetDeletedAccounts.
type GetDeletedAccountsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Search search string
	Search *string `form:"search,omitempty" json:"search,omitempty" bson:"search"`
}

// GetDeletedCarouselImagesParams defines parameters for GetDeletedCarouselImages.
type GetDeletedCarouselImagesParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedCarouselTextsParams defines parameters for GetDeletedCarouselTexts.
type GetDeletedCarouselTextsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedCategoriesParams defines parameters for GetDeletedCategories.
type GetDeletedCategoriesParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of categories per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedItemsParams defines parameters for GetDeletedItems.
type GetDeletedItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedRefillsParams defines parameters for GetDeletedRefills.
type GetDeletedRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedStarringParams defines parameters for GetDeletedStarring.
type GetDeletedStarringParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// GetDeletedTransactionsParams defines parameters for GetDeletedTransactions.
type GetDeletedTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of accounts per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`
}

// ImportAccountsMultipartBody defines parameters for ImportAccounts.
type ImportAccountsMultipartBody struct {
	File *openapi_types.File `json:"file,omitempty" bson:"file"`
}

// GetAllItemsParams defines parameters for GetAllItems.
type GetAllItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of items per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *ItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// CategoryId Filter by category
	CategoryId *UUID `form:"category_id,omitempty" json:"category_id,omitempty" bson:"category_id"`

	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`

	// Fournisseur Filter by fournisseur
	Fournisseur *Fournisseur `form:"fournisseur,omitempty" json:"fournisseur,omitempty" bson:"fournisseur"`
}

// GetAllIncoherentItemsParams defines parameters for GetAllIncoherentItems.
type GetAllIncoherentItemsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of items per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *ItemState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// CategoryId Filter by category
	CategoryId *UUID `form:"category_id,omitempty" json:"category_id,omitempty" bson:"category_id"`

	// Name Filter by name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`
}

// GetRefillsParams defines parameters for GetRefills.
type GetRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetRemoteRefillsParams defines parameters for GetRemoteRefills.
type GetRemoteRefillsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// StartDate Start date of the refill
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the refill
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`

	// CheckoutIntentId HelloAsso Checkout Intent Id associated with the refill
	CheckoutIntentId *int `form:"checkout_intent_id,omitempty" json:"checkout_intent_id,omitempty" bson:"checkout_intent_id"`

	// OrderId HelloAsso Order ID associated with the refill
	OrderId *int `form:"order_id,omitempty" json:"order_id,omitempty" bson:"order_id"`
}

// GetRestocksParams defines parameters for GetRestocks.
type GetRestocksParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of restocks per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State search state
	State *RestockState `form:"state,omitempty" json:"state,omitempty" bson:"state"`
}

// GetStarringsParams defines parameters for GetStarrings.
type GetStarringsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of donations per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// Name Filter by account name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`

	// StartDate Start date of the donations
	StartDate *string `form:"start_date,omitempty" json:"start_date,omitempty" bson:"start_date"`

	// EndDate End date of the donations
	EndDate *string `form:"end_date,omitempty" json:"end_date,omitempty" bson:"end_date"`
}

// GetTransactionsParams defines parameters for GetTransactions.
type GetTransactionsParams struct {
	// Page Page number
	Page *uint64 `form:"page,omitempty" json:"page,omitempty" bson:"page"`

	// Limit Number of transactions per page
	Limit *uint64 `form:"limit,omitempty" json:"limit,omitempty" bson:"limit"`

	// State Filter by state
	State *TransactionState `form:"state,omitempty" json:"state,omitempty" bson:"state"`

	// HideRemote Hide remote transactions
	HideRemote *bool `form:"hide_remote,omitempty" json:"hide_remote,omitempty" bson:"hide_remote"`

	// Name Filter by account name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`
}

// GetTransactionsItemsParams defines parameters for GetTransactionsItems.
type GetTransactionsItemsParams struct {
	// Name Filter by item name
	Name *string `form:"name,omitempty" json:"name,omitempty" bson:"name"`
}

// PatchAccountPasswordJSONRequestBody defines body for PatchAccountPassword for application/json ContentType.
type PatchAccountPasswordJSONRequestBody PatchAccountPasswordJSONBody

// PatchAccountPinJSONRequestBody defines body for PatchAccountPin for application/json ContentType.
type PatchAccountPinJSONRequestBody PatchAccountPinJSONBody

// GetAccountQRJSONRequestBody defines body for GetAccountQR for application/json ContentType.
type GetAccountQRJSONRequestBody GetAccountQRJSONBody

// PostTransactionsJSONRequestBody defines body for PostTransactions for application/json ContentType.
type PostTransactionsJSONRequestBody = NewTransaction

// PostAccountsJSONRequestBody defines body for PostAccounts for application/json ContentType.
type PostAccountsJSONRequestBody = NewAccount

// PatchAccountIdJSONRequestBody defines body for PatchAccountId for application/json ContentType.
type PatchAccountIdJSONRequestBody = UpdateAccountAdmin

// ConnectCardJSONRequestBody defines body for ConnectCard for application/json ContentType.
type ConnectCardJSONRequestBody ConnectCardJSONBody

// ConnectPasswordJSONRequestBody defines body for ConnectPassword for application/json ContentType.
type ConnectPasswordJSONRequestBody ConnectPasswordJSONBody

// PostBorneAuthQRJSONRequestBody defines body for PostBorneAuthQR for application/json ContentType.
type PostBorneAuthQRJSONRequestBody PostBorneAuthQRJSONBody

// AddCarouselImageMultipartRequestBody defines body for AddCarouselImage for multipart/form-data ContentType.
type AddCarouselImageMultipartRequestBody = CarouselImageUpload

// AddCarouselTextJSONRequestBody defines body for AddCarouselText for application/json ContentType.
type AddCarouselTextJSONRequestBody = CarouselTextCreate

// CreateCashMovementJSONRequestBody defines body for CreateCashMovement for application/json ContentType.
type CreateCashMovementJSONRequestBody = NewCashMovement

// PostCategoryJSONRequestBody defines body for PostCategory for application/json ContentType.
type PostCategoryJSONRequestBody = NewCategory

// PatchCategoryJSONRequestBody defines body for PatchCategory for application/json ContentType.
type PatchCategoryJSONRequestBody = UpdateCategory

// PostItemJSONRequestBody defines body for PostItem for application/json ContentType.
type PostItemJSONRequestBody = NewItem

// PatchItemJSONRequestBody defines body for PatchItem for application/json ContentType.
type PatchItemJSONRequestBody = UpdateItem

// ImportAccountsMultipartRequestBody defines body for ImportAccounts for multipart/form-data ContentType.
type ImportAccountsMultipartRequestBody ImportAccountsMultipartBody

// CreateRestockJSONRequestBody defines body for CreateRestock for application/json ContentType.
type CreateRestockJSONRequestBody = NewRestock

// UpdateRestockJSONRequestBody defines body for UpdateRestock for application/json ContentType.
type UpdateRestockJSONRequestBody = NewRestock

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /account)
	GetAccount(ctx echo.Context) error

	// (GET /account/admin)
	GetAccountAdmin(ctx echo.Context) error

	// (PATCH /account/password)
	PatchAccountPassword(ctx echo.Context) error

	// (PATCH /account/pin)
	PatchAccountPin(ctx echo.Context) error

	// (GET /account/qr)
	GetAccountQRWebsocket(ctx echo.Context) error

	// (POST /account/qr)
	GetAccountQR(ctx echo.Context) error

	// (GET /account/refills)
	GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error

	// (POST /account/remote-refills/start)
	StartRemoteRefill(ctx echo.Context, params StartRemoteRefillParams) error

	// (POST /account/remote-refills/validate)
	SelfValidateRemoteRefill(ctx echo.Context, params SelfValidateRemoteRefillParams) error

	// (GET /account/stars)
	GetSelfStarring(ctx echo.Context, params GetSelfStarringParams) error

	// (GET /account/toggles/wants_to_staff)
	ToggleAccountWantsToStaff(ctx echo.Context) error

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error

	// (POST /account/transactions)
	PostTransactions(ctx echo.Context) error

	// (GET /account/watch)
	WatchAccount(ctx echo.Context) error

	// (POST /account/{account_id}/reset_pin)
	ResetAccountPin(ctx echo.Context, accountId UUID) error

	// (GET /accounts)
	GetAccounts(ctx echo.Context, params GetAccountsParams) error

	// (POST /accounts)
	PostAccounts(ctx echo.Context) error

	// (DELETE /accounts/{account_id})
	MarkDeleteAccountId(ctx echo.Context, accountId UUID) error

	// (GET /accounts/{account_id})
	GetAccountId(ctx echo.Context, accountId UUID) error

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx echo.Context, accountId UUID) error

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	MarkDeleteRefill(ctx echo.Context, accountId UUID, refillId UUID) error

	// (PATCH /accounts/{account_id}/refills/{refill_id})
	PatchRefillId(ctx echo.Context, accountId UUID, refillId UUID, params PatchRefillIdParams) error

	// (GET /accounts/{account_id}/stars)
	GetAccountStarring(ctx echo.Context, accountId string, params GetAccountStarringParams) error

	// (POST /accounts/{account_id}/stars)
	PostStarring(ctx echo.Context, accountId string, params PostStarringParams) error

	// (DELETE /accounts/{account_id}/stars/{starring_id})
	MarkDeleteStarring(ctx echo.Context, accountId UUID, starringId UUID) error

	// (PATCH /accounts/{account_id}/stars/{starring_id})
	PatchStarringId(ctx echo.Context, accountId UUID, starringId UUID, params PatchStarringIdParams) error

	// (GET /accounts/{account_id}/toggles/wants_to_staff)
	AdminToggleAccountWantsToStaff(ctx echo.Context, accountId UUID) error

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx echo.Context, accountId UUID, params GetAccountTransactionsParams) error

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	MarkDeleteTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx echo.Context, accountId UUID, transactionId UUID, params PatchTransactionIdParams) error

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx echo.Context, accountId UUID, transactionId UUID, itemId UUID, params PatchTransactionItemIdParams) error

	// (POST /auth/card)
	ConnectCard(ctx echo.Context) error

	// (GET /auth/google)
	ConnectGoogle(ctx echo.Context, params ConnectGoogleParams) error

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx echo.Context, qrNonce string) error

	// (GET /auth/google/callback)
	Callback(ctx echo.Context, params CallbackParams) error

	// (POST /auth/password)
	ConnectPassword(ctx echo.Context) error

	// (GET /auth/qr)
	GetBorneAuthQRWebsocket(ctx echo.Context) error

	// (POST /auth/qr)
	PostBorneAuthQR(ctx echo.Context) error

	// (GET /carousel/images)
	GetCarouselImages(ctx echo.Context) error

	// (POST /carousel/images)
	AddCarouselImage(ctx echo.Context) error

	// (DELETE /carousel/images/{image_id})
	MarkDeleteCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /carousel/images/{image_id})
	GetCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /carousel/texts)
	GetCarouselTexts(ctx echo.Context) error

	// (POST /carousel/texts)
	AddCarouselText(ctx echo.Context) error

	// (DELETE /carousel/texts/{text_id})
	MarkDeleteCarouselText(ctx echo.Context, textId UUID) error

	// (GET /cash_movements)
	GetCashMovements(ctx echo.Context, params GetCashMovementsParams) error

	// (POST /cash_movements)
	CreateCashMovement(ctx echo.Context) error

	// (DELETE /cash_movements/{cash_movement_id})
	DeleteCashMovement(ctx echo.Context, cashMovementId UUID) error

	// (GET /categories)
	GetCategories(ctx echo.Context, params GetCategoriesParams) error

	// (POST /categories)
	PostCategory(ctx echo.Context) error

	// (DELETE /categories/{category_id})
	MarkDeleteCategory(ctx echo.Context, categoryId UUID) error

	// (GET /categories/{category_id})
	GetCategory(ctx echo.Context, categoryId UUID) error

	// (PATCH /categories/{category_id})
	PatchCategory(ctx echo.Context, categoryId UUID) error

	// (GET /categories/{category_id}/items)
	GetCategoryItems(ctx echo.Context, categoryId UUID, params GetCategoryItemsParams) error

	// (POST /categories/{category_id}/items)
	PostItem(ctx echo.Context, categoryId UUID) error

	// (DELETE /categories/{category_id}/items/{item_id})
	MarkDeleteItem(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx echo.Context, categoryId UUID, itemId UUID) error

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx echo.Context, categoryId UUID) error

	// (GET /course)
	GetCourse(ctx echo.Context, params GetCourseParams) error

	// (GET /deleted/accounts)
	GetDeletedAccounts(ctx echo.Context, params GetDeletedAccountsParams) error

	// (DELETE /deleted/accounts/{account_id})
	DeleteAccount(ctx echo.Context, accountId UUID) error

	// (PATCH /deleted/accounts/{account_id})
	RestoreDeletedAccount(ctx echo.Context, accountId UUID) error

	// (GET /deleted/carousel/images)
	GetDeletedCarouselImages(ctx echo.Context, params GetDeletedCarouselImagesParams) error

	// (DELETE /deleted/carousel/images/{image_id})
	DeleteCarouselImage(ctx echo.Context, imageId UUID) error

	// (PATCH /deleted/carousel/images/{image_id})
	RestoreDeletedCarouselImage(ctx echo.Context, imageId UUID) error

	// (GET /deleted/carousel/texts)
	GetDeletedCarouselTexts(ctx echo.Context, params GetDeletedCarouselTextsParams) error

	// (DELETE /deleted/carousel/texts/{text_id})
	DeleteCarouselText(ctx echo.Context, textId UUID) error

	// (PATCH /deleted/carousel/texts/{text_id})
	RestoreDeletedCarouselText(ctx echo.Context, textId UUID) error

	// (GET /deleted/categories)
	GetDeletedCategories(ctx echo.Context, params GetDeletedCategoriesParams) error

	// (DELETE /deleted/categories/{category_id})
	DeleteCategory(ctx echo.Context, categoryId UUID) error

	// (PATCH /deleted/categories/{category_id})
	RestoreDeletedCategory(ctx echo.Context, categoryId UUID) error

	// (GET /deleted/items)
	GetDeletedItems(ctx echo.Context, params GetDeletedItemsParams) error

	// (DELETE /deleted/items/{item_id})
	DeleteItem(ctx echo.Context, itemId UUID) error

	// (PATCH /deleted/items/{item_id})
	RestoreDeletedItem(ctx echo.Context, itemId UUID) error

	// (GET /deleted/refills)
	GetDeletedRefills(ctx echo.Context, params GetDeletedRefillsParams) error

	// (DELETE /deleted/refills/{refill_id})
	DeleteRefill(ctx echo.Context, refillId UUID) error

	// (PATCH /deleted/refills/{refill_id})
	RestoreDeletedRefill(ctx echo.Context, refillId UUID) error

	// (GET /deleted/stars)
	GetDeletedStarring(ctx echo.Context, params GetDeletedStarringParams) error

	// (DELETE /deleted/stars/{starring_id})
	DeleteStarring(ctx echo.Context, starringId UUID) error

	// (PATCH /deleted/stars/{starring_id})
	RestoreDeletedStarring(ctx echo.Context, starringId UUID) error

	// (GET /deleted/transactions)
	GetDeletedTransactions(ctx echo.Context, params GetDeletedTransactionsParams) error

	// (DELETE /deleted/transactions/{transaction_id})
	DeleteTransaction(ctx echo.Context, transactionId UUID) error

	// (PATCH /deleted/transactions/{transaction_id})
	RestoreDeletedTransaction(ctx echo.Context, transactionId UUID) error

	// (POST /import/accounts)
	ImportAccounts(ctx echo.Context) error

	// (GET /items)
	GetAllItems(ctx echo.Context, params GetAllItemsParams) error

	// (GET /items/incoherent)
	GetAllIncoherentItems(ctx echo.Context, params GetAllIncoherentItemsParams) error

	// (GET /logout)
	Logout(ctx echo.Context) error

	// (GET /refills)
	GetRefills(ctx echo.Context, params GetRefillsParams) error

	// (GET /remote-refills)
	GetRemoteRefills(ctx echo.Context, params GetRemoteRefillsParams) error

	// (GET /restocks)
	GetRestocks(ctx echo.Context, params GetRestocksParams) error

	// (POST /restocks)
	CreateRestock(ctx echo.Context) error

	// (DELETE /restocks/{restock_id})
	DeleteRestock(ctx echo.Context, restockId UUID) error

	// (PATCH /restocks/{restock_id})
	UpdateRestock(ctx echo.Context, restockId UUID) error

	// (GET /stars)
	GetStarrings(ctx echo.Context, params GetStarringsParams) error

	// (GET /transactions)
	GetTransactions(ctx echo.Context, params GetTransactionsParams) error

	// (GET /transactions/items)
	GetTransactionsItems(ctx echo.Context, params GetTransactionsItemsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface `bson:"handler"`
}

// GetAccount converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccount(ctx)
	return err
}

// GetAccountAdmin converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountAdmin(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountAdmin(ctx)
	return err
}

// PatchAccountPassword converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountPassword(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchAccountPassword(ctx)
	return err
}

// PatchAccountPin converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountPin(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchAccountPin(ctx)
	return err
}

// GetAccountQRWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountQRWebsocket(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountQRWebsocket(ctx)
	return err
}

// GetAccountQR converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountQR(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	ctx.Set(Not_onboardedScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountQR(ctx)
	return err
}

// GetSelfRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfRefills(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSelfRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSelfRefills(ctx, params)
	return err
}

// StartRemoteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) StartRemoteRefill(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params StartRemoteRefillParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.StartRemoteRefill(ctx, params)
	return err
}

// SelfValidateRemoteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) SelfValidateRemoteRefill(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params SelfValidateRemoteRefillParams
	// ------------- Required query parameter "checkout_intent_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "checkout_intent_id", ctx.QueryParams(), &params.CheckoutIntentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkout_intent_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SelfValidateRemoteRefill(ctx, params)
	return err
}

// GetSelfStarring converts echo context to params.
func (w *ServerInterfaceWrapper) GetSelfStarring(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSelfStarringParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSelfStarring(ctx, params)
	return err
}

// ToggleAccountWantsToStaff converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleAccountWantsToStaff(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ToggleAccountWantsToStaff(ctx)
	return err
}

// GetCurrentAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetCurrentAccountTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCurrentAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCurrentAccountTransactions(ctx, params)
	return err
}

// PostTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) PostTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostTransactions(ctx)
	return err
}

// WatchAccount converts echo context to params.
func (w *ServerInterfaceWrapper) WatchAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.WatchAccount(ctx)
	return err
}

// ResetAccountPin converts echo context to params.
func (w *ServerInterfaceWrapper) ResetAccountPin(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ResetAccountPin(ctx, accountId)
	return err
}

// GetAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccounts(ctx, params)
	return err
}

// PostAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) PostAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostAccounts(ctx)
	return err
}

// MarkDeleteAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteAccountId(ctx, accountId)
	return err
}

// GetAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountId(ctx, accountId)
	return err
}

// PatchAccountId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchAccountId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchAccountId(ctx, accountId)
	return err
}

// GetAccountRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountRefills(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountRefills(ctx, accountId, params)
	return err
}

// PostRefill converts echo context to params.
func (w *ServerInterfaceWrapper) PostRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostRefillParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Required query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, true, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostRefill(ctx, accountId, params)
	return err
}

// MarkDeleteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "refill_id", ctx.Param("refill_id"), &refillId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteRefill(ctx, accountId, refillId)
	return err
}

// PatchRefillId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchRefillId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "refill_id", ctx.Param("refill_id"), &refillId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchRefillIdParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "type" -------------

	err = runtime.BindQueryParameter("form", true, false, "type", ctx.QueryParams(), &params.Type)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchRefillId(ctx, accountId, refillId, params)
	return err
}

// GetAccountStarring converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountStarring(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountStarringParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountStarring(ctx, accountId, params)
	return err
}

// PostStarring converts echo context to params.
func (w *ServerInterfaceWrapper) PostStarring(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId string

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PostStarringParams
	// ------------- Required query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, true, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostStarring(ctx, accountId, params)
	return err
}

// MarkDeleteStarring converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteStarring(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "starring_id" -------------
	var starringId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "starring_id", ctx.Param("starring_id"), &starringId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starring_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteStarring(ctx, accountId, starringId)
	return err
}

// PatchStarringId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchStarringId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "starring_id" -------------
	var starringId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "starring_id", ctx.Param("starring_id"), &starringId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starring_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchStarringIdParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchStarringId(ctx, accountId, starringId, params)
	return err
}

// AdminToggleAccountWantsToStaff converts echo context to params.
func (w *ServerInterfaceWrapper) AdminToggleAccountWantsToStaff(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AdminToggleAccountWantsToStaff(ctx, accountId)
	return err
}

// GetAccountTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetAccountTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAccountTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAccountTransactions(ctx, accountId, params)
	return err
}

// MarkDeleteTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteTransactionId(ctx, accountId, transactionId)
	return err
}

// GetTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionId(ctx, accountId, transactionId)
	return err
}

// PatchTransactionId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionIdParams
	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTransactionId(ctx, accountId, transactionId, params)
	return err
}

// PatchTransactionItemId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchTransactionItemId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params PatchTransactionItemIdParams
	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "amount" -------------

	err = runtime.BindQueryParameter("form", true, false, "amount", ctx.QueryParams(), &params.Amount)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter amount: %s", err))
	}

	// ------------- Optional query parameter "already_done" -------------

	err = runtime.BindQueryParameter("form", true, false, "already_done", ctx.QueryParams(), &params.AlreadyDone)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter already_done: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchTransactionItemId(ctx, accountId, transactionId, itemId, params)
	return err
}

// ConnectCard converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectCard(ctx echo.Context) error {
	var err error

	ctx.Set(Local_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectCard(ctx)
	return err
}

// ConnectGoogle converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectGoogle(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ConnectGoogleParams
	// ------------- Required query parameter "r" -------------

	err = runtime.BindQueryParameter("form", true, true, "r", ctx.QueryParams(), &params.R)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter r: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectGoogle(ctx, params)
	return err
}

// ConnectAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "qr_nonce" -------------
	var qrNonce string

	err = runtime.BindStyledParameterWithOptions("simple", "qr_nonce", ctx.Param("qr_nonce"), &qrNonce, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter qr_nonce: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectAccount(ctx, qrNonce)
	return err
}

// Callback converts echo context to params.
func (w *ServerInterfaceWrapper) Callback(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CallbackParams
	// ------------- Required query parameter "code" -------------

	err = runtime.BindQueryParameter("form", true, true, "code", ctx.QueryParams(), &params.Code)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter code: %s", err))
	}

	// ------------- Required query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, true, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Callback(ctx, params)
	return err
}

// ConnectPassword converts echo context to params.
func (w *ServerInterfaceWrapper) ConnectPassword(ctx echo.Context) error {
	var err error

	ctx.Set(Local_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ConnectPassword(ctx)
	return err
}

// GetBorneAuthQRWebsocket converts echo context to params.
func (w *ServerInterfaceWrapper) GetBorneAuthQRWebsocket(ctx echo.Context) error {
	var err error

	ctx.Set(Local_tokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetBorneAuthQRWebsocket(ctx)
	return err
}

// PostBorneAuthQR converts echo context to params.
func (w *ServerInterfaceWrapper) PostBorneAuthQR(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostBorneAuthQR(ctx)
	return err
}

// GetCarouselImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselImages(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCarouselImages(ctx)
	return err
}

// AddCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselImage(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCarouselImage(ctx)
	return err
}

// MarkDeleteCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "image_id", ctx.Param("image_id"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteCarouselImage(ctx, imageId)
	return err
}

// GetCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "image_id", ctx.Param("image_id"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCarouselImage(ctx, imageId)
	return err
}

// GetCarouselTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetCarouselTexts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCarouselTexts(ctx)
	return err
}

// AddCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) AddCarouselText(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AddCarouselText(ctx)
	return err
}

// MarkDeleteCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "text_id", ctx.Param("text_id"), &textId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteCarouselText(ctx, textId)
	return err
}

// GetCashMovements converts echo context to params.
func (w *ServerInterfaceWrapper) GetCashMovements(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCashMovementsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCashMovements(ctx, params)
	return err
}

// CreateCashMovement converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCashMovement(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateCashMovement(ctx)
	return err
}

// DeleteCashMovement converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCashMovement(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "cash_movement_id" -------------
	var cashMovementId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "cash_movement_id", ctx.Param("cash_movement_id"), &cashMovementId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cash_movement_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCashMovement(ctx, cashMovementId)
	return err
}

// GetCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategories(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoriesParams
	// ------------- Optional query parameter "hidden" -------------

	err = runtime.BindQueryParameter("form", true, false, "hidden", ctx.QueryParams(), &params.Hidden)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hidden: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategories(ctx, params)
	return err
}

// PostCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PostCategory(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostCategory(ctx)
	return err
}

// MarkDeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteCategory(ctx, categoryId)
	return err
}

// GetCategory converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategory(ctx, categoryId)
	return err
}

// PatchCategory converts echo context to params.
func (w *ServerInterfaceWrapper) PatchCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchCategory(ctx, categoryId)
	return err
}

// GetCategoryItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoryItems(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCategoryItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategoryItems(ctx, categoryId, params)
	return err
}

// PostItem converts echo context to params.
func (w *ServerInterfaceWrapper) PostItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostItem(ctx, categoryId)
	return err
}

// MarkDeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) MarkDeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MarkDeleteItem(ctx, categoryId, itemId)
	return err
}

// PatchItem converts echo context to params.
func (w *ServerInterfaceWrapper) PatchItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PatchItem(ctx, categoryId, itemId)
	return err
}

// GetItemPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetItemPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetItemPicture(ctx, categoryId, itemId)
	return err
}

// GetCategoryPicture converts echo context to params.
func (w *ServerInterfaceWrapper) GetCategoryPicture(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(AuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCategoryPicture(ctx, categoryId)
	return err
}

// GetCourse converts echo context to params.
func (w *ServerInterfaceWrapper) GetCourse(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetCourseParams
	// ------------- Optional query parameter "fournisseur" -------------

	err = runtime.BindQueryParameter("form", true, false, "fournisseur", ctx.QueryParams(), &params.Fournisseur)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fournisseur: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetCourse(ctx, params)
	return err
}

// GetDeletedAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedAccountsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedAccounts(ctx, params)
	return err
}

// DeleteAccount converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteAccount(ctx, accountId)
	return err
}

// RestoreDeletedAccount converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "account_id" -------------
	var accountId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "account_id", ctx.Param("account_id"), &accountId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter account_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedAccount(ctx, accountId)
	return err
}

// GetDeletedCarouselImages converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCarouselImages(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCarouselImagesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedCarouselImages(ctx, params)
	return err
}

// DeleteCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "image_id", ctx.Param("image_id"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCarouselImage(ctx, imageId)
	return err
}

// RestoreDeletedCarouselImage converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCarouselImage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "image_id" -------------
	var imageId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "image_id", ctx.Param("image_id"), &imageId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter image_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedCarouselImage(ctx, imageId)
	return err
}

// GetDeletedCarouselTexts converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCarouselTexts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCarouselTextsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedCarouselTexts(ctx, params)
	return err
}

// DeleteCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "text_id", ctx.Param("text_id"), &textId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCarouselText(ctx, textId)
	return err
}

// RestoreDeletedCarouselText converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCarouselText(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "text_id" -------------
	var textId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "text_id", ctx.Param("text_id"), &textId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter text_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedCarouselText(ctx, textId)
	return err
}

// GetDeletedCategories converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedCategories(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedCategoriesParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedCategories(ctx, params)
	return err
}

// DeleteCategory converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteCategory(ctx, categoryId)
	return err
}

// RestoreDeletedCategory converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedCategory(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "category_id" -------------
	var categoryId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "category_id", ctx.Param("category_id"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedCategory(ctx, categoryId)
	return err
}

// GetDeletedItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedItems(ctx, params)
	return err
}

// DeleteItem converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteItem(ctx, itemId)
	return err
}

// RestoreDeletedItem converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedItem(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "item_id" -------------
	var itemId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "item_id", ctx.Param("item_id"), &itemId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter item_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedItem(ctx, itemId)
	return err
}

// GetDeletedRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedRefills(ctx, params)
	return err
}

// DeleteRefill converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "refill_id", ctx.Param("refill_id"), &refillId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRefill(ctx, refillId)
	return err
}

// RestoreDeletedRefill converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedRefill(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "refill_id" -------------
	var refillId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "refill_id", ctx.Param("refill_id"), &refillId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter refill_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedRefill(ctx, refillId)
	return err
}

// GetDeletedStarring converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedStarring(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedStarringParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedStarring(ctx, params)
	return err
}

// DeleteStarring converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteStarring(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "starring_id" -------------
	var starringId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "starring_id", ctx.Param("starring_id"), &starringId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starring_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteStarring(ctx, starringId)
	return err
}

// RestoreDeletedStarring converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedStarring(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "starring_id" -------------
	var starringId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "starring_id", ctx.Param("starring_id"), &starringId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter starring_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedStarring(ctx, starringId)
	return err
}

// GetDeletedTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetDeletedTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetDeletedTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetDeletedTransactions(ctx, params)
	return err
}

// DeleteTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteTransaction(ctx, transactionId)
	return err
}

// RestoreDeletedTransaction converts echo context to params.
func (w *ServerInterfaceWrapper) RestoreDeletedTransaction(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "transaction_id" -------------
	var transactionId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "transaction_id", ctx.Param("transaction_id"), &transactionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transaction_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.RestoreDeletedTransaction(ctx, transactionId)
	return err
}

// ImportAccounts converts echo context to params.
func (w *ServerInterfaceWrapper) ImportAccounts(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ImportAccounts(ctx)
	return err
}

// GetAllItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "fournisseur" -------------

	err = runtime.BindQueryParameter("form", true, false, "fournisseur", ctx.QueryParams(), &params.Fournisseur)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter fournisseur: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllItems(ctx, params)
	return err
}

// GetAllIncoherentItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllIncoherentItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllIncoherentItemsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", ctx.QueryParams(), &params.CategoryId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter category_id: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllIncoherentItems(ctx, params)
	return err
}

// Logout converts echo context to params.
func (w *ServerInterfaceWrapper) Logout(ctx echo.Context) error {
	var err error

	ctx.Set(AuthScopes, []string{})

	ctx.Set(Not_onboardedScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Logout(ctx)
	return err
}

// GetRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRefills(ctx, params)
	return err
}

// GetRemoteRefills converts echo context to params.
func (w *ServerInterfaceWrapper) GetRemoteRefills(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRemoteRefillsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// ------------- Optional query parameter "checkout_intent_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "checkout_intent_id", ctx.QueryParams(), &params.CheckoutIntentId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter checkout_intent_id: %s", err))
	}

	// ------------- Optional query parameter "order_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "order_id", ctx.QueryParams(), &params.OrderId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter order_id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRemoteRefills(ctx, params)
	return err
}

// GetRestocks converts echo context to params.
func (w *ServerInterfaceWrapper) GetRestocks(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetRestocksParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetRestocks(ctx, params)
	return err
}

// CreateRestock converts echo context to params.
func (w *ServerInterfaceWrapper) CreateRestock(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateRestock(ctx)
	return err
}

// DeleteRestock converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRestock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "restock_id" -------------
	var restockId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "restock_id", ctx.Param("restock_id"), &restockId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restock_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteRestock(ctx, restockId)
	return err
}

// UpdateRestock converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateRestock(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "restock_id" -------------
	var restockId UUID

	err = runtime.BindStyledParameterWithOptions("simple", "restock_id", ctx.Param("restock_id"), &restockId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restock_id: %s", err))
	}

	ctx.Set(Admin_authScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateRestock(ctx, restockId)
	return err
}

// GetStarrings converts echo context to params.
func (w *ServerInterfaceWrapper) GetStarrings(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetStarringsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// ------------- Optional query parameter "start_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_date", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_date: %s", err))
	}

	// ------------- Optional query parameter "end_date" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_date", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_date: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetStarrings(ctx, params)
	return err
}

// GetTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactions(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "state" -------------

	err = runtime.BindQueryParameter("form", true, false, "state", ctx.QueryParams(), &params.State)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter state: %s", err))
	}

	// ------------- Optional query parameter "hide_remote" -------------

	err = runtime.BindQueryParameter("form", true, false, "hide_remote", ctx.QueryParams(), &params.HideRemote)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter hide_remote: %s", err))
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactions(ctx, params)
	return err
}

// GetTransactionsItems converts echo context to params.
func (w *ServerInterfaceWrapper) GetTransactionsItems(ctx echo.Context) error {
	var err error

	ctx.Set(Admin_authScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTransactionsItemsParams
	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", true, false, "name", ctx.QueryParams(), &params.Name)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter name: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetTransactionsItems(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/account", wrapper.GetAccount)
	router.GET(baseURL+"/account/admin", wrapper.GetAccountAdmin)
	router.PATCH(baseURL+"/account/password", wrapper.PatchAccountPassword)
	router.PATCH(baseURL+"/account/pin", wrapper.PatchAccountPin)
	router.GET(baseURL+"/account/qr", wrapper.GetAccountQRWebsocket)
	router.POST(baseURL+"/account/qr", wrapper.GetAccountQR)
	router.GET(baseURL+"/account/refills", wrapper.GetSelfRefills)
	router.POST(baseURL+"/account/remote-refills/start", wrapper.StartRemoteRefill)
	router.POST(baseURL+"/account/remote-refills/validate", wrapper.SelfValidateRemoteRefill)
	router.GET(baseURL+"/account/stars", wrapper.GetSelfStarring)
	router.GET(baseURL+"/account/toggles/wants_to_staff", wrapper.ToggleAccountWantsToStaff)
	router.GET(baseURL+"/account/transactions", wrapper.GetCurrentAccountTransactions)
	router.POST(baseURL+"/account/transactions", wrapper.PostTransactions)
	router.GET(baseURL+"/account/watch", wrapper.WatchAccount)
	router.POST(baseURL+"/account/:account_id/reset_pin", wrapper.ResetAccountPin)
	router.GET(baseURL+"/accounts", wrapper.GetAccounts)
	router.POST(baseURL+"/accounts", wrapper.PostAccounts)
	router.DELETE(baseURL+"/accounts/:account_id", wrapper.MarkDeleteAccountId)
	router.GET(baseURL+"/accounts/:account_id", wrapper.GetAccountId)
	router.PATCH(baseURL+"/accounts/:account_id", wrapper.PatchAccountId)
	router.GET(baseURL+"/accounts/:account_id/refills", wrapper.GetAccountRefills)
	router.POST(baseURL+"/accounts/:account_id/refills", wrapper.PostRefill)
	router.DELETE(baseURL+"/accounts/:account_id/refills/:refill_id", wrapper.MarkDeleteRefill)
	router.PATCH(baseURL+"/accounts/:account_id/refills/:refill_id", wrapper.PatchRefillId)
	router.GET(baseURL+"/accounts/:account_id/stars", wrapper.GetAccountStarring)
	router.POST(baseURL+"/accounts/:account_id/stars", wrapper.PostStarring)
	router.DELETE(baseURL+"/accounts/:account_id/stars/:starring_id", wrapper.MarkDeleteStarring)
	router.PATCH(baseURL+"/accounts/:account_id/stars/:starring_id", wrapper.PatchStarringId)
	router.GET(baseURL+"/accounts/:account_id/toggles/wants_to_staff", wrapper.AdminToggleAccountWantsToStaff)
	router.GET(baseURL+"/accounts/:account_id/transactions", wrapper.GetAccountTransactions)
	router.DELETE(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.MarkDeleteTransactionId)
	router.GET(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.GetTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id", wrapper.PatchTransactionId)
	router.PATCH(baseURL+"/accounts/:account_id/transactions/:transaction_id/:item_id", wrapper.PatchTransactionItemId)
	router.POST(baseURL+"/auth/card", wrapper.ConnectCard)
	router.GET(baseURL+"/auth/google", wrapper.ConnectGoogle)
	router.GET(baseURL+"/auth/google/begin/:qr_nonce", wrapper.ConnectAccount)
	router.GET(baseURL+"/auth/google/callback", wrapper.Callback)
	router.POST(baseURL+"/auth/password", wrapper.ConnectPassword)
	router.GET(baseURL+"/auth/qr", wrapper.GetBorneAuthQRWebsocket)
	router.POST(baseURL+"/auth/qr", wrapper.PostBorneAuthQR)
	router.GET(baseURL+"/carousel/images", wrapper.GetCarouselImages)
	router.POST(baseURL+"/carousel/images", wrapper.AddCarouselImage)
	router.DELETE(baseURL+"/carousel/images/:image_id", wrapper.MarkDeleteCarouselImage)
	router.GET(baseURL+"/carousel/images/:image_id", wrapper.GetCarouselImage)
	router.GET(baseURL+"/carousel/texts", wrapper.GetCarouselTexts)
	router.POST(baseURL+"/carousel/texts", wrapper.AddCarouselText)
	router.DELETE(baseURL+"/carousel/texts/:text_id", wrapper.MarkDeleteCarouselText)
	router.GET(baseURL+"/cash_movements", wrapper.GetCashMovements)
	router.POST(baseURL+"/cash_movements", wrapper.CreateCashMovement)
	router.DELETE(baseURL+"/cash_movements/:cash_movement_id", wrapper.DeleteCashMovement)
	router.GET(baseURL+"/categories", wrapper.GetCategories)
	router.POST(baseURL+"/categories", wrapper.PostCategory)
	router.DELETE(baseURL+"/categories/:category_id", wrapper.MarkDeleteCategory)
	router.GET(baseURL+"/categories/:category_id", wrapper.GetCategory)
	router.PATCH(baseURL+"/categories/:category_id", wrapper.PatchCategory)
	router.GET(baseURL+"/categories/:category_id/items", wrapper.GetCategoryItems)
	router.POST(baseURL+"/categories/:category_id/items", wrapper.PostItem)
	router.DELETE(baseURL+"/categories/:category_id/items/:item_id", wrapper.MarkDeleteItem)
	router.PATCH(baseURL+"/categories/:category_id/items/:item_id", wrapper.PatchItem)
	router.GET(baseURL+"/categories/:category_id/items/:item_id/picture", wrapper.GetItemPicture)
	router.GET(baseURL+"/categories/:category_id/picture", wrapper.GetCategoryPicture)
	router.GET(baseURL+"/course", wrapper.GetCourse)
	router.GET(baseURL+"/deleted/accounts", wrapper.GetDeletedAccounts)
	router.DELETE(baseURL+"/deleted/accounts/:account_id", wrapper.DeleteAccount)
	router.PATCH(baseURL+"/deleted/accounts/:account_id", wrapper.RestoreDeletedAccount)
	router.GET(baseURL+"/deleted/carousel/images", wrapper.GetDeletedCarouselImages)
	router.DELETE(baseURL+"/deleted/carousel/images/:image_id", wrapper.DeleteCarouselImage)
	router.PATCH(baseURL+"/deleted/carousel/images/:image_id", wrapper.RestoreDeletedCarouselImage)
	router.GET(baseURL+"/deleted/carousel/texts", wrapper.GetDeletedCarouselTexts)
	router.DELETE(baseURL+"/deleted/carousel/texts/:text_id", wrapper.DeleteCarouselText)
	router.PATCH(baseURL+"/deleted/carousel/texts/:text_id", wrapper.RestoreDeletedCarouselText)
	router.GET(baseURL+"/deleted/categories", wrapper.GetDeletedCategories)
	router.DELETE(baseURL+"/deleted/categories/:category_id", wrapper.DeleteCategory)
	router.PATCH(baseURL+"/deleted/categories/:category_id", wrapper.RestoreDeletedCategory)
	router.GET(baseURL+"/deleted/items", wrapper.GetDeletedItems)
	router.DELETE(baseURL+"/deleted/items/:item_id", wrapper.DeleteItem)
	router.PATCH(baseURL+"/deleted/items/:item_id", wrapper.RestoreDeletedItem)
	router.GET(baseURL+"/deleted/refills", wrapper.GetDeletedRefills)
	router.DELETE(baseURL+"/deleted/refills/:refill_id", wrapper.DeleteRefill)
	router.PATCH(baseURL+"/deleted/refills/:refill_id", wrapper.RestoreDeletedRefill)
	router.GET(baseURL+"/deleted/stars", wrapper.GetDeletedStarring)
	router.DELETE(baseURL+"/deleted/stars/:starring_id", wrapper.DeleteStarring)
	router.PATCH(baseURL+"/deleted/stars/:starring_id", wrapper.RestoreDeletedStarring)
	router.GET(baseURL+"/deleted/transactions", wrapper.GetDeletedTransactions)
	router.DELETE(baseURL+"/deleted/transactions/:transaction_id", wrapper.DeleteTransaction)
	router.PATCH(baseURL+"/deleted/transactions/:transaction_id", wrapper.RestoreDeletedTransaction)
	router.POST(baseURL+"/import/accounts", wrapper.ImportAccounts)
	router.GET(baseURL+"/items", wrapper.GetAllItems)
	router.GET(baseURL+"/items/incoherent", wrapper.GetAllIncoherentItems)
	router.GET(baseURL+"/logout", wrapper.Logout)
	router.GET(baseURL+"/refills", wrapper.GetRefills)
	router.GET(baseURL+"/remote-refills", wrapper.GetRemoteRefills)
	router.GET(baseURL+"/restocks", wrapper.GetRestocks)
	router.POST(baseURL+"/restocks", wrapper.CreateRestock)
	router.DELETE(baseURL+"/restocks/:restock_id", wrapper.DeleteRestock)
	router.PATCH(baseURL+"/restocks/:restock_id", wrapper.UpdateRestock)
	router.GET(baseURL+"/stars", wrapper.GetStarrings)
	router.GET(baseURL+"/transactions", wrapper.GetTransactions)
	router.GET(baseURL+"/transactions/items", wrapper.GetTransactionsItems)

}

type GetAccountRequestObject struct {
}

type GetAccountResponseObject interface {
	VisitGetAccountResponse(w http.ResponseWriter) error
}

type GetAccount200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetAccount200JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount401JSONResponse HTTPError

func (response GetAccount401JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccount500JSONResponse HTTPError

func (response GetAccount500JSONResponse) VisitGetAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdminRequestObject struct {
}

type GetAccountAdminResponseObject interface {
	VisitGetAccountAdminResponse(w http.ResponseWriter) error
}

type GetAccountAdmin200JSONResponse struct {
	CanRestore bool      `json:"can_restore" bson:"can_restore"`
	IsAllowed  bool      `json:"is_allowed" bson:"is_allowed"`
	Message    *Messages `json:"message,omitempty" bson:"message"`
}

func (response GetAccountAdmin200JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin401JSONResponse HTTPError

func (response GetAccountAdmin401JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin404JSONResponse HTTPError

func (response GetAccountAdmin404JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin409JSONResponse HTTPError

func (response GetAccountAdmin409JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountAdmin500JSONResponse HTTPError

func (response GetAccountAdmin500JSONResponse) VisitGetAccountAdminResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPasswordRequestObject struct {
	Body *PatchAccountPasswordJSONRequestBody `bson:"body"`
}

type PatchAccountPasswordResponseObject interface {
	VisitPatchAccountPasswordResponse(w http.ResponseWriter) error
}

type PatchAccountPassword200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response PatchAccountPassword200JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPassword400JSONResponse HTTPError

func (response PatchAccountPassword400JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPassword401JSONResponse HTTPError

func (response PatchAccountPassword401JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPassword404JSONResponse HTTPError

func (response PatchAccountPassword404JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPassword409JSONResponse HTTPError

func (response PatchAccountPassword409JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPassword500JSONResponse HTTPError

func (response PatchAccountPassword500JSONResponse) VisitPatchAccountPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPinRequestObject struct {
	Body *PatchAccountPinJSONRequestBody `bson:"body"`
}

type PatchAccountPinResponseObject interface {
	VisitPatchAccountPinResponse(w http.ResponseWriter) error
}

type PatchAccountPin200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response PatchAccountPin200JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPin400JSONResponse HTTPError

func (response PatchAccountPin400JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPin401JSONResponse HTTPError

func (response PatchAccountPin401JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPin404JSONResponse HTTPError

func (response PatchAccountPin404JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPin409JSONResponse HTTPError

func (response PatchAccountPin409JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountPin500JSONResponse HTTPError

func (response PatchAccountPin500JSONResponse) VisitPatchAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQRWebsocketRequestObject struct {
}

type GetAccountQRWebsocketResponseObject interface {
	VisitGetAccountQRWebsocketResponse(w http.ResponseWriter) error
}

type GetAccountQRWebsocket101ResponseHeaders struct {
	Connection         string `bson:"connection"`
	SecWebSocketAccept string `bson:"sec_web_socket_accept"`
	Upgrade            string `bson:"upgrade"`
}

type GetAccountQRWebsocket101Response struct {
	Headers GetAccountQRWebsocket101ResponseHeaders `bson:"headers"`
}

func (response GetAccountQRWebsocket101Response) VisitGetAccountQRWebsocketResponse(w http.ResponseWriter) error {
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Sec-WebSocket-Accept", fmt.Sprint(response.Headers.SecWebSocketAccept))
	w.Header().Set("Upgrade", fmt.Sprint(response.Headers.Upgrade))
	w.WriteHeader(101)
	return nil
}

type GetAccountQRRequestObject struct {
	Body *GetAccountQRJSONRequestBody `bson:"body"`
}

type GetAccountQRResponseObject interface {
	VisitGetAccountQRResponse(w http.ResponseWriter) error
}

type GetAccountQR200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetAccountQR200ImagepngResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetAccountQR401JSONResponse HTTPError

func (response GetAccountQR401JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountQR500JSONResponse HTTPError

func (response GetAccountQR500JSONResponse) VisitGetAccountQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefillsRequestObject struct {
	Params GetSelfRefillsParams `bson:"params"`
}

type GetSelfRefillsResponseObject interface {
	VisitGetSelfRefillsResponse(w http.ResponseWriter) error
}

type GetSelfRefills200JSONResponse struct {
	Limit   uint64   `json:"limit" bson:"limit"`
	MaxPage uint64   `json:"max_page" bson:"max_page"`
	Page    uint64   `json:"page" bson:"page"`
	Refills []Refill `json:"refills" bson:"refills"`
}

func (response GetSelfRefills200JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills401JSONResponse HTTPError

func (response GetSelfRefills401JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfRefills500JSONResponse HTTPError

func (response GetSelfRefills500JSONResponse) VisitGetSelfRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type StartRemoteRefillRequestObject struct {
	Params StartRemoteRefillParams `bson:"params"`
}

type StartRemoteRefillResponseObject interface {
	VisitStartRemoteRefillResponse(w http.ResponseWriter) error
}

type StartRemoteRefill200JSONResponse struct {
	RedirectUrl string `json:"redirect_url" bson:"redirect_url"`
}

func (response StartRemoteRefill200JSONResponse) VisitStartRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type StartRemoteRefill400Response struct {
}

func (response StartRemoteRefill400Response) VisitStartRemoteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type StartRemoteRefill401JSONResponse HTTPError

func (response StartRemoteRefill401JSONResponse) VisitStartRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type StartRemoteRefill500JSONResponse HTTPError

func (response StartRemoteRefill500JSONResponse) VisitStartRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type SelfValidateRemoteRefillRequestObject struct {
	Params SelfValidateRemoteRefillParams `bson:"params"`
}

type SelfValidateRemoteRefillResponseObject interface {
	VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error
}

type SelfValidateRemoteRefill200JSONResponse Refill

func (response SelfValidateRemoteRefill200JSONResponse) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type SelfValidateRemoteRefill401JSONResponse HTTPError

func (response SelfValidateRemoteRefill401JSONResponse) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type SelfValidateRemoteRefill402Response struct {
}

func (response SelfValidateRemoteRefill402Response) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(402)
	return nil
}

type SelfValidateRemoteRefill404Response struct {
}

func (response SelfValidateRemoteRefill404Response) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type SelfValidateRemoteRefill409Response struct {
}

func (response SelfValidateRemoteRefill409Response) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type SelfValidateRemoteRefill500JSONResponse HTTPError

func (response SelfValidateRemoteRefill500JSONResponse) VisitSelfValidateRemoteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfStarringRequestObject struct {
	Params GetSelfStarringParams `bson:"params"`
}

type GetSelfStarringResponseObject interface {
	VisitGetSelfStarringResponse(w http.ResponseWriter) error
}

type GetSelfStarring200JSONResponse struct {
	Limit   uint64     `json:"limit" bson:"limit"`
	MaxPage uint64     `json:"max_page" bson:"max_page"`
	Page    uint64     `json:"page" bson:"page"`
	Stars   []Starring `json:"stars" bson:"stars"`
}

func (response GetSelfStarring200JSONResponse) VisitGetSelfStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfStarring401JSONResponse HTTPError

func (response GetSelfStarring401JSONResponse) VisitGetSelfStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSelfStarring500JSONResponse HTTPError

func (response GetSelfStarring500JSONResponse) VisitGetSelfStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ToggleAccountWantsToStaffRequestObject struct {
}

type ToggleAccountWantsToStaffResponseObject interface {
	VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error
}

type ToggleAccountWantsToStaff200JSONResponse struct {
	Message      *Messages `json:"message,omitempty" bson:"message"`
	WantsToStaff bool      `json:"wants_to_staff" bson:"wants_to_staff"`
}

func (response ToggleAccountWantsToStaff200JSONResponse) VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ToggleAccountWantsToStaff401JSONResponse HTTPError

func (response ToggleAccountWantsToStaff401JSONResponse) VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ToggleAccountWantsToStaff404JSONResponse HTTPError

func (response ToggleAccountWantsToStaff404JSONResponse) VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ToggleAccountWantsToStaff409JSONResponse HTTPError

func (response ToggleAccountWantsToStaff409JSONResponse) VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ToggleAccountWantsToStaff500JSONResponse HTTPError

func (response ToggleAccountWantsToStaff500JSONResponse) VisitToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactionsRequestObject struct {
	Params GetCurrentAccountTransactionsParams `bson:"params"`
}

type GetCurrentAccountTransactionsResponseObject interface {
	VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetCurrentAccountTransactions200JSONResponse struct {
	Limit        uint64        `json:"limit" bson:"limit"`
	MaxPage      uint64        `json:"max_page" bson:"max_page"`
	Page         uint64        `json:"page" bson:"page"`
	Transactions []Transaction `json:"transactions" bson:"transactions"`
}

func (response GetCurrentAccountTransactions200JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions401JSONResponse HTTPError

func (response GetCurrentAccountTransactions401JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCurrentAccountTransactions403JSONResponse HTTPError

func (response GetCurrentAccountTransactions403JSONResponse) VisitGetCurrentAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactionsRequestObject struct {
	Body *PostTransactionsJSONRequestBody `bson:"body"`
}

type PostTransactionsResponseObject interface {
	VisitPostTransactionsResponse(w http.ResponseWriter) error
}

type PostTransactions201JSONResponse Transaction

func (response PostTransactions201JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions401JSONResponse HTTPError

func (response PostTransactions401JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions403JSONResponse HTTPError

func (response PostTransactions403JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions404JSONResponse HTTPError

func (response PostTransactions404JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostTransactions500JSONResponse HTTPError

func (response PostTransactions500JSONResponse) VisitPostTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type WatchAccountRequestObject struct {
}

type WatchAccountResponseObject interface {
	VisitWatchAccountResponse(w http.ResponseWriter) error
}

type WatchAccount200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response WatchAccount200JSONResponse) VisitWatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type WatchAccount401JSONResponse HTTPError

func (response WatchAccount401JSONResponse) VisitWatchAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ResetAccountPinRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type ResetAccountPinResponseObject interface {
	VisitResetAccountPinResponse(w http.ResponseWriter) error
}

type ResetAccountPin200Response struct {
}

func (response ResetAccountPin200Response) VisitResetAccountPinResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ResetAccountPin401JSONResponse HTTPError

func (response ResetAccountPin401JSONResponse) VisitResetAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ResetAccountPin403JSONResponse HTTPError

func (response ResetAccountPin403JSONResponse) VisitResetAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ResetAccountPin404JSONResponse HTTPError

func (response ResetAccountPin404JSONResponse) VisitResetAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type ResetAccountPin500JSONResponse HTTPError

func (response ResetAccountPin500JSONResponse) VisitResetAccountPinResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountsRequestObject struct {
	Params GetAccountsParams `bson:"params"`
}

type GetAccountsResponseObject interface {
	VisitGetAccountsResponse(w http.ResponseWriter) error
}

type GetAccounts200JSONResponse struct {
	Accounts []Account `json:"accounts" bson:"accounts"`
	Limit    uint64    `json:"limit" bson:"limit"`
	MaxPage  uint64    `json:"max_page" bson:"max_page"`
	Message  *Messages `json:"message,omitempty" bson:"message"`
	Page     uint64    `json:"page" bson:"page"`
}

func (response GetAccounts200JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts401JSONResponse HTTPError

func (response GetAccounts401JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts403JSONResponse HTTPError

func (response GetAccounts403JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccounts500JSONResponse HTTPError

func (response GetAccounts500JSONResponse) VisitGetAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostAccountsRequestObject struct {
	Body *PostAccountsJSONRequestBody `bson:"body"`
}

type PostAccountsResponseObject interface {
	VisitPostAccountsResponse(w http.ResponseWriter) error
}

type PostAccounts200JSONResponse Account

func (response PostAccounts200JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts401JSONResponse HTTPError

func (response PostAccounts401JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts403JSONResponse HTTPError

func (response PostAccounts403JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts409JSONResponse HTTPError

func (response PostAccounts409JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostAccounts500JSONResponse HTTPError

func (response PostAccounts500JSONResponse) VisitPostAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountIdRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type MarkDeleteAccountIdResponseObject interface {
	VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error
}

type MarkDeleteAccountId204Response struct {
}

func (response MarkDeleteAccountId204Response) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteAccountId401JSONResponse HTTPError

func (response MarkDeleteAccountId401JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId403JSONResponse HTTPError

func (response MarkDeleteAccountId403JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId404JSONResponse HTTPError

func (response MarkDeleteAccountId404JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteAccountId500JSONResponse HTTPError

func (response MarkDeleteAccountId500JSONResponse) VisitMarkDeleteAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountIdRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type GetAccountIdResponseObject interface {
	VisitGetAccountIdResponse(w http.ResponseWriter) error
}

type GetAccountId200JSONResponse Account

func (response GetAccountId200JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId401JSONResponse HTTPError

func (response GetAccountId401JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId403JSONResponse HTTPError

func (response GetAccountId403JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId404JSONResponse HTTPError

func (response GetAccountId404JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountId500JSONResponse HTTPError

func (response GetAccountId500JSONResponse) VisitGetAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountIdRequestObject struct {
	AccountId UUID                           `json:"account_id" bson:"account_id"`
	Body      *PatchAccountIdJSONRequestBody `bson:"body"`
}

type PatchAccountIdResponseObject interface {
	VisitPatchAccountIdResponse(w http.ResponseWriter) error
}

type PatchAccountId200JSONResponse Account

func (response PatchAccountId200JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId401JSONResponse HTTPError

func (response PatchAccountId401JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId403JSONResponse HTTPError

func (response PatchAccountId403JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId404JSONResponse HTTPError

func (response PatchAccountId404JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchAccountId500JSONResponse HTTPError

func (response PatchAccountId500JSONResponse) VisitPatchAccountIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefillsRequestObject struct {
	AccountId string                  `json:"account_id" bson:"account_id"`
	Params    GetAccountRefillsParams `bson:"params"`
}

type GetAccountRefillsResponseObject interface {
	VisitGetAccountRefillsResponse(w http.ResponseWriter) error
}

type GetAccountRefills200JSONResponse struct {
	Limit   uint64   `json:"limit" bson:"limit"`
	MaxPage uint64   `json:"max_page" bson:"max_page"`
	Page    uint64   `json:"page" bson:"page"`
	Refills []Refill `json:"refills" bson:"refills"`
}

func (response GetAccountRefills200JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills401JSONResponse HTTPError

func (response GetAccountRefills401JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills403JSONResponse HTTPError

func (response GetAccountRefills403JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills404JSONResponse HTTPError

func (response GetAccountRefills404JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountRefills500JSONResponse HTTPError

func (response GetAccountRefills500JSONResponse) VisitGetAccountRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostRefillRequestObject struct {
	AccountId string           `json:"account_id" bson:"account_id"`
	Params    PostRefillParams `bson:"params"`
}

type PostRefillResponseObject interface {
	VisitPostRefillResponse(w http.ResponseWriter) error
}

type PostRefill201JSONResponse Refill

func (response PostRefill201JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill400JSONResponse HTTPError

func (response PostRefill400JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill401JSONResponse HTTPError

func (response PostRefill401JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill403JSONResponse HTTPError

func (response PostRefill403JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill404JSONResponse HTTPError

func (response PostRefill404JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostRefill500JSONResponse HTTPError

func (response PostRefill500JSONResponse) VisitPostRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefillRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
	RefillId  UUID `json:"refill_id" bson:"refill_id"`
}

type MarkDeleteRefillResponseObject interface {
	VisitMarkDeleteRefillResponse(w http.ResponseWriter) error
}

type MarkDeleteRefill204Response struct {
}

func (response MarkDeleteRefill204Response) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteRefill401JSONResponse HTTPError

func (response MarkDeleteRefill401JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill403JSONResponse HTTPError

func (response MarkDeleteRefill403JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill404JSONResponse HTTPError

func (response MarkDeleteRefill404JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteRefill500JSONResponse HTTPError

func (response MarkDeleteRefill500JSONResponse) VisitMarkDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillIdRequestObject struct {
	AccountId UUID                `json:"account_id" bson:"account_id"`
	RefillId  UUID                `json:"refill_id" bson:"refill_id"`
	Params    PatchRefillIdParams `bson:"params"`
}

type PatchRefillIdResponseObject interface {
	VisitPatchRefillIdResponse(w http.ResponseWriter) error
}

type PatchRefillId200JSONResponse Refill

func (response PatchRefillId200JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId400JSONResponse HTTPError

func (response PatchRefillId400JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId401JSONResponse HTTPError

func (response PatchRefillId401JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId403JSONResponse HTTPError

func (response PatchRefillId403JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId404JSONResponse HTTPError

func (response PatchRefillId404JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId409JSONResponse HTTPError

func (response PatchRefillId409JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchRefillId500JSONResponse HTTPError

func (response PatchRefillId500JSONResponse) VisitPatchRefillIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountStarringRequestObject struct {
	AccountId string                   `json:"account_id" bson:"account_id"`
	Params    GetAccountStarringParams `bson:"params"`
}

type GetAccountStarringResponseObject interface {
	VisitGetAccountStarringResponse(w http.ResponseWriter) error
}

type GetAccountStarring200JSONResponse struct {
	Limit   uint64     `json:"limit" bson:"limit"`
	MaxPage uint64     `json:"max_page" bson:"max_page"`
	Page    uint64     `json:"page" bson:"page"`
	Stars   []Starring `json:"stars" bson:"stars"`
}

func (response GetAccountStarring200JSONResponse) VisitGetAccountStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountStarring401JSONResponse HTTPError

func (response GetAccountStarring401JSONResponse) VisitGetAccountStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountStarring403JSONResponse HTTPError

func (response GetAccountStarring403JSONResponse) VisitGetAccountStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountStarring404JSONResponse HTTPError

func (response GetAccountStarring404JSONResponse) VisitGetAccountStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountStarring500JSONResponse HTTPError

func (response GetAccountStarring500JSONResponse) VisitGetAccountStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostStarringRequestObject struct {
	AccountId string             `json:"account_id" bson:"account_id"`
	Params    PostStarringParams `bson:"params"`
}

type PostStarringResponseObject interface {
	VisitPostStarringResponse(w http.ResponseWriter) error
}

type PostStarring201JSONResponse Starring

func (response PostStarring201JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostStarring400JSONResponse HTTPError

func (response PostStarring400JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostStarring401JSONResponse HTTPError

func (response PostStarring401JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostStarring403JSONResponse HTTPError

func (response PostStarring403JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostStarring404JSONResponse HTTPError

func (response PostStarring404JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PostStarring500JSONResponse HTTPError

func (response PostStarring500JSONResponse) VisitPostStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteStarringRequestObject struct {
	AccountId  UUID `json:"account_id" bson:"account_id"`
	StarringId UUID `json:"starring_id" bson:"starring_id"`
}

type MarkDeleteStarringResponseObject interface {
	VisitMarkDeleteStarringResponse(w http.ResponseWriter) error
}

type MarkDeleteStarring204Response struct {
}

func (response MarkDeleteStarring204Response) VisitMarkDeleteStarringResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteStarring401JSONResponse HTTPError

func (response MarkDeleteStarring401JSONResponse) VisitMarkDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteStarring403JSONResponse HTTPError

func (response MarkDeleteStarring403JSONResponse) VisitMarkDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteStarring404JSONResponse HTTPError

func (response MarkDeleteStarring404JSONResponse) VisitMarkDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteStarring500JSONResponse HTTPError

func (response MarkDeleteStarring500JSONResponse) VisitMarkDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringIdRequestObject struct {
	AccountId  UUID                  `json:"account_id" bson:"account_id"`
	StarringId UUID                  `json:"starring_id" bson:"starring_id"`
	Params     PatchStarringIdParams `bson:"params"`
}

type PatchStarringIdResponseObject interface {
	VisitPatchStarringIdResponse(w http.ResponseWriter) error
}

type PatchStarringId200JSONResponse Starring

func (response PatchStarringId200JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId400JSONResponse HTTPError

func (response PatchStarringId400JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId401JSONResponse HTTPError

func (response PatchStarringId401JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId403JSONResponse HTTPError

func (response PatchStarringId403JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId404JSONResponse HTTPError

func (response PatchStarringId404JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId409JSONResponse HTTPError

func (response PatchStarringId409JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PatchStarringId500JSONResponse HTTPError

func (response PatchStarringId500JSONResponse) VisitPatchStarringIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AdminToggleAccountWantsToStaffRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type AdminToggleAccountWantsToStaffResponseObject interface {
	VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error
}

type AdminToggleAccountWantsToStaff200JSONResponse struct {
	Message      *Messages `json:"message,omitempty" bson:"message"`
	WantsToStaff bool      `json:"wants_to_staff" bson:"wants_to_staff"`
}

func (response AdminToggleAccountWantsToStaff200JSONResponse) VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type AdminToggleAccountWantsToStaff401JSONResponse HTTPError

func (response AdminToggleAccountWantsToStaff401JSONResponse) VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AdminToggleAccountWantsToStaff404JSONResponse HTTPError

func (response AdminToggleAccountWantsToStaff404JSONResponse) VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type AdminToggleAccountWantsToStaff409JSONResponse HTTPError

func (response AdminToggleAccountWantsToStaff409JSONResponse) VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AdminToggleAccountWantsToStaff500JSONResponse HTTPError

func (response AdminToggleAccountWantsToStaff500JSONResponse) VisitAdminToggleAccountWantsToStaffResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactionsRequestObject struct {
	AccountId UUID                         `json:"account_id" bson:"account_id"`
	Params    GetAccountTransactionsParams `bson:"params"`
}

type GetAccountTransactionsResponseObject interface {
	VisitGetAccountTransactionsResponse(w http.ResponseWriter) error
}

type GetAccountTransactions200JSONResponse struct {
	Limit        uint64        `json:"limit" bson:"limit"`
	MaxPage      uint64        `json:"max_page" bson:"max_page"`
	Page         uint64        `json:"page" bson:"page"`
	Transactions []Transaction `json:"transactions" bson:"transactions"`
}

func (response GetAccountTransactions200JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions401JSONResponse HTTPError

func (response GetAccountTransactions401JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions403JSONResponse HTTPError

func (response GetAccountTransactions403JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAccountTransactions500JSONResponse HTTPError

func (response GetAccountTransactions500JSONResponse) VisitGetAccountTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionIdRequestObject struct {
	AccountId     UUID `json:"account_id" bson:"account_id"`
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type MarkDeleteTransactionIdResponseObject interface {
	VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error
}

type MarkDeleteTransactionId200JSONResponse HTTPError

func (response MarkDeleteTransactionId200JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId401JSONResponse HTTPError

func (response MarkDeleteTransactionId401JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId403JSONResponse HTTPError

func (response MarkDeleteTransactionId403JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId404JSONResponse HTTPError

func (response MarkDeleteTransactionId404JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteTransactionId500JSONResponse HTTPError

func (response MarkDeleteTransactionId500JSONResponse) VisitMarkDeleteTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionIdRequestObject struct {
	AccountId     UUID `json:"account_id" bson:"account_id"`
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type GetTransactionIdResponseObject interface {
	VisitGetTransactionIdResponse(w http.ResponseWriter) error
}

type GetTransactionId200JSONResponse Transaction

func (response GetTransactionId200JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId401JSONResponse HTTPError

func (response GetTransactionId401JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId403JSONResponse HTTPError

func (response GetTransactionId403JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId404JSONResponse HTTPError

func (response GetTransactionId404JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionId500JSONResponse HTTPError

func (response GetTransactionId500JSONResponse) VisitGetTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionIdRequestObject struct {
	AccountId     UUID                     `json:"account_id" bson:"account_id"`
	TransactionId UUID                     `json:"transaction_id" bson:"transaction_id"`
	Params        PatchTransactionIdParams `bson:"params"`
}

type PatchTransactionIdResponseObject interface {
	VisitPatchTransactionIdResponse(w http.ResponseWriter) error
}

type PatchTransactionId200JSONResponse HTTPError

func (response PatchTransactionId200JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId401JSONResponse HTTPError

func (response PatchTransactionId401JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId403JSONResponse HTTPError

func (response PatchTransactionId403JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId404JSONResponse HTTPError

func (response PatchTransactionId404JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionId500JSONResponse HTTPError

func (response PatchTransactionId500JSONResponse) VisitPatchTransactionIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemIdRequestObject struct {
	AccountId     UUID                         `json:"account_id" bson:"account_id"`
	TransactionId UUID                         `json:"transaction_id" bson:"transaction_id"`
	ItemId        UUID                         `json:"item_id" bson:"item_id"`
	Params        PatchTransactionItemIdParams `bson:"params"`
}

type PatchTransactionItemIdResponseObject interface {
	VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error
}

type PatchTransactionItemId200JSONResponse HTTPError

func (response PatchTransactionItemId200JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId401JSONResponse HTTPError

func (response PatchTransactionItemId401JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId403JSONResponse HTTPError

func (response PatchTransactionItemId403JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId404JSONResponse HTTPError

func (response PatchTransactionItemId404JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchTransactionItemId500JSONResponse HTTPError

func (response PatchTransactionItemId500JSONResponse) VisitPatchTransactionItemIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCardRequestObject struct {
	Body *ConnectCardJSONRequestBody `bson:"body"`
}

type ConnectCardResponseObject interface {
	VisitConnectCardResponse(w http.ResponseWriter) error
}

type ConnectCard200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response ConnectCard200JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard400JSONResponse HTTPError

func (response ConnectCard400JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard401JSONResponse HTTPError

func (response ConnectCard401JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectCard500JSONResponse HTTPError

func (response ConnectCard500JSONResponse) VisitConnectCardResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogleRequestObject struct {
	Params ConnectGoogleParams `bson:"params"`
}

type ConnectGoogleResponseObject interface {
	VisitConnectGoogleResponse(w http.ResponseWriter) error
}

type ConnectGoogle301ResponseHeaders struct {
	Location string `bson:"location"`
}

type ConnectGoogle301Response struct {
	Headers ConnectGoogle301ResponseHeaders `bson:"headers"`
}

func (response ConnectGoogle301Response) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type ConnectGoogle400JSONResponse HTTPError

func (response ConnectGoogle400JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogle401JSONResponse HTTPError

func (response ConnectGoogle401JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectGoogle500JSONResponse HTTPError

func (response ConnectGoogle500JSONResponse) VisitConnectGoogleResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccountRequestObject struct {
	QrNonce string `json:"qr_nonce" bson:"qr_nonce"`
}

type ConnectAccountResponseObject interface {
	VisitConnectAccountResponse(w http.ResponseWriter) error
}

type ConnectAccount301ResponseHeaders struct {
	Location string `bson:"location"`
}

type ConnectAccount301Response struct {
	Headers ConnectAccount301ResponseHeaders `bson:"headers"`
}

func (response ConnectAccount301Response) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type ConnectAccount400JSONResponse HTTPError

func (response ConnectAccount400JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectAccount500JSONResponse HTTPError

func (response ConnectAccount500JSONResponse) VisitConnectAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CallbackRequestObject struct {
	Params CallbackParams `bson:"params"`
}

type CallbackResponseObject interface {
	VisitCallbackResponse(w http.ResponseWriter) error
}

type Callback301ResponseHeaders struct {
	Location string `bson:"location"`
}

type Callback301Response struct {
	Headers Callback301ResponseHeaders `bson:"headers"`
}

func (response Callback301Response) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Location", fmt.Sprint(response.Headers.Location))
	w.WriteHeader(301)
	return nil
}

type Callback500JSONResponse HTTPError

func (response Callback500JSONResponse) VisitCallbackResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ConnectPasswordRequestObject struct {
	Body *ConnectPasswordJSONRequestBody `bson:"body"`
}

type ConnectPasswordResponseObject interface {
	VisitConnectPasswordResponse(w http.ResponseWriter) error
}

type ConnectPassword200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response ConnectPassword200JSONResponse) VisitConnectPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ConnectPassword400JSONResponse HTTPError

func (response ConnectPassword400JSONResponse) VisitConnectPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ConnectPassword401JSONResponse HTTPError

func (response ConnectPassword401JSONResponse) VisitConnectPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ConnectPassword500JSONResponse HTTPError

func (response ConnectPassword500JSONResponse) VisitConnectPasswordResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetBorneAuthQRWebsocketRequestObject struct {
}

type GetBorneAuthQRWebsocketResponseObject interface {
	VisitGetBorneAuthQRWebsocketResponse(w http.ResponseWriter) error
}

type GetBorneAuthQRWebsocket101ResponseHeaders struct {
	Connection         string `bson:"connection"`
	SecWebSocketAccept string `bson:"sec_web_socket_accept"`
	Upgrade            string `bson:"upgrade"`
}

type GetBorneAuthQRWebsocket101Response struct {
	Headers GetBorneAuthQRWebsocket101ResponseHeaders `bson:"headers"`
}

func (response GetBorneAuthQRWebsocket101Response) VisitGetBorneAuthQRWebsocketResponse(w http.ResponseWriter) error {
	w.Header().Set("Connection", fmt.Sprint(response.Headers.Connection))
	w.Header().Set("Sec-WebSocket-Accept", fmt.Sprint(response.Headers.SecWebSocketAccept))
	w.Header().Set("Upgrade", fmt.Sprint(response.Headers.Upgrade))
	w.WriteHeader(101)
	return nil
}

type PostBorneAuthQRRequestObject struct {
	Body *PostBorneAuthQRJSONRequestBody `bson:"body"`
}

type PostBorneAuthQRResponseObject interface {
	VisitPostBorneAuthQRResponse(w http.ResponseWriter) error
}

type PostBorneAuthQR200JSONResponse struct {
	Account *Account  `json:"account,omitempty" bson:"account"`
	Message *Messages `json:"message,omitempty" bson:"message"`
}

func (response PostBorneAuthQR200JSONResponse) VisitPostBorneAuthQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostBorneAuthQR400JSONResponse HTTPError

func (response PostBorneAuthQR400JSONResponse) VisitPostBorneAuthQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostBorneAuthQR401JSONResponse HTTPError

func (response PostBorneAuthQR401JSONResponse) VisitPostBorneAuthQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostBorneAuthQR500JSONResponse HTTPError

func (response PostBorneAuthQR500JSONResponse) VisitPostBorneAuthQRResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImagesRequestObject struct {
}

type GetCarouselImagesResponseObject interface {
	VisitGetCarouselImagesResponse(w http.ResponseWriter) error
}

type GetCarouselImages200JSONResponse []CarouselImage

func (response GetCarouselImages200JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImages500JSONResponse HTTPError

func (response GetCarouselImages500JSONResponse) VisitGetCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImageRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type AddCarouselImageResponseObject interface {
	VisitAddCarouselImageResponse(w http.ResponseWriter) error
}

type AddCarouselImage201JSONResponse CarouselImage

func (response AddCarouselImage201JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage400JSONResponse HTTPError

func (response AddCarouselImage400JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage401JSONResponse HTTPError

func (response AddCarouselImage401JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage403JSONResponse HTTPError

func (response AddCarouselImage403JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage409JSONResponse HTTPError

func (response AddCarouselImage409JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselImage500JSONResponse HTTPError

func (response AddCarouselImage500JSONResponse) VisitAddCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type MarkDeleteCarouselImageResponseObject interface {
	VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error
}

type MarkDeleteCarouselImage204Response struct {
}

func (response MarkDeleteCarouselImage204Response) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCarouselImage401JSONResponse HTTPError

func (response MarkDeleteCarouselImage401JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage403JSONResponse HTTPError

func (response MarkDeleteCarouselImage403JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage404JSONResponse HTTPError

func (response MarkDeleteCarouselImage404JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselImage500JSONResponse HTTPError

func (response MarkDeleteCarouselImage500JSONResponse) VisitMarkDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type GetCarouselImageResponseObject interface {
	VisitGetCarouselImageResponse(w http.ResponseWriter) error
}

type GetCarouselImage200ImageResponse struct {
	Body          io.Reader `bson:"body"`
	ContentType   string    `bson:"content_type"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetCarouselImage200ImageResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", response.ContentType)
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCarouselImage404JSONResponse HTTPError

func (response GetCarouselImage404JSONResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselImage500JSONResponse HTTPError

func (response GetCarouselImage500JSONResponse) VisitGetCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTextsRequestObject struct {
}

type GetCarouselTextsResponseObject interface {
	VisitGetCarouselTextsResponse(w http.ResponseWriter) error
}

type GetCarouselTexts200JSONResponse []CarouselText

func (response GetCarouselTexts200JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCarouselTexts500JSONResponse HTTPError

func (response GetCarouselTexts500JSONResponse) VisitGetCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselTextRequestObject struct {
	Body *AddCarouselTextJSONRequestBody `bson:"body"`
}

type AddCarouselTextResponseObject interface {
	VisitAddCarouselTextResponse(w http.ResponseWriter) error
}

type AddCarouselText201JSONResponse CarouselText

func (response AddCarouselText201JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText400JSONResponse HTTPError

func (response AddCarouselText400JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText401JSONResponse HTTPError

func (response AddCarouselText401JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText403JSONResponse HTTPError

func (response AddCarouselText403JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText409JSONResponse HTTPError

func (response AddCarouselText409JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type AddCarouselText500JSONResponse HTTPError

func (response AddCarouselText500JSONResponse) VisitAddCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type MarkDeleteCarouselTextResponseObject interface {
	VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error
}

type MarkDeleteCarouselText204Response struct {
}

func (response MarkDeleteCarouselText204Response) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCarouselText401JSONResponse HTTPError

func (response MarkDeleteCarouselText401JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText403JSONResponse HTTPError

func (response MarkDeleteCarouselText403JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText404JSONResponse HTTPError

func (response MarkDeleteCarouselText404JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCarouselText500JSONResponse HTTPError

func (response MarkDeleteCarouselText500JSONResponse) VisitMarkDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCashMovementsRequestObject struct {
	Params GetCashMovementsParams `bson:"params"`
}

type GetCashMovementsResponseObject interface {
	VisitGetCashMovementsResponse(w http.ResponseWriter) error
}

type GetCashMovements200JSONResponse struct {
	CashMovements []CashMovement `json:"cash_movements" bson:"cash_movements"`
	Limit         uint64         `json:"limit" bson:"limit"`
	MaxPage       uint64         `json:"max_page" bson:"max_page"`
	Page          uint64         `json:"page" bson:"page"`
}

func (response GetCashMovements200JSONResponse) VisitGetCashMovementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCashMovements400JSONResponse HTTPError

func (response GetCashMovements400JSONResponse) VisitGetCashMovementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetCashMovements401JSONResponse HTTPError

func (response GetCashMovements401JSONResponse) VisitGetCashMovementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCashMovements403JSONResponse HTTPError

func (response GetCashMovements403JSONResponse) VisitGetCashMovementsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashMovementRequestObject struct {
	Body *CreateCashMovementJSONRequestBody `bson:"body"`
}

type CreateCashMovementResponseObject interface {
	VisitCreateCashMovementResponse(w http.ResponseWriter) error
}

type CreateCashMovement201JSONResponse CashMovement

func (response CreateCashMovement201JSONResponse) VisitCreateCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashMovement400JSONResponse HTTPError

func (response CreateCashMovement400JSONResponse) VisitCreateCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashMovement401JSONResponse HTTPError

func (response CreateCashMovement401JSONResponse) VisitCreateCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashMovement403JSONResponse HTTPError

func (response CreateCashMovement403JSONResponse) VisitCreateCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateCashMovement409JSONResponse HTTPError

func (response CreateCashMovement409JSONResponse) VisitCreateCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashMovementRequestObject struct {
	CashMovementId UUID `json:"cash_movement_id" bson:"cash_movement_id"`
}

type DeleteCashMovementResponseObject interface {
	VisitDeleteCashMovementResponse(w http.ResponseWriter) error
}

type DeleteCashMovement204Response struct {
}

func (response DeleteCashMovement204Response) VisitDeleteCashMovementResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCashMovement401JSONResponse HTTPError

func (response DeleteCashMovement401JSONResponse) VisitDeleteCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashMovement403JSONResponse HTTPError

func (response DeleteCashMovement403JSONResponse) VisitDeleteCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCashMovement404JSONResponse HTTPError

func (response DeleteCashMovement404JSONResponse) VisitDeleteCashMovementResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoriesRequestObject struct {
	Params GetCategoriesParams `bson:"params"`
}

type GetCategoriesResponseObject interface {
	VisitGetCategoriesResponse(w http.ResponseWriter) error
}

type GetCategories200JSONResponse []Category

func (response GetCategories200JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategories500JSONResponse HTTPError

func (response GetCategories500JSONResponse) VisitGetCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostCategoryRequestObject struct {
	Body *PostCategoryJSONRequestBody `bson:"body"`
}

type PostCategoryResponseObject interface {
	VisitPostCategoryResponse(w http.ResponseWriter) error
}

type PostCategory201JSONResponse Category

func (response PostCategory201JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory400JSONResponse HTTPError

func (response PostCategory400JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory401JSONResponse HTTPError

func (response PostCategory401JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory403JSONResponse HTTPError

func (response PostCategory403JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory409JSONResponse HTTPError

func (response PostCategory409JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostCategory500JSONResponse HTTPError

func (response PostCategory500JSONResponse) VisitPostCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type MarkDeleteCategoryResponseObject interface {
	VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error
}

type MarkDeleteCategory204Response struct {
}

func (response MarkDeleteCategory204Response) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteCategory404JSONResponse HTTPError

func (response MarkDeleteCategory404JSONResponse) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteCategory500JSONResponse HTTPError

func (response MarkDeleteCategory500JSONResponse) VisitMarkDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type GetCategoryResponseObject interface {
	VisitGetCategoryResponse(w http.ResponseWriter) error
}

type GetCategory200JSONResponse Category

func (response GetCategory200JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory404JSONResponse HTTPError

func (response GetCategory404JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategory500JSONResponse HTTPError

func (response GetCategory500JSONResponse) VisitGetCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategoryRequestObject struct {
	CategoryId UUID                          `json:"category_id" bson:"category_id"`
	Body       *PatchCategoryJSONRequestBody `bson:"body"`
}

type PatchCategoryResponseObject interface {
	VisitPatchCategoryResponse(w http.ResponseWriter) error
}

type PatchCategory200JSONResponse Category

func (response PatchCategory200JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory400JSONResponse HTTPError

func (response PatchCategory400JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory401JSONResponse HTTPError

func (response PatchCategory401JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory403JSONResponse HTTPError

func (response PatchCategory403JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory404JSONResponse HTTPError

func (response PatchCategory404JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchCategory500JSONResponse HTTPError

func (response PatchCategory500JSONResponse) VisitPatchCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItemsRequestObject struct {
	CategoryId UUID                   `json:"category_id" bson:"category_id"`
	Params     GetCategoryItemsParams `bson:"params"`
}

type GetCategoryItemsResponseObject interface {
	VisitGetCategoryItemsResponse(w http.ResponseWriter) error
}

type GetCategoryItems200JSONResponse struct {
	Items   []Item `json:"items" bson:"items"`
	Limit   uint64 `json:"limit" bson:"limit"`
	MaxPage uint64 `json:"max_page" bson:"max_page"`
	Page    uint64 `json:"page" bson:"page"`
}

func (response GetCategoryItems200JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItems404JSONResponse HTTPError

func (response GetCategoryItems404JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryItems500JSONResponse HTTPError

func (response GetCategoryItems500JSONResponse) VisitGetCategoryItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PostItemRequestObject struct {
	CategoryId UUID                     `json:"category_id" bson:"category_id"`
	Body       *PostItemJSONRequestBody `bson:"body"`
}

type PostItemResponseObject interface {
	VisitPostItemResponse(w http.ResponseWriter) error
}

type PostItem201JSONResponse Item

func (response PostItem201JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type PostItem400JSONResponse HTTPError

func (response PostItem400JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PostItem401JSONResponse HTTPError

func (response PostItem401JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PostItem403JSONResponse HTTPError

func (response PostItem403JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PostItem409JSONResponse HTTPError

func (response PostItem409JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type PostItem500JSONResponse HTTPError

func (response PostItem500JSONResponse) VisitPostItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItemRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
	ItemId     UUID `json:"item_id" bson:"item_id"`
}

type MarkDeleteItemResponseObject interface {
	VisitMarkDeleteItemResponse(w http.ResponseWriter) error
}

type MarkDeleteItem204Response struct {
}

func (response MarkDeleteItem204Response) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type MarkDeleteItem401JSONResponse HTTPError

func (response MarkDeleteItem401JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem403JSONResponse HTTPError

func (response MarkDeleteItem403JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem404JSONResponse HTTPError

func (response MarkDeleteItem404JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkDeleteItem500JSONResponse HTTPError

func (response MarkDeleteItem500JSONResponse) VisitMarkDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type PatchItemRequestObject struct {
	CategoryId UUID                      `json:"category_id" bson:"category_id"`
	ItemId     UUID                      `json:"item_id" bson:"item_id"`
	Body       *PatchItemJSONRequestBody `bson:"body"`
}

type PatchItemResponseObject interface {
	VisitPatchItemResponse(w http.ResponseWriter) error
}

type PatchItem200JSONResponse Item

func (response PatchItem200JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem400JSONResponse HTTPError

func (response PatchItem400JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem401JSONResponse HTTPError

func (response PatchItem401JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem403JSONResponse HTTPError

func (response PatchItem403JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem404JSONResponse HTTPError

func (response PatchItem404JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type PatchItem500JSONResponse HTTPError

func (response PatchItem500JSONResponse) VisitPatchItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPictureRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
	ItemId     UUID `json:"item_id" bson:"item_id"`
}

type GetItemPictureResponseObject interface {
	VisitGetItemPictureResponse(w http.ResponseWriter) error
}

type GetItemPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetItemPicture200ImagepngResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetItemPicture404JSONResponse HTTPError

func (response GetItemPicture404JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetItemPicture500JSONResponse HTTPError

func (response GetItemPicture500JSONResponse) VisitGetItemPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPictureRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type GetCategoryPictureResponseObject interface {
	VisitGetCategoryPictureResponse(w http.ResponseWriter) error
}

type GetCategoryPicture200ImagepngResponse struct {
	Body          io.Reader `bson:"body"`
	ContentLength int64     `bson:"content_length"`
}

func (response GetCategoryPicture200ImagepngResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "image/png")
	if response.ContentLength != 0 {
		w.Header().Set("Content-Length", fmt.Sprint(response.ContentLength))
	}
	w.WriteHeader(200)

	if closer, ok := response.Body.(io.ReadCloser); ok {
		defer closer.Close()
	}
	_, err := io.Copy(w, response.Body)
	return err
}

type GetCategoryPicture404JSONResponse HTTPError

func (response GetCategoryPicture404JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetCategoryPicture500JSONResponse HTTPError

func (response GetCategoryPicture500JSONResponse) VisitGetCategoryPictureResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetCourseRequestObject struct {
	Params GetCourseParams `bson:"params"`
}

type GetCourseResponseObject interface {
	VisitGetCourseResponse(w http.ResponseWriter) error
}

type GetCourse200JSONResponse struct {
	Items []CourseItem `json:"items" bson:"items"`
}

func (response GetCourse200JSONResponse) VisitGetCourseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetCourse401JSONResponse HTTPError

func (response GetCourse401JSONResponse) VisitGetCourseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetCourse403JSONResponse HTTPError

func (response GetCourse403JSONResponse) VisitGetCourseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetCourse500JSONResponse HTTPError

func (response GetCourse500JSONResponse) VisitGetCourseResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccountsRequestObject struct {
	Params GetDeletedAccountsParams `bson:"params"`
}

type GetDeletedAccountsResponseObject interface {
	VisitGetDeletedAccountsResponse(w http.ResponseWriter) error
}

type GetDeletedAccounts200JSONResponse struct {
	Accounts []Account `json:"accounts" bson:"accounts"`
	Limit    uint64    `json:"limit" bson:"limit"`
	MaxPage  uint64    `json:"max_page" bson:"max_page"`
	Page     uint64    `json:"page" bson:"page"`
}

func (response GetDeletedAccounts200JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts401JSONResponse HTTPError

func (response GetDeletedAccounts401JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts403JSONResponse HTTPError

func (response GetDeletedAccounts403JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedAccounts500JSONResponse HTTPError

func (response GetDeletedAccounts500JSONResponse) VisitGetDeletedAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccountRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type DeleteAccountResponseObject interface {
	VisitDeleteAccountResponse(w http.ResponseWriter) error
}

type DeleteAccount204Response struct {
}

func (response DeleteAccount204Response) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteAccount401JSONResponse HTTPError

func (response DeleteAccount401JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount403JSONResponse HTTPError

func (response DeleteAccount403JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount404JSONResponse HTTPError

func (response DeleteAccount404JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount409JSONResponse HTTPError

func (response DeleteAccount409JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteAccount500JSONResponse HTTPError

func (response DeleteAccount500JSONResponse) VisitDeleteAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccountRequestObject struct {
	AccountId UUID `json:"account_id" bson:"account_id"`
}

type RestoreDeletedAccountResponseObject interface {
	VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error
}

type RestoreDeletedAccount204Response struct {
}

func (response RestoreDeletedAccount204Response) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedAccount400JSONResponse HTTPError

func (response RestoreDeletedAccount400JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount401JSONResponse HTTPError

func (response RestoreDeletedAccount401JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount403JSONResponse HTTPError

func (response RestoreDeletedAccount403JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount404JSONResponse HTTPError

func (response RestoreDeletedAccount404JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount409JSONResponse HTTPError

func (response RestoreDeletedAccount409JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedAccount500JSONResponse HTTPError

func (response RestoreDeletedAccount500JSONResponse) VisitRestoreDeletedAccountResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImagesRequestObject struct {
	Params GetDeletedCarouselImagesParams `bson:"params"`
}

type GetDeletedCarouselImagesResponseObject interface {
	VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error
}

type GetDeletedCarouselImages200JSONResponse struct {
	Items   []CarouselImage `json:"items" bson:"items"`
	Limit   uint64          `json:"limit" bson:"limit"`
	MaxPage uint64          `json:"max_page" bson:"max_page"`
	Page    uint64          `json:"page" bson:"page"`
}

func (response GetDeletedCarouselImages200JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages401JSONResponse HTTPError

func (response GetDeletedCarouselImages401JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages403JSONResponse HTTPError

func (response GetDeletedCarouselImages403JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselImages500JSONResponse HTTPError

func (response GetDeletedCarouselImages500JSONResponse) VisitGetDeletedCarouselImagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type DeleteCarouselImageResponseObject interface {
	VisitDeleteCarouselImageResponse(w http.ResponseWriter) error
}

type DeleteCarouselImage204Response struct {
}

func (response DeleteCarouselImage204Response) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselImage401JSONResponse HTTPError

func (response DeleteCarouselImage401JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage403JSONResponse HTTPError

func (response DeleteCarouselImage403JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage404JSONResponse HTTPError

func (response DeleteCarouselImage404JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage409JSONResponse HTTPError

func (response DeleteCarouselImage409JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselImage500JSONResponse HTTPError

func (response DeleteCarouselImage500JSONResponse) VisitDeleteCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImageRequestObject struct {
	ImageId UUID `json:"image_id" bson:"image_id"`
}

type RestoreDeletedCarouselImageResponseObject interface {
	VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error
}

type RestoreDeletedCarouselImage204Response struct {
}

func (response RestoreDeletedCarouselImage204Response) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCarouselImage400JSONResponse HTTPError

func (response RestoreDeletedCarouselImage400JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage401JSONResponse HTTPError

func (response RestoreDeletedCarouselImage401JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage403JSONResponse HTTPError

func (response RestoreDeletedCarouselImage403JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage404JSONResponse HTTPError

func (response RestoreDeletedCarouselImage404JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage409JSONResponse HTTPError

func (response RestoreDeletedCarouselImage409JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselImage500JSONResponse HTTPError

func (response RestoreDeletedCarouselImage500JSONResponse) VisitRestoreDeletedCarouselImageResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTextsRequestObject struct {
	Params GetDeletedCarouselTextsParams `bson:"params"`
}

type GetDeletedCarouselTextsResponseObject interface {
	VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error
}

type GetDeletedCarouselTexts200JSONResponse struct {
	Items   []CarouselText `json:"items" bson:"items"`
	Limit   uint64         `json:"limit" bson:"limit"`
	MaxPage uint64         `json:"max_page" bson:"max_page"`
	Page    uint64         `json:"page" bson:"page"`
}

func (response GetDeletedCarouselTexts200JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts401JSONResponse HTTPError

func (response GetDeletedCarouselTexts401JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts403JSONResponse HTTPError

func (response GetDeletedCarouselTexts403JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCarouselTexts500JSONResponse HTTPError

func (response GetDeletedCarouselTexts500JSONResponse) VisitGetDeletedCarouselTextsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type DeleteCarouselTextResponseObject interface {
	VisitDeleteCarouselTextResponse(w http.ResponseWriter) error
}

type DeleteCarouselText204Response struct {
}

func (response DeleteCarouselText204Response) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCarouselText401JSONResponse HTTPError

func (response DeleteCarouselText401JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText403JSONResponse HTTPError

func (response DeleteCarouselText403JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText404JSONResponse HTTPError

func (response DeleteCarouselText404JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText409JSONResponse HTTPError

func (response DeleteCarouselText409JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCarouselText500JSONResponse HTTPError

func (response DeleteCarouselText500JSONResponse) VisitDeleteCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselTextRequestObject struct {
	TextId UUID `json:"text_id" bson:"text_id"`
}

type RestoreDeletedCarouselTextResponseObject interface {
	VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error
}

type RestoreDeletedCarouselText204Response struct {
}

func (response RestoreDeletedCarouselText204Response) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCarouselText400JSONResponse HTTPError

func (response RestoreDeletedCarouselText400JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText401JSONResponse HTTPError

func (response RestoreDeletedCarouselText401JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText403JSONResponse HTTPError

func (response RestoreDeletedCarouselText403JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText404JSONResponse HTTPError

func (response RestoreDeletedCarouselText404JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText409JSONResponse HTTPError

func (response RestoreDeletedCarouselText409JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCarouselText500JSONResponse HTTPError

func (response RestoreDeletedCarouselText500JSONResponse) VisitRestoreDeletedCarouselTextResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategoriesRequestObject struct {
	Params GetDeletedCategoriesParams `bson:"params"`
}

type GetDeletedCategoriesResponseObject interface {
	VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error
}

type GetDeletedCategories200JSONResponse struct {
	Categories []Category `json:"categories" bson:"categories"`
	Limit      uint64     `json:"limit" bson:"limit"`
	MaxPage    uint64     `json:"max_page" bson:"max_page"`
	Page       uint64     `json:"page" bson:"page"`
}

func (response GetDeletedCategories200JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories401JSONResponse HTTPError

func (response GetDeletedCategories401JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories403JSONResponse HTTPError

func (response GetDeletedCategories403JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedCategories500JSONResponse HTTPError

func (response GetDeletedCategories500JSONResponse) VisitGetDeletedCategoriesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type DeleteCategoryResponseObject interface {
	VisitDeleteCategoryResponse(w http.ResponseWriter) error
}

type DeleteCategory204Response struct {
}

func (response DeleteCategory204Response) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteCategory401JSONResponse HTTPError

func (response DeleteCategory401JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory403JSONResponse HTTPError

func (response DeleteCategory403JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory404JSONResponse HTTPError

func (response DeleteCategory404JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory409JSONResponse HTTPError

func (response DeleteCategory409JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteCategory500JSONResponse HTTPError

func (response DeleteCategory500JSONResponse) VisitDeleteCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategoryRequestObject struct {
	CategoryId UUID `json:"category_id" bson:"category_id"`
}

type RestoreDeletedCategoryResponseObject interface {
	VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error
}

type RestoreDeletedCategory204Response struct {
}

func (response RestoreDeletedCategory204Response) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedCategory400JSONResponse HTTPError

func (response RestoreDeletedCategory400JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory401JSONResponse HTTPError

func (response RestoreDeletedCategory401JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory403JSONResponse HTTPError

func (response RestoreDeletedCategory403JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory404JSONResponse HTTPError

func (response RestoreDeletedCategory404JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory409JSONResponse HTTPError

func (response RestoreDeletedCategory409JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedCategory500JSONResponse HTTPError

func (response RestoreDeletedCategory500JSONResponse) VisitRestoreDeletedCategoryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItemsRequestObject struct {
	Params GetDeletedItemsParams `bson:"params"`
}

type GetDeletedItemsResponseObject interface {
	VisitGetDeletedItemsResponse(w http.ResponseWriter) error
}

type GetDeletedItems200JSONResponse struct {
	Items   []Item `json:"items" bson:"items"`
	Limit   uint64 `json:"limit" bson:"limit"`
	MaxPage uint64 `json:"max_page" bson:"max_page"`
	Page    uint64 `json:"page" bson:"page"`
}

func (response GetDeletedItems200JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems401JSONResponse HTTPError

func (response GetDeletedItems401JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems403JSONResponse HTTPError

func (response GetDeletedItems403JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedItems500JSONResponse HTTPError

func (response GetDeletedItems500JSONResponse) VisitGetDeletedItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItemRequestObject struct {
	ItemId UUID `json:"item_id" bson:"item_id"`
}

type DeleteItemResponseObject interface {
	VisitDeleteItemResponse(w http.ResponseWriter) error
}

type DeleteItem204Response struct {
}

func (response DeleteItem204Response) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteItem401JSONResponse HTTPError

func (response DeleteItem401JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem403JSONResponse HTTPError

func (response DeleteItem403JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem404JSONResponse HTTPError

func (response DeleteItem404JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem409JSONResponse HTTPError

func (response DeleteItem409JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteItem500JSONResponse HTTPError

func (response DeleteItem500JSONResponse) VisitDeleteItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItemRequestObject struct {
	ItemId UUID `json:"item_id" bson:"item_id"`
}

type RestoreDeletedItemResponseObject interface {
	VisitRestoreDeletedItemResponse(w http.ResponseWriter) error
}

type RestoreDeletedItem204Response struct {
}

func (response RestoreDeletedItem204Response) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedItem400JSONResponse HTTPError

func (response RestoreDeletedItem400JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem401JSONResponse HTTPError

func (response RestoreDeletedItem401JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem403JSONResponse HTTPError

func (response RestoreDeletedItem403JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem404JSONResponse HTTPError

func (response RestoreDeletedItem404JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem409JSONResponse HTTPError

func (response RestoreDeletedItem409JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedItem500JSONResponse HTTPError

func (response RestoreDeletedItem500JSONResponse) VisitRestoreDeletedItemResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefillsRequestObject struct {
	Params GetDeletedRefillsParams `bson:"params"`
}

type GetDeletedRefillsResponseObject interface {
	VisitGetDeletedRefillsResponse(w http.ResponseWriter) error
}

type GetDeletedRefills200JSONResponse struct {
	Limit   uint64   `json:"limit" bson:"limit"`
	MaxPage uint64   `json:"max_page" bson:"max_page"`
	Page    uint64   `json:"page" bson:"page"`
	Refills []Refill `json:"refills" bson:"refills"`
}

func (response GetDeletedRefills200JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills401JSONResponse HTTPError

func (response GetDeletedRefills401JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills403JSONResponse HTTPError

func (response GetDeletedRefills403JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedRefills500JSONResponse HTTPError

func (response GetDeletedRefills500JSONResponse) VisitGetDeletedRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefillRequestObject struct {
	RefillId UUID `json:"refill_id" bson:"refill_id"`
}

type DeleteRefillResponseObject interface {
	VisitDeleteRefillResponse(w http.ResponseWriter) error
}

type DeleteRefill204Response struct {
}

func (response DeleteRefill204Response) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRefill401JSONResponse HTTPError

func (response DeleteRefill401JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill403JSONResponse HTTPError

func (response DeleteRefill403JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill404JSONResponse HTTPError

func (response DeleteRefill404JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill409JSONResponse HTTPError

func (response DeleteRefill409JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRefill500JSONResponse HTTPError

func (response DeleteRefill500JSONResponse) VisitDeleteRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefillRequestObject struct {
	RefillId UUID `json:"refill_id" bson:"refill_id"`
}

type RestoreDeletedRefillResponseObject interface {
	VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error
}

type RestoreDeletedRefill204Response struct {
}

func (response RestoreDeletedRefill204Response) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedRefill400JSONResponse HTTPError

func (response RestoreDeletedRefill400JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill401JSONResponse HTTPError

func (response RestoreDeletedRefill401JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill403JSONResponse HTTPError

func (response RestoreDeletedRefill403JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill404JSONResponse HTTPError

func (response RestoreDeletedRefill404JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill409JSONResponse HTTPError

func (response RestoreDeletedRefill409JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedRefill500JSONResponse HTTPError

func (response RestoreDeletedRefill500JSONResponse) VisitRestoreDeletedRefillResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedStarringRequestObject struct {
	Params GetDeletedStarringParams `bson:"params"`
}

type GetDeletedStarringResponseObject interface {
	VisitGetDeletedStarringResponse(w http.ResponseWriter) error
}

type GetDeletedStarring200JSONResponse struct {
	Limit    uint64     `json:"limit" bson:"limit"`
	MaxPage  uint64     `json:"max_page" bson:"max_page"`
	Page     uint64     `json:"page" bson:"page"`
	Starring []Starring `json:"starring" bson:"starring"`
}

func (response GetDeletedStarring200JSONResponse) VisitGetDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedStarring401JSONResponse HTTPError

func (response GetDeletedStarring401JSONResponse) VisitGetDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedStarring403JSONResponse HTTPError

func (response GetDeletedStarring403JSONResponse) VisitGetDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedStarring500JSONResponse HTTPError

func (response GetDeletedStarring500JSONResponse) VisitGetDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarringRequestObject struct {
	StarringId UUID `json:"starring_id" bson:"starring_id"`
}

type DeleteStarringResponseObject interface {
	VisitDeleteStarringResponse(w http.ResponseWriter) error
}

type DeleteStarring204Response struct {
}

func (response DeleteStarring204Response) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteStarring401JSONResponse HTTPError

func (response DeleteStarring401JSONResponse) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarring403JSONResponse HTTPError

func (response DeleteStarring403JSONResponse) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarring404JSONResponse HTTPError

func (response DeleteStarring404JSONResponse) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarring409JSONResponse HTTPError

func (response DeleteStarring409JSONResponse) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteStarring500JSONResponse HTTPError

func (response DeleteStarring500JSONResponse) VisitDeleteStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarringRequestObject struct {
	StarringId UUID `json:"starring_id" bson:"starring_id"`
}

type RestoreDeletedStarringResponseObject interface {
	VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error
}

type RestoreDeletedStarring204Response struct {
}

func (response RestoreDeletedStarring204Response) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedStarring400JSONResponse HTTPError

func (response RestoreDeletedStarring400JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarring401JSONResponse HTTPError

func (response RestoreDeletedStarring401JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarring403JSONResponse HTTPError

func (response RestoreDeletedStarring403JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarring404JSONResponse HTTPError

func (response RestoreDeletedStarring404JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarring409JSONResponse HTTPError

func (response RestoreDeletedStarring409JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedStarring500JSONResponse HTTPError

func (response RestoreDeletedStarring500JSONResponse) VisitRestoreDeletedStarringResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactionsRequestObject struct {
	Params GetDeletedTransactionsParams `bson:"params"`
}

type GetDeletedTransactionsResponseObject interface {
	VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error
}

type GetDeletedTransactions200JSONResponse struct {
	Limit        uint64        `json:"limit" bson:"limit"`
	MaxPage      uint64        `json:"max_page" bson:"max_page"`
	Page         uint64        `json:"page" bson:"page"`
	Transactions []Transaction `json:"transactions" bson:"transactions"`
}

func (response GetDeletedTransactions200JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions401JSONResponse HTTPError

func (response GetDeletedTransactions401JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions403JSONResponse HTTPError

func (response GetDeletedTransactions403JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetDeletedTransactions500JSONResponse HTTPError

func (response GetDeletedTransactions500JSONResponse) VisitGetDeletedTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransactionRequestObject struct {
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type DeleteTransactionResponseObject interface {
	VisitDeleteTransactionResponse(w http.ResponseWriter) error
}

type DeleteTransaction204Response struct {
}

func (response DeleteTransaction204Response) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteTransaction401JSONResponse HTTPError

func (response DeleteTransaction401JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction403JSONResponse HTTPError

func (response DeleteTransaction403JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction404JSONResponse HTTPError

func (response DeleteTransaction404JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction409JSONResponse HTTPError

func (response DeleteTransaction409JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type DeleteTransaction500JSONResponse HTTPError

func (response DeleteTransaction500JSONResponse) VisitDeleteTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransactionRequestObject struct {
	TransactionId UUID `json:"transaction_id" bson:"transaction_id"`
}

type RestoreDeletedTransactionResponseObject interface {
	VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error
}

type RestoreDeletedTransaction204Response struct {
}

func (response RestoreDeletedTransaction204Response) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type RestoreDeletedTransaction400JSONResponse HTTPError

func (response RestoreDeletedTransaction400JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction401JSONResponse HTTPError

func (response RestoreDeletedTransaction401JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction403JSONResponse HTTPError

func (response RestoreDeletedTransaction403JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction404JSONResponse HTTPError

func (response RestoreDeletedTransaction404JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction409JSONResponse HTTPError

func (response RestoreDeletedTransaction409JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type RestoreDeletedTransaction500JSONResponse HTTPError

func (response RestoreDeletedTransaction500JSONResponse) VisitRestoreDeletedTransactionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccountsRequestObject struct {
	Body *multipart.Reader `bson:"body"`
}

type ImportAccountsResponseObject interface {
	VisitImportAccountsResponse(w http.ResponseWriter) error
}

type ImportAccounts200JSONResponse struct {
	Message     *Messages `json:"message,omitempty" bson:"message"`
	NotAccepted *[]string `json:"not_accepted,omitempty" bson:"not_accepted"`
}

func (response ImportAccounts200JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts400JSONResponse HTTPError

func (response ImportAccounts400JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts401JSONResponse HTTPError

func (response ImportAccounts401JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts403JSONResponse HTTPError

func (response ImportAccounts403JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts409JSONResponse HTTPError

func (response ImportAccounts409JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type ImportAccounts500JSONResponse HTTPError

func (response ImportAccounts500JSONResponse) VisitImportAccountsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItemsRequestObject struct {
	Params GetAllItemsParams `bson:"params"`
}

type GetAllItemsResponseObject interface {
	VisitGetAllItemsResponse(w http.ResponseWriter) error
}

type GetAllItems200JSONResponse struct {
	Items   []Item `json:"items" bson:"items"`
	Limit   uint64 `json:"limit" bson:"limit"`
	MaxPage uint64 `json:"max_page" bson:"max_page"`
	Page    uint64 `json:"page" bson:"page"`
}

func (response GetAllItems200JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItems403JSONResponse HTTPError

func (response GetAllItems403JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllItems500JSONResponse HTTPError

func (response GetAllItems500JSONResponse) VisitGetAllItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetAllIncoherentItemsRequestObject struct {
	Params GetAllIncoherentItemsParams `bson:"params"`
}

type GetAllIncoherentItemsResponseObject interface {
	VisitGetAllIncoherentItemsResponse(w http.ResponseWriter) error
}

type GetAllIncoherentItems200JSONResponse struct {
	Items   []Item `json:"items" bson:"items"`
	Limit   uint64 `json:"limit" bson:"limit"`
	MaxPage uint64 `json:"max_page" bson:"max_page"`
	Page    uint64 `json:"page" bson:"page"`
}

func (response GetAllIncoherentItems200JSONResponse) VisitGetAllIncoherentItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllIncoherentItems403JSONResponse HTTPError

func (response GetAllIncoherentItems403JSONResponse) VisitGetAllIncoherentItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetAllIncoherentItems500JSONResponse HTTPError

func (response GetAllIncoherentItems500JSONResponse) VisitGetAllIncoherentItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type LogoutRequestObject struct {
}

type LogoutResponseObject interface {
	VisitLogoutResponse(w http.ResponseWriter) error
}

type Logout204Response struct {
}

func (response Logout204Response) VisitLogoutResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type Logout401JSONResponse HTTPError

func (response Logout401JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Logout500JSONResponse HTTPError

func (response Logout500JSONResponse) VisitLogoutResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRefillsRequestObject struct {
	Params GetRefillsParams `bson:"params"`
}

type GetRefillsResponseObject interface {
	VisitGetRefillsResponse(w http.ResponseWriter) error
}

type GetRefills200JSONResponse struct {
	Limit   uint64   `json:"limit" bson:"limit"`
	MaxPage uint64   `json:"max_page" bson:"max_page"`
	Page    uint64   `json:"page" bson:"page"`
	Refills []Refill `json:"refills" bson:"refills"`
}

func (response GetRefills200JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills401JSONResponse HTTPError

func (response GetRefills401JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills403JSONResponse HTTPError

func (response GetRefills403JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRefills500JSONResponse HTTPError

func (response GetRefills500JSONResponse) VisitGetRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRemoteRefillsRequestObject struct {
	Params GetRemoteRefillsParams `bson:"params"`
}

type GetRemoteRefillsResponseObject interface {
	VisitGetRemoteRefillsResponse(w http.ResponseWriter) error
}

type GetRemoteRefills200JSONResponse struct {
	Limit         uint64         `json:"limit" bson:"limit"`
	MaxPage       uint64         `json:"max_page" bson:"max_page"`
	Page          uint64         `json:"page" bson:"page"`
	RemoteRefills []RemoteRefill `json:"remote_refills" bson:"remote_refills"`
}

func (response GetRemoteRefills200JSONResponse) VisitGetRemoteRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRemoteRefills401JSONResponse HTTPError

func (response GetRemoteRefills401JSONResponse) VisitGetRemoteRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRemoteRefills403JSONResponse HTTPError

func (response GetRemoteRefills403JSONResponse) VisitGetRemoteRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRemoteRefills500JSONResponse HTTPError

func (response GetRemoteRefills500JSONResponse) VisitGetRemoteRefillsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetRestocksRequestObject struct {
	Params GetRestocksParams `bson:"params"`
}

type GetRestocksResponseObject interface {
	VisitGetRestocksResponse(w http.ResponseWriter) error
}

type GetRestocks200JSONResponse struct {
	Limit    uint64    `json:"limit" bson:"limit"`
	MaxPage  uint64    `json:"max_page" bson:"max_page"`
	Page     uint64    `json:"page" bson:"page"`
	Restocks []Restock `json:"restocks" bson:"restocks"`
}

func (response GetRestocks200JSONResponse) VisitGetRestocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetRestocks400JSONResponse HTTPError

func (response GetRestocks400JSONResponse) VisitGetRestocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetRestocks401JSONResponse HTTPError

func (response GetRestocks401JSONResponse) VisitGetRestocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetRestocks403JSONResponse HTTPError

func (response GetRestocks403JSONResponse) VisitGetRestocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetRestocks500JSONResponse HTTPError

func (response GetRestocks500JSONResponse) VisitGetRestocksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestockRequestObject struct {
	Body *CreateRestockJSONRequestBody `bson:"body"`
}

type CreateRestockResponseObject interface {
	VisitCreateRestockResponse(w http.ResponseWriter) error
}

type CreateRestock201JSONResponse Restock

func (response CreateRestock201JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestock400JSONResponse HTTPError

func (response CreateRestock400JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestock401JSONResponse HTTPError

func (response CreateRestock401JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestock403JSONResponse HTTPError

func (response CreateRestock403JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestock409JSONResponse HTTPError

func (response CreateRestock409JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(409)

	return json.NewEncoder(w).Encode(response)
}

type CreateRestock500JSONResponse HTTPError

func (response CreateRestock500JSONResponse) VisitCreateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRestockRequestObject struct {
	RestockId UUID `json:"restock_id" bson:"restock_id"`
}

type DeleteRestockResponseObject interface {
	VisitDeleteRestockResponse(w http.ResponseWriter) error
}

type DeleteRestock204Response struct {
}

func (response DeleteRestock204Response) VisitDeleteRestockResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteRestock401JSONResponse HTTPError

func (response DeleteRestock401JSONResponse) VisitDeleteRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRestock403JSONResponse HTTPError

func (response DeleteRestock403JSONResponse) VisitDeleteRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRestock404JSONResponse HTTPError

func (response DeleteRestock404JSONResponse) VisitDeleteRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteRestock500JSONResponse HTTPError

func (response DeleteRestock500JSONResponse) VisitDeleteRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRestockRequestObject struct {
	RestockId UUID                          `json:"restock_id" bson:"restock_id"`
	Body      *UpdateRestockJSONRequestBody `bson:"body"`
}

type UpdateRestockResponseObject interface {
	VisitUpdateRestockResponse(w http.ResponseWriter) error
}

type UpdateRestock204Response struct {
}

func (response UpdateRestock204Response) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type UpdateRestock400JSONResponse HTTPError

func (response UpdateRestock400JSONResponse) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRestock401JSONResponse HTTPError

func (response UpdateRestock401JSONResponse) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRestock403JSONResponse HTTPError

func (response UpdateRestock403JSONResponse) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRestock404JSONResponse HTTPError

func (response UpdateRestock404JSONResponse) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type UpdateRestock500JSONResponse HTTPError

func (response UpdateRestock500JSONResponse) VisitUpdateRestockResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetStarringsRequestObject struct {
	Params GetStarringsParams `bson:"params"`
}

type GetStarringsResponseObject interface {
	VisitGetStarringsResponse(w http.ResponseWriter) error
}

type GetStarrings200JSONResponse struct {
	Limit   uint64     `json:"limit" bson:"limit"`
	MaxPage uint64     `json:"max_page" bson:"max_page"`
	Page    uint64     `json:"page" bson:"page"`
	Stars   []Starring `json:"stars" bson:"stars"`
}

func (response GetStarrings200JSONResponse) VisitGetStarringsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetStarrings401JSONResponse HTTPError

func (response GetStarrings401JSONResponse) VisitGetStarringsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetStarrings403JSONResponse HTTPError

func (response GetStarrings403JSONResponse) VisitGetStarringsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetStarrings500JSONResponse HTTPError

func (response GetStarrings500JSONResponse) VisitGetStarringsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsRequestObject struct {
	Params GetTransactionsParams `bson:"params"`
}

type GetTransactionsResponseObject interface {
	VisitGetTransactionsResponse(w http.ResponseWriter) error
}

type GetTransactions200JSONResponse struct {
	Limit        uint64        `json:"limit" bson:"limit"`
	MaxPage      uint64        `json:"max_page" bson:"max_page"`
	Page         uint64        `json:"page" bson:"page"`
	Transactions []Transaction `json:"transactions" bson:"transactions"`
}

func (response GetTransactions200JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions401JSONResponse HTTPError

func (response GetTransactions401JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions403JSONResponse HTTPError

func (response GetTransactions403JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactions500JSONResponse HTTPError

func (response GetTransactions500JSONResponse) VisitGetTransactionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsItemsRequestObject struct {
	Params GetTransactionsItemsParams `bson:"params"`
}

type GetTransactionsItemsResponseObject interface {
	VisitGetTransactionsItemsResponse(w http.ResponseWriter) error
}

type GetTransactionsItems200JSONResponse []TransactionItem

func (response GetTransactionsItems200JSONResponse) VisitGetTransactionsItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsItems401JSONResponse HTTPError

func (response GetTransactionsItems401JSONResponse) VisitGetTransactionsItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsItems403JSONResponse HTTPError

func (response GetTransactionsItems403JSONResponse) VisitGetTransactionsItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetTransactionsItems500JSONResponse HTTPError

func (response GetTransactionsItems500JSONResponse) VisitGetTransactionsItemsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {

	// (GET /account)
	GetAccount(ctx context.Context, request GetAccountRequestObject) (GetAccountResponseObject, error)

	// (GET /account/admin)
	GetAccountAdmin(ctx context.Context, request GetAccountAdminRequestObject) (GetAccountAdminResponseObject, error)

	// (PATCH /account/password)
	PatchAccountPassword(ctx context.Context, request PatchAccountPasswordRequestObject) (PatchAccountPasswordResponseObject, error)

	// (PATCH /account/pin)
	PatchAccountPin(ctx context.Context, request PatchAccountPinRequestObject) (PatchAccountPinResponseObject, error)

	// (GET /account/qr)
	GetAccountQRWebsocket(ctx context.Context, request GetAccountQRWebsocketRequestObject) (GetAccountQRWebsocketResponseObject, error)

	// (POST /account/qr)
	GetAccountQR(ctx context.Context, request GetAccountQRRequestObject) (GetAccountQRResponseObject, error)

	// (GET /account/refills)
	GetSelfRefills(ctx context.Context, request GetSelfRefillsRequestObject) (GetSelfRefillsResponseObject, error)

	// (POST /account/remote-refills/start)
	StartRemoteRefill(ctx context.Context, request StartRemoteRefillRequestObject) (StartRemoteRefillResponseObject, error)

	// (POST /account/remote-refills/validate)
	SelfValidateRemoteRefill(ctx context.Context, request SelfValidateRemoteRefillRequestObject) (SelfValidateRemoteRefillResponseObject, error)

	// (GET /account/stars)
	GetSelfStarring(ctx context.Context, request GetSelfStarringRequestObject) (GetSelfStarringResponseObject, error)

	// (GET /account/toggles/wants_to_staff)
	ToggleAccountWantsToStaff(ctx context.Context, request ToggleAccountWantsToStaffRequestObject) (ToggleAccountWantsToStaffResponseObject, error)

	// (GET /account/transactions)
	GetCurrentAccountTransactions(ctx context.Context, request GetCurrentAccountTransactionsRequestObject) (GetCurrentAccountTransactionsResponseObject, error)

	// (POST /account/transactions)
	PostTransactions(ctx context.Context, request PostTransactionsRequestObject) (PostTransactionsResponseObject, error)

	// (GET /account/watch)
	WatchAccount(ctx context.Context, request WatchAccountRequestObject) (WatchAccountResponseObject, error)

	// (POST /account/{account_id}/reset_pin)
	ResetAccountPin(ctx context.Context, request ResetAccountPinRequestObject) (ResetAccountPinResponseObject, error)

	// (GET /accounts)
	GetAccounts(ctx context.Context, request GetAccountsRequestObject) (GetAccountsResponseObject, error)

	// (POST /accounts)
	PostAccounts(ctx context.Context, request PostAccountsRequestObject) (PostAccountsResponseObject, error)

	// (DELETE /accounts/{account_id})
	MarkDeleteAccountId(ctx context.Context, request MarkDeleteAccountIdRequestObject) (MarkDeleteAccountIdResponseObject, error)

	// (GET /accounts/{account_id})
	GetAccountId(ctx context.Context, request GetAccountIdRequestObject) (GetAccountIdResponseObject, error)

	// (PATCH /accounts/{account_id})
	PatchAccountId(ctx context.Context, request PatchAccountIdRequestObject) (PatchAccountIdResponseObject, error)

	// (GET /accounts/{account_id}/refills)
	GetAccountRefills(ctx context.Context, request GetAccountRefillsRequestObject) (GetAccountRefillsResponseObject, error)

	// (POST /accounts/{account_id}/refills)
	PostRefill(ctx context.Context, request PostRefillRequestObject) (PostRefillResponseObject, error)

	// (DELETE /accounts/{account_id}/refills/{refill_id})
	MarkDeleteRefill(ctx context.Context, request MarkDeleteRefillRequestObject) (MarkDeleteRefillResponseObject, error)

	// (PATCH /accounts/{account_id}/refills/{refill_id})
	PatchRefillId(ctx context.Context, request PatchRefillIdRequestObject) (PatchRefillIdResponseObject, error)

	// (GET /accounts/{account_id}/stars)
	GetAccountStarring(ctx context.Context, request GetAccountStarringRequestObject) (GetAccountStarringResponseObject, error)

	// (POST /accounts/{account_id}/stars)
	PostStarring(ctx context.Context, request PostStarringRequestObject) (PostStarringResponseObject, error)

	// (DELETE /accounts/{account_id}/stars/{starring_id})
	MarkDeleteStarring(ctx context.Context, request MarkDeleteStarringRequestObject) (MarkDeleteStarringResponseObject, error)

	// (PATCH /accounts/{account_id}/stars/{starring_id})
	PatchStarringId(ctx context.Context, request PatchStarringIdRequestObject) (PatchStarringIdResponseObject, error)

	// (GET /accounts/{account_id}/toggles/wants_to_staff)
	AdminToggleAccountWantsToStaff(ctx context.Context, request AdminToggleAccountWantsToStaffRequestObject) (AdminToggleAccountWantsToStaffResponseObject, error)

	// (GET /accounts/{account_id}/transactions)
	GetAccountTransactions(ctx context.Context, request GetAccountTransactionsRequestObject) (GetAccountTransactionsResponseObject, error)

	// (DELETE /accounts/{account_id}/transactions/{transaction_id})
	MarkDeleteTransactionId(ctx context.Context, request MarkDeleteTransactionIdRequestObject) (MarkDeleteTransactionIdResponseObject, error)

	// (GET /accounts/{account_id}/transactions/{transaction_id})
	GetTransactionId(ctx context.Context, request GetTransactionIdRequestObject) (GetTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id})
	PatchTransactionId(ctx context.Context, request PatchTransactionIdRequestObject) (PatchTransactionIdResponseObject, error)

	// (PATCH /accounts/{account_id}/transactions/{transaction_id}/{item_id})
	PatchTransactionItemId(ctx context.Context, request PatchTransactionItemIdRequestObject) (PatchTransactionItemIdResponseObject, error)

	// (POST /auth/card)
	ConnectCard(ctx context.Context, request ConnectCardRequestObject) (ConnectCardResponseObject, error)

	// (GET /auth/google)
	ConnectGoogle(ctx context.Context, request ConnectGoogleRequestObject) (ConnectGoogleResponseObject, error)

	// (GET /auth/google/begin/{qr_nonce})
	ConnectAccount(ctx context.Context, request ConnectAccountRequestObject) (ConnectAccountResponseObject, error)

	// (GET /auth/google/callback)
	Callback(ctx context.Context, request CallbackRequestObject) (CallbackResponseObject, error)

	// (POST /auth/password)
	ConnectPassword(ctx context.Context, request ConnectPasswordRequestObject) (ConnectPasswordResponseObject, error)

	// (GET /auth/qr)
	GetBorneAuthQRWebsocket(ctx context.Context, request GetBorneAuthQRWebsocketRequestObject) (GetBorneAuthQRWebsocketResponseObject, error)

	// (POST /auth/qr)
	PostBorneAuthQR(ctx context.Context, request PostBorneAuthQRRequestObject) (PostBorneAuthQRResponseObject, error)

	// (GET /carousel/images)
	GetCarouselImages(ctx context.Context, request GetCarouselImagesRequestObject) (GetCarouselImagesResponseObject, error)

	// (POST /carousel/images)
	AddCarouselImage(ctx context.Context, request AddCarouselImageRequestObject) (AddCarouselImageResponseObject, error)

	// (DELETE /carousel/images/{image_id})
	MarkDeleteCarouselImage(ctx context.Context, request MarkDeleteCarouselImageRequestObject) (MarkDeleteCarouselImageResponseObject, error)

	// (GET /carousel/images/{image_id})
	GetCarouselImage(ctx context.Context, request GetCarouselImageRequestObject) (GetCarouselImageResponseObject, error)

	// (GET /carousel/texts)
	GetCarouselTexts(ctx context.Context, request GetCarouselTextsRequestObject) (GetCarouselTextsResponseObject, error)

	// (POST /carousel/texts)
	AddCarouselText(ctx context.Context, request AddCarouselTextRequestObject) (AddCarouselTextResponseObject, error)

	// (DELETE /carousel/texts/{text_id})
	MarkDeleteCarouselText(ctx context.Context, request MarkDeleteCarouselTextRequestObject) (MarkDeleteCarouselTextResponseObject, error)

	// (GET /cash_movements)
	GetCashMovements(ctx context.Context, request GetCashMovementsRequestObject) (GetCashMovementsResponseObject, error)

	// (POST /cash_movements)
	CreateCashMovement(ctx context.Context, request CreateCashMovementRequestObject) (CreateCashMovementResponseObject, error)

	// (DELETE /cash_movements/{cash_movement_id})
	DeleteCashMovement(ctx context.Context, request DeleteCashMovementRequestObject) (DeleteCashMovementResponseObject, error)

	// (GET /categories)
	GetCategories(ctx context.Context, request GetCategoriesRequestObject) (GetCategoriesResponseObject, error)

	// (POST /categories)
	PostCategory(ctx context.Context, request PostCategoryRequestObject) (PostCategoryResponseObject, error)

	// (DELETE /categories/{category_id})
	MarkDeleteCategory(ctx context.Context, request MarkDeleteCategoryRequestObject) (MarkDeleteCategoryResponseObject, error)

	// (GET /categories/{category_id})
	GetCategory(ctx context.Context, request GetCategoryRequestObject) (GetCategoryResponseObject, error)

	// (PATCH /categories/{category_id})
	PatchCategory(ctx context.Context, request PatchCategoryRequestObject) (PatchCategoryResponseObject, error)

	// (GET /categories/{category_id}/items)
	GetCategoryItems(ctx context.Context, request GetCategoryItemsRequestObject) (GetCategoryItemsResponseObject, error)

	// (POST /categories/{category_id}/items)
	PostItem(ctx context.Context, request PostItemRequestObject) (PostItemResponseObject, error)

	// (DELETE /categories/{category_id}/items/{item_id})
	MarkDeleteItem(ctx context.Context, request MarkDeleteItemRequestObject) (MarkDeleteItemResponseObject, error)

	// (PATCH /categories/{category_id}/items/{item_id})
	PatchItem(ctx context.Context, request PatchItemRequestObject) (PatchItemResponseObject, error)

	// (GET /categories/{category_id}/items/{item_id}/picture)
	GetItemPicture(ctx context.Context, request GetItemPictureRequestObject) (GetItemPictureResponseObject, error)

	// (GET /categories/{category_id}/picture)
	GetCategoryPicture(ctx context.Context, request GetCategoryPictureRequestObject) (GetCategoryPictureResponseObject, error)

	// (GET /course)
	GetCourse(ctx context.Context, request GetCourseRequestObject) (GetCourseResponseObject, error)

	// (GET /deleted/accounts)
	GetDeletedAccounts(ctx context.Context, request GetDeletedAccountsRequestObject) (GetDeletedAccountsResponseObject, error)

	// (DELETE /deleted/accounts/{account_id})
	DeleteAccount(ctx context.Context, request DeleteAccountRequestObject) (DeleteAccountResponseObject, error)

	// (PATCH /deleted/accounts/{account_id})
	RestoreDeletedAccount(ctx context.Context, request RestoreDeletedAccountRequestObject) (RestoreDeletedAccountResponseObject, error)

	// (GET /deleted/carousel/images)
	GetDeletedCarouselImages(ctx context.Context, request GetDeletedCarouselImagesRequestObject) (GetDeletedCarouselImagesResponseObject, error)

	// (DELETE /deleted/carousel/images/{image_id})
	DeleteCarouselImage(ctx context.Context, request DeleteCarouselImageRequestObject) (DeleteCarouselImageResponseObject, error)

	// (PATCH /deleted/carousel/images/{image_id})
	RestoreDeletedCarouselImage(ctx context.Context, request RestoreDeletedCarouselImageRequestObject) (RestoreDeletedCarouselImageResponseObject, error)

	// (GET /deleted/carousel/texts)
	GetDeletedCarouselTexts(ctx context.Context, request GetDeletedCarouselTextsRequestObject) (GetDeletedCarouselTextsResponseObject, error)

	// (DELETE /deleted/carousel/texts/{text_id})
	DeleteCarouselText(ctx context.Context, request DeleteCarouselTextRequestObject) (DeleteCarouselTextResponseObject, error)

	// (PATCH /deleted/carousel/texts/{text_id})
	RestoreDeletedCarouselText(ctx context.Context, request RestoreDeletedCarouselTextRequestObject) (RestoreDeletedCarouselTextResponseObject, error)

	// (GET /deleted/categories)
	GetDeletedCategories(ctx context.Context, request GetDeletedCategoriesRequestObject) (GetDeletedCategoriesResponseObject, error)

	// (DELETE /deleted/categories/{category_id})
	DeleteCategory(ctx context.Context, request DeleteCategoryRequestObject) (DeleteCategoryResponseObject, error)

	// (PATCH /deleted/categories/{category_id})
	RestoreDeletedCategory(ctx context.Context, request RestoreDeletedCategoryRequestObject) (RestoreDeletedCategoryResponseObject, error)

	// (GET /deleted/items)
	GetDeletedItems(ctx context.Context, request GetDeletedItemsRequestObject) (GetDeletedItemsResponseObject, error)

	// (DELETE /deleted/items/{item_id})
	DeleteItem(ctx context.Context, request DeleteItemRequestObject) (DeleteItemResponseObject, error)

	// (PATCH /deleted/items/{item_id})
	RestoreDeletedItem(ctx context.Context, request RestoreDeletedItemRequestObject) (RestoreDeletedItemResponseObject, error)

	// (GET /deleted/refills)
	GetDeletedRefills(ctx context.Context, request GetDeletedRefillsRequestObject) (GetDeletedRefillsResponseObject, error)

	// (DELETE /deleted/refills/{refill_id})
	DeleteRefill(ctx context.Context, request DeleteRefillRequestObject) (DeleteRefillResponseObject, error)

	// (PATCH /deleted/refills/{refill_id})
	RestoreDeletedRefill(ctx context.Context, request RestoreDeletedRefillRequestObject) (RestoreDeletedRefillResponseObject, error)

	// (GET /deleted/stars)
	GetDeletedStarring(ctx context.Context, request GetDeletedStarringRequestObject) (GetDeletedStarringResponseObject, error)

	// (DELETE /deleted/stars/{starring_id})
	DeleteStarring(ctx context.Context, request DeleteStarringRequestObject) (DeleteStarringResponseObject, error)

	// (PATCH /deleted/stars/{starring_id})
	RestoreDeletedStarring(ctx context.Context, request RestoreDeletedStarringRequestObject) (RestoreDeletedStarringResponseObject, error)

	// (GET /deleted/transactions)
	GetDeletedTransactions(ctx context.Context, request GetDeletedTransactionsRequestObject) (GetDeletedTransactionsResponseObject, error)

	// (DELETE /deleted/transactions/{transaction_id})
	DeleteTransaction(ctx context.Context, request DeleteTransactionRequestObject) (DeleteTransactionResponseObject, error)

	// (PATCH /deleted/transactions/{transaction_id})
	RestoreDeletedTransaction(ctx context.Context, request RestoreDeletedTransactionRequestObject) (RestoreDeletedTransactionResponseObject, error)

	// (POST /import/accounts)
	ImportAccounts(ctx context.Context, request ImportAccountsRequestObject) (ImportAccountsResponseObject, error)

	// (GET /items)
	GetAllItems(ctx context.Context, request GetAllItemsRequestObject) (GetAllItemsResponseObject, error)

	// (GET /items/incoherent)
	GetAllIncoherentItems(ctx context.Context, request GetAllIncoherentItemsRequestObject) (GetAllIncoherentItemsResponseObject, error)

	// (GET /logout)
	Logout(ctx context.Context, request LogoutRequestObject) (LogoutResponseObject, error)

	// (GET /refills)
	GetRefills(ctx context.Context, request GetRefillsRequestObject) (GetRefillsResponseObject, error)

	// (GET /remote-refills)
	GetRemoteRefills(ctx context.Context, request GetRemoteRefillsRequestObject) (GetRemoteRefillsResponseObject, error)

	// (GET /restocks)
	GetRestocks(ctx context.Context, request GetRestocksRequestObject) (GetRestocksResponseObject, error)

	// (POST /restocks)
	CreateRestock(ctx context.Context, request CreateRestockRequestObject) (CreateRestockResponseObject, error)

	// (DELETE /restocks/{restock_id})
	DeleteRestock(ctx context.Context, request DeleteRestockRequestObject) (DeleteRestockResponseObject, error)

	// (PATCH /restocks/{restock_id})
	UpdateRestock(ctx context.Context, request UpdateRestockRequestObject) (UpdateRestockResponseObject, error)

	// (GET /stars)
	GetStarrings(ctx context.Context, request GetStarringsRequestObject) (GetStarringsResponseObject, error)

	// (GET /transactions)
	GetTransactions(ctx context.Context, request GetTransactionsRequestObject) (GetTransactionsResponseObject, error)

	// (GET /transactions/items)
	GetTransactionsItems(ctx context.Context, request GetTransactionsItemsRequestObject) (GetTransactionsItemsResponseObject, error)
}

type StrictHandlerFunc = strictecho.StrictEchoHandlerFunc
type StrictMiddlewareFunc = strictecho.StrictEchoMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface  `bson:"ssi"`
	middlewares []StrictMiddlewareFunc `bson:"middlewares"`
}

// GetAccount operation middleware
func (sh *strictHandler) GetAccount(ctx echo.Context) error {
	var request GetAccountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccount(ctx.Request().Context(), request.(GetAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountResponseObject); ok {
		return validResponse.VisitGetAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountAdmin operation middleware
func (sh *strictHandler) GetAccountAdmin(ctx echo.Context) error {
	var request GetAccountAdminRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountAdmin(ctx.Request().Context(), request.(GetAccountAdminRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountAdmin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountAdminResponseObject); ok {
		return validResponse.VisitGetAccountAdminResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchAccountPassword operation middleware
func (sh *strictHandler) PatchAccountPassword(ctx echo.Context) error {
	var request PatchAccountPasswordRequestObject

	var body PatchAccountPasswordJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccountPassword(ctx.Request().Context(), request.(PatchAccountPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccountPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountPasswordResponseObject); ok {
		return validResponse.VisitPatchAccountPasswordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchAccountPin operation middleware
func (sh *strictHandler) PatchAccountPin(ctx echo.Context) error {
	var request PatchAccountPinRequestObject

	var body PatchAccountPinJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccountPin(ctx.Request().Context(), request.(PatchAccountPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccountPin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountPinResponseObject); ok {
		return validResponse.VisitPatchAccountPinResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountQRWebsocket operation middleware
func (sh *strictHandler) GetAccountQRWebsocket(ctx echo.Context) error {
	var request GetAccountQRWebsocketRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountQRWebsocket(ctx.Request().Context(), request.(GetAccountQRWebsocketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountQRWebsocket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountQRWebsocketResponseObject); ok {
		return validResponse.VisitGetAccountQRWebsocketResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountQR operation middleware
func (sh *strictHandler) GetAccountQR(ctx echo.Context) error {
	var request GetAccountQRRequestObject

	var body GetAccountQRJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountQR(ctx.Request().Context(), request.(GetAccountQRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountQR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountQRResponseObject); ok {
		return validResponse.VisitGetAccountQRResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSelfRefills operation middleware
func (sh *strictHandler) GetSelfRefills(ctx echo.Context, params GetSelfRefillsParams) error {
	var request GetSelfRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSelfRefills(ctx.Request().Context(), request.(GetSelfRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSelfRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSelfRefillsResponseObject); ok {
		return validResponse.VisitGetSelfRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// StartRemoteRefill operation middleware
func (sh *strictHandler) StartRemoteRefill(ctx echo.Context, params StartRemoteRefillParams) error {
	var request StartRemoteRefillRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.StartRemoteRefill(ctx.Request().Context(), request.(StartRemoteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "StartRemoteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(StartRemoteRefillResponseObject); ok {
		return validResponse.VisitStartRemoteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SelfValidateRemoteRefill operation middleware
func (sh *strictHandler) SelfValidateRemoteRefill(ctx echo.Context, params SelfValidateRemoteRefillParams) error {
	var request SelfValidateRemoteRefillRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SelfValidateRemoteRefill(ctx.Request().Context(), request.(SelfValidateRemoteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SelfValidateRemoteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SelfValidateRemoteRefillResponseObject); ok {
		return validResponse.VisitSelfValidateRemoteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetSelfStarring operation middleware
func (sh *strictHandler) GetSelfStarring(ctx echo.Context, params GetSelfStarringParams) error {
	var request GetSelfStarringRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetSelfStarring(ctx.Request().Context(), request.(GetSelfStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSelfStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetSelfStarringResponseObject); ok {
		return validResponse.VisitGetSelfStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ToggleAccountWantsToStaff operation middleware
func (sh *strictHandler) ToggleAccountWantsToStaff(ctx echo.Context) error {
	var request ToggleAccountWantsToStaffRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ToggleAccountWantsToStaff(ctx.Request().Context(), request.(ToggleAccountWantsToStaffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ToggleAccountWantsToStaff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ToggleAccountWantsToStaffResponseObject); ok {
		return validResponse.VisitToggleAccountWantsToStaffResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCurrentAccountTransactions operation middleware
func (sh *strictHandler) GetCurrentAccountTransactions(ctx echo.Context, params GetCurrentAccountTransactionsParams) error {
	var request GetCurrentAccountTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCurrentAccountTransactions(ctx.Request().Context(), request.(GetCurrentAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCurrentAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCurrentAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetCurrentAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTransactions operation middleware
func (sh *strictHandler) PostTransactions(ctx echo.Context) error {
	var request PostTransactionsRequestObject

	var body PostTransactionsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostTransactions(ctx.Request().Context(), request.(PostTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostTransactionsResponseObject); ok {
		return validResponse.VisitPostTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// WatchAccount operation middleware
func (sh *strictHandler) WatchAccount(ctx echo.Context) error {
	var request WatchAccountRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.WatchAccount(ctx.Request().Context(), request.(WatchAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "WatchAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(WatchAccountResponseObject); ok {
		return validResponse.VisitWatchAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ResetAccountPin operation middleware
func (sh *strictHandler) ResetAccountPin(ctx echo.Context, accountId UUID) error {
	var request ResetAccountPinRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ResetAccountPin(ctx.Request().Context(), request.(ResetAccountPinRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ResetAccountPin")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ResetAccountPinResponseObject); ok {
		return validResponse.VisitResetAccountPinResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccounts operation middleware
func (sh *strictHandler) GetAccounts(ctx echo.Context, params GetAccountsParams) error {
	var request GetAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccounts(ctx.Request().Context(), request.(GetAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountsResponseObject); ok {
		return validResponse.VisitGetAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostAccounts operation middleware
func (sh *strictHandler) PostAccounts(ctx echo.Context) error {
	var request PostAccountsRequestObject

	var body PostAccountsJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostAccounts(ctx.Request().Context(), request.(PostAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostAccountsResponseObject); ok {
		return validResponse.VisitPostAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteAccountId operation middleware
func (sh *strictHandler) MarkDeleteAccountId(ctx echo.Context, accountId UUID) error {
	var request MarkDeleteAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteAccountId(ctx.Request().Context(), request.(MarkDeleteAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteAccountIdResponseObject); ok {
		return validResponse.VisitMarkDeleteAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountId operation middleware
func (sh *strictHandler) GetAccountId(ctx echo.Context, accountId UUID) error {
	var request GetAccountIdRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountId(ctx.Request().Context(), request.(GetAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountIdResponseObject); ok {
		return validResponse.VisitGetAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchAccountId operation middleware
func (sh *strictHandler) PatchAccountId(ctx echo.Context, accountId UUID) error {
	var request PatchAccountIdRequestObject

	request.AccountId = accountId

	var body PatchAccountIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchAccountId(ctx.Request().Context(), request.(PatchAccountIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchAccountId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchAccountIdResponseObject); ok {
		return validResponse.VisitPatchAccountIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountRefills operation middleware
func (sh *strictHandler) GetAccountRefills(ctx echo.Context, accountId string, params GetAccountRefillsParams) error {
	var request GetAccountRefillsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountRefills(ctx.Request().Context(), request.(GetAccountRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountRefillsResponseObject); ok {
		return validResponse.VisitGetAccountRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostRefill operation middleware
func (sh *strictHandler) PostRefill(ctx echo.Context, accountId string, params PostRefillParams) error {
	var request PostRefillRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostRefill(ctx.Request().Context(), request.(PostRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostRefillResponseObject); ok {
		return validResponse.VisitPostRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteRefill operation middleware
func (sh *strictHandler) MarkDeleteRefill(ctx echo.Context, accountId UUID, refillId UUID) error {
	var request MarkDeleteRefillRequestObject

	request.AccountId = accountId
	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteRefill(ctx.Request().Context(), request.(MarkDeleteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteRefillResponseObject); ok {
		return validResponse.VisitMarkDeleteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchRefillId operation middleware
func (sh *strictHandler) PatchRefillId(ctx echo.Context, accountId UUID, refillId UUID, params PatchRefillIdParams) error {
	var request PatchRefillIdRequestObject

	request.AccountId = accountId
	request.RefillId = refillId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchRefillId(ctx.Request().Context(), request.(PatchRefillIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchRefillId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchRefillIdResponseObject); ok {
		return validResponse.VisitPatchRefillIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountStarring operation middleware
func (sh *strictHandler) GetAccountStarring(ctx echo.Context, accountId string, params GetAccountStarringParams) error {
	var request GetAccountStarringRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountStarring(ctx.Request().Context(), request.(GetAccountStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountStarringResponseObject); ok {
		return validResponse.VisitGetAccountStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostStarring operation middleware
func (sh *strictHandler) PostStarring(ctx echo.Context, accountId string, params PostStarringParams) error {
	var request PostStarringRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostStarring(ctx.Request().Context(), request.(PostStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostStarringResponseObject); ok {
		return validResponse.VisitPostStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteStarring operation middleware
func (sh *strictHandler) MarkDeleteStarring(ctx echo.Context, accountId UUID, starringId UUID) error {
	var request MarkDeleteStarringRequestObject

	request.AccountId = accountId
	request.StarringId = starringId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteStarring(ctx.Request().Context(), request.(MarkDeleteStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteStarringResponseObject); ok {
		return validResponse.VisitMarkDeleteStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchStarringId operation middleware
func (sh *strictHandler) PatchStarringId(ctx echo.Context, accountId UUID, starringId UUID, params PatchStarringIdParams) error {
	var request PatchStarringIdRequestObject

	request.AccountId = accountId
	request.StarringId = starringId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchStarringId(ctx.Request().Context(), request.(PatchStarringIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchStarringId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchStarringIdResponseObject); ok {
		return validResponse.VisitPatchStarringIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AdminToggleAccountWantsToStaff operation middleware
func (sh *strictHandler) AdminToggleAccountWantsToStaff(ctx echo.Context, accountId UUID) error {
	var request AdminToggleAccountWantsToStaffRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AdminToggleAccountWantsToStaff(ctx.Request().Context(), request.(AdminToggleAccountWantsToStaffRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AdminToggleAccountWantsToStaff")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AdminToggleAccountWantsToStaffResponseObject); ok {
		return validResponse.VisitAdminToggleAccountWantsToStaffResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAccountTransactions operation middleware
func (sh *strictHandler) GetAccountTransactions(ctx echo.Context, accountId UUID, params GetAccountTransactionsParams) error {
	var request GetAccountTransactionsRequestObject

	request.AccountId = accountId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAccountTransactions(ctx.Request().Context(), request.(GetAccountTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAccountTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAccountTransactionsResponseObject); ok {
		return validResponse.VisitGetAccountTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteTransactionId operation middleware
func (sh *strictHandler) MarkDeleteTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error {
	var request MarkDeleteTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteTransactionId(ctx.Request().Context(), request.(MarkDeleteTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteTransactionIdResponseObject); ok {
		return validResponse.VisitMarkDeleteTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTransactionId operation middleware
func (sh *strictHandler) GetTransactionId(ctx echo.Context, accountId UUID, transactionId UUID) error {
	var request GetTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionId(ctx.Request().Context(), request.(GetTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionIdResponseObject); ok {
		return validResponse.VisitGetTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionId operation middleware
func (sh *strictHandler) PatchTransactionId(ctx echo.Context, accountId UUID, transactionId UUID, params PatchTransactionIdParams) error {
	var request PatchTransactionIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionId(ctx.Request().Context(), request.(PatchTransactionIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionIdResponseObject); ok {
		return validResponse.VisitPatchTransactionIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTransactionItemId operation middleware
func (sh *strictHandler) PatchTransactionItemId(ctx echo.Context, accountId UUID, transactionId UUID, itemId UUID, params PatchTransactionItemIdParams) error {
	var request PatchTransactionItemIdRequestObject

	request.AccountId = accountId
	request.TransactionId = transactionId
	request.ItemId = itemId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTransactionItemId(ctx.Request().Context(), request.(PatchTransactionItemIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTransactionItemId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchTransactionItemIdResponseObject); ok {
		return validResponse.VisitPatchTransactionItemIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectCard operation middleware
func (sh *strictHandler) ConnectCard(ctx echo.Context) error {
	var request ConnectCardRequestObject

	var body ConnectCardJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectCard(ctx.Request().Context(), request.(ConnectCardRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectCard")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectCardResponseObject); ok {
		return validResponse.VisitConnectCardResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectGoogle operation middleware
func (sh *strictHandler) ConnectGoogle(ctx echo.Context, params ConnectGoogleParams) error {
	var request ConnectGoogleRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectGoogle(ctx.Request().Context(), request.(ConnectGoogleRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectGoogle")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectGoogleResponseObject); ok {
		return validResponse.VisitConnectGoogleResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectAccount operation middleware
func (sh *strictHandler) ConnectAccount(ctx echo.Context, qrNonce string) error {
	var request ConnectAccountRequestObject

	request.QrNonce = qrNonce

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectAccount(ctx.Request().Context(), request.(ConnectAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectAccountResponseObject); ok {
		return validResponse.VisitConnectAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Callback operation middleware
func (sh *strictHandler) Callback(ctx echo.Context, params CallbackParams) error {
	var request CallbackRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Callback(ctx.Request().Context(), request.(CallbackRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Callback")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CallbackResponseObject); ok {
		return validResponse.VisitCallbackResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ConnectPassword operation middleware
func (sh *strictHandler) ConnectPassword(ctx echo.Context) error {
	var request ConnectPasswordRequestObject

	var body ConnectPasswordJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ConnectPassword(ctx.Request().Context(), request.(ConnectPasswordRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ConnectPassword")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ConnectPasswordResponseObject); ok {
		return validResponse.VisitConnectPasswordResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetBorneAuthQRWebsocket operation middleware
func (sh *strictHandler) GetBorneAuthQRWebsocket(ctx echo.Context) error {
	var request GetBorneAuthQRWebsocketRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetBorneAuthQRWebsocket(ctx.Request().Context(), request.(GetBorneAuthQRWebsocketRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetBorneAuthQRWebsocket")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetBorneAuthQRWebsocketResponseObject); ok {
		return validResponse.VisitGetBorneAuthQRWebsocketResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostBorneAuthQR operation middleware
func (sh *strictHandler) PostBorneAuthQR(ctx echo.Context) error {
	var request PostBorneAuthQRRequestObject

	var body PostBorneAuthQRJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostBorneAuthQR(ctx.Request().Context(), request.(PostBorneAuthQRRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostBorneAuthQR")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostBorneAuthQRResponseObject); ok {
		return validResponse.VisitPostBorneAuthQRResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselImages operation middleware
func (sh *strictHandler) GetCarouselImages(ctx echo.Context) error {
	var request GetCarouselImagesRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselImages(ctx.Request().Context(), request.(GetCarouselImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselImagesResponseObject); ok {
		return validResponse.VisitGetCarouselImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselImage operation middleware
func (sh *strictHandler) AddCarouselImage(ctx echo.Context) error {
	var request AddCarouselImageRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselImage(ctx.Request().Context(), request.(AddCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselImageResponseObject); ok {
		return validResponse.VisitAddCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCarouselImage operation middleware
func (sh *strictHandler) MarkDeleteCarouselImage(ctx echo.Context, imageId UUID) error {
	var request MarkDeleteCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCarouselImage(ctx.Request().Context(), request.(MarkDeleteCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCarouselImageResponseObject); ok {
		return validResponse.VisitMarkDeleteCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselImage operation middleware
func (sh *strictHandler) GetCarouselImage(ctx echo.Context, imageId UUID) error {
	var request GetCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselImage(ctx.Request().Context(), request.(GetCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselImageResponseObject); ok {
		return validResponse.VisitGetCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCarouselTexts operation middleware
func (sh *strictHandler) GetCarouselTexts(ctx echo.Context) error {
	var request GetCarouselTextsRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCarouselTexts(ctx.Request().Context(), request.(GetCarouselTextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCarouselTexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCarouselTextsResponseObject); ok {
		return validResponse.VisitGetCarouselTextsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddCarouselText operation middleware
func (sh *strictHandler) AddCarouselText(ctx echo.Context) error {
	var request AddCarouselTextRequestObject

	var body AddCarouselTextJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.AddCarouselText(ctx.Request().Context(), request.(AddCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddCarouselTextResponseObject); ok {
		return validResponse.VisitAddCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCarouselText operation middleware
func (sh *strictHandler) MarkDeleteCarouselText(ctx echo.Context, textId UUID) error {
	var request MarkDeleteCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCarouselText(ctx.Request().Context(), request.(MarkDeleteCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCarouselTextResponseObject); ok {
		return validResponse.VisitMarkDeleteCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCashMovements operation middleware
func (sh *strictHandler) GetCashMovements(ctx echo.Context, params GetCashMovementsParams) error {
	var request GetCashMovementsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCashMovements(ctx.Request().Context(), request.(GetCashMovementsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCashMovements")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCashMovementsResponseObject); ok {
		return validResponse.VisitGetCashMovementsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateCashMovement operation middleware
func (sh *strictHandler) CreateCashMovement(ctx echo.Context) error {
	var request CreateCashMovementRequestObject

	var body CreateCashMovementJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateCashMovement(ctx.Request().Context(), request.(CreateCashMovementRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateCashMovement")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateCashMovementResponseObject); ok {
		return validResponse.VisitCreateCashMovementResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCashMovement operation middleware
func (sh *strictHandler) DeleteCashMovement(ctx echo.Context, cashMovementId UUID) error {
	var request DeleteCashMovementRequestObject

	request.CashMovementId = cashMovementId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCashMovement(ctx.Request().Context(), request.(DeleteCashMovementRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCashMovement")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCashMovementResponseObject); ok {
		return validResponse.VisitDeleteCashMovementResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCategories operation middleware
func (sh *strictHandler) GetCategories(ctx echo.Context, params GetCategoriesParams) error {
	var request GetCategoriesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategories(ctx.Request().Context(), request.(GetCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoriesResponseObject); ok {
		return validResponse.VisitGetCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostCategory operation middleware
func (sh *strictHandler) PostCategory(ctx echo.Context) error {
	var request PostCategoryRequestObject

	var body PostCategoryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostCategory(ctx.Request().Context(), request.(PostCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostCategoryResponseObject); ok {
		return validResponse.VisitPostCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteCategory operation middleware
func (sh *strictHandler) MarkDeleteCategory(ctx echo.Context, categoryId UUID) error {
	var request MarkDeleteCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteCategory(ctx.Request().Context(), request.(MarkDeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteCategoryResponseObject); ok {
		return validResponse.VisitMarkDeleteCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCategory operation middleware
func (sh *strictHandler) GetCategory(ctx echo.Context, categoryId UUID) error {
	var request GetCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategory(ctx.Request().Context(), request.(GetCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryResponseObject); ok {
		return validResponse.VisitGetCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchCategory operation middleware
func (sh *strictHandler) PatchCategory(ctx echo.Context, categoryId UUID) error {
	var request PatchCategoryRequestObject

	request.CategoryId = categoryId

	var body PatchCategoryJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchCategory(ctx.Request().Context(), request.(PatchCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchCategoryResponseObject); ok {
		return validResponse.VisitPatchCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCategoryItems operation middleware
func (sh *strictHandler) GetCategoryItems(ctx echo.Context, categoryId UUID, params GetCategoryItemsParams) error {
	var request GetCategoryItemsRequestObject

	request.CategoryId = categoryId
	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryItems(ctx.Request().Context(), request.(GetCategoryItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryItemsResponseObject); ok {
		return validResponse.VisitGetCategoryItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostItem operation middleware
func (sh *strictHandler) PostItem(ctx echo.Context, categoryId UUID) error {
	var request PostItemRequestObject

	request.CategoryId = categoryId

	var body PostItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostItem(ctx.Request().Context(), request.(PostItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostItemResponseObject); ok {
		return validResponse.VisitPostItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkDeleteItem operation middleware
func (sh *strictHandler) MarkDeleteItem(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request MarkDeleteItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.MarkDeleteItem(ctx.Request().Context(), request.(MarkDeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkDeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkDeleteItemResponseObject); ok {
		return validResponse.VisitMarkDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchItem operation middleware
func (sh *strictHandler) PatchItem(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request PatchItemRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	var body PatchItemJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchItem(ctx.Request().Context(), request.(PatchItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchItemResponseObject); ok {
		return validResponse.VisitPatchItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetItemPicture operation middleware
func (sh *strictHandler) GetItemPicture(ctx echo.Context, categoryId UUID, itemId UUID) error {
	var request GetItemPictureRequestObject

	request.CategoryId = categoryId
	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetItemPicture(ctx.Request().Context(), request.(GetItemPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetItemPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetItemPictureResponseObject); ok {
		return validResponse.VisitGetItemPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCategoryPicture operation middleware
func (sh *strictHandler) GetCategoryPicture(ctx echo.Context, categoryId UUID) error {
	var request GetCategoryPictureRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCategoryPicture(ctx.Request().Context(), request.(GetCategoryPictureRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCategoryPicture")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCategoryPictureResponseObject); ok {
		return validResponse.VisitGetCategoryPictureResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetCourse operation middleware
func (sh *strictHandler) GetCourse(ctx echo.Context, params GetCourseParams) error {
	var request GetCourseRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetCourse(ctx.Request().Context(), request.(GetCourseRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetCourse")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetCourseResponseObject); ok {
		return validResponse.VisitGetCourseResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedAccounts operation middleware
func (sh *strictHandler) GetDeletedAccounts(ctx echo.Context, params GetDeletedAccountsParams) error {
	var request GetDeletedAccountsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedAccounts(ctx.Request().Context(), request.(GetDeletedAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedAccountsResponseObject); ok {
		return validResponse.VisitGetDeletedAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteAccount operation middleware
func (sh *strictHandler) DeleteAccount(ctx echo.Context, accountId UUID) error {
	var request DeleteAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteAccount(ctx.Request().Context(), request.(DeleteAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteAccountResponseObject); ok {
		return validResponse.VisitDeleteAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedAccount operation middleware
func (sh *strictHandler) RestoreDeletedAccount(ctx echo.Context, accountId UUID) error {
	var request RestoreDeletedAccountRequestObject

	request.AccountId = accountId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedAccount(ctx.Request().Context(), request.(RestoreDeletedAccountRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedAccount")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedAccountResponseObject); ok {
		return validResponse.VisitRestoreDeletedAccountResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCarouselImages operation middleware
func (sh *strictHandler) GetDeletedCarouselImages(ctx echo.Context, params GetDeletedCarouselImagesParams) error {
	var request GetDeletedCarouselImagesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCarouselImages(ctx.Request().Context(), request.(GetDeletedCarouselImagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCarouselImages")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCarouselImagesResponseObject); ok {
		return validResponse.VisitGetDeletedCarouselImagesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselImage operation middleware
func (sh *strictHandler) DeleteCarouselImage(ctx echo.Context, imageId UUID) error {
	var request DeleteCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselImage(ctx.Request().Context(), request.(DeleteCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselImageResponseObject); ok {
		return validResponse.VisitDeleteCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCarouselImage operation middleware
func (sh *strictHandler) RestoreDeletedCarouselImage(ctx echo.Context, imageId UUID) error {
	var request RestoreDeletedCarouselImageRequestObject

	request.ImageId = imageId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCarouselImage(ctx.Request().Context(), request.(RestoreDeletedCarouselImageRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCarouselImage")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCarouselImageResponseObject); ok {
		return validResponse.VisitRestoreDeletedCarouselImageResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCarouselTexts operation middleware
func (sh *strictHandler) GetDeletedCarouselTexts(ctx echo.Context, params GetDeletedCarouselTextsParams) error {
	var request GetDeletedCarouselTextsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCarouselTexts(ctx.Request().Context(), request.(GetDeletedCarouselTextsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCarouselTexts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCarouselTextsResponseObject); ok {
		return validResponse.VisitGetDeletedCarouselTextsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCarouselText operation middleware
func (sh *strictHandler) DeleteCarouselText(ctx echo.Context, textId UUID) error {
	var request DeleteCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCarouselText(ctx.Request().Context(), request.(DeleteCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCarouselTextResponseObject); ok {
		return validResponse.VisitDeleteCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCarouselText operation middleware
func (sh *strictHandler) RestoreDeletedCarouselText(ctx echo.Context, textId UUID) error {
	var request RestoreDeletedCarouselTextRequestObject

	request.TextId = textId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCarouselText(ctx.Request().Context(), request.(RestoreDeletedCarouselTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCarouselText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCarouselTextResponseObject); ok {
		return validResponse.VisitRestoreDeletedCarouselTextResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedCategories operation middleware
func (sh *strictHandler) GetDeletedCategories(ctx echo.Context, params GetDeletedCategoriesParams) error {
	var request GetDeletedCategoriesRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedCategories(ctx.Request().Context(), request.(GetDeletedCategoriesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedCategories")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedCategoriesResponseObject); ok {
		return validResponse.VisitGetDeletedCategoriesResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteCategory operation middleware
func (sh *strictHandler) DeleteCategory(ctx echo.Context, categoryId UUID) error {
	var request DeleteCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteCategory(ctx.Request().Context(), request.(DeleteCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteCategoryResponseObject); ok {
		return validResponse.VisitDeleteCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedCategory operation middleware
func (sh *strictHandler) RestoreDeletedCategory(ctx echo.Context, categoryId UUID) error {
	var request RestoreDeletedCategoryRequestObject

	request.CategoryId = categoryId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedCategory(ctx.Request().Context(), request.(RestoreDeletedCategoryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedCategory")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedCategoryResponseObject); ok {
		return validResponse.VisitRestoreDeletedCategoryResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedItems operation middleware
func (sh *strictHandler) GetDeletedItems(ctx echo.Context, params GetDeletedItemsParams) error {
	var request GetDeletedItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedItems(ctx.Request().Context(), request.(GetDeletedItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedItemsResponseObject); ok {
		return validResponse.VisitGetDeletedItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteItem operation middleware
func (sh *strictHandler) DeleteItem(ctx echo.Context, itemId UUID) error {
	var request DeleteItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteItem(ctx.Request().Context(), request.(DeleteItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteItemResponseObject); ok {
		return validResponse.VisitDeleteItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedItem operation middleware
func (sh *strictHandler) RestoreDeletedItem(ctx echo.Context, itemId UUID) error {
	var request RestoreDeletedItemRequestObject

	request.ItemId = itemId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedItem(ctx.Request().Context(), request.(RestoreDeletedItemRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedItem")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedItemResponseObject); ok {
		return validResponse.VisitRestoreDeletedItemResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedRefills operation middleware
func (sh *strictHandler) GetDeletedRefills(ctx echo.Context, params GetDeletedRefillsParams) error {
	var request GetDeletedRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedRefills(ctx.Request().Context(), request.(GetDeletedRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedRefillsResponseObject); ok {
		return validResponse.VisitGetDeletedRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRefill operation middleware
func (sh *strictHandler) DeleteRefill(ctx echo.Context, refillId UUID) error {
	var request DeleteRefillRequestObject

	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRefill(ctx.Request().Context(), request.(DeleteRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRefillResponseObject); ok {
		return validResponse.VisitDeleteRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedRefill operation middleware
func (sh *strictHandler) RestoreDeletedRefill(ctx echo.Context, refillId UUID) error {
	var request RestoreDeletedRefillRequestObject

	request.RefillId = refillId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedRefill(ctx.Request().Context(), request.(RestoreDeletedRefillRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedRefill")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedRefillResponseObject); ok {
		return validResponse.VisitRestoreDeletedRefillResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedStarring operation middleware
func (sh *strictHandler) GetDeletedStarring(ctx echo.Context, params GetDeletedStarringParams) error {
	var request GetDeletedStarringRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedStarring(ctx.Request().Context(), request.(GetDeletedStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedStarringResponseObject); ok {
		return validResponse.VisitGetDeletedStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteStarring operation middleware
func (sh *strictHandler) DeleteStarring(ctx echo.Context, starringId UUID) error {
	var request DeleteStarringRequestObject

	request.StarringId = starringId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteStarring(ctx.Request().Context(), request.(DeleteStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteStarringResponseObject); ok {
		return validResponse.VisitDeleteStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedStarring operation middleware
func (sh *strictHandler) RestoreDeletedStarring(ctx echo.Context, starringId UUID) error {
	var request RestoreDeletedStarringRequestObject

	request.StarringId = starringId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedStarring(ctx.Request().Context(), request.(RestoreDeletedStarringRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedStarring")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedStarringResponseObject); ok {
		return validResponse.VisitRestoreDeletedStarringResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetDeletedTransactions operation middleware
func (sh *strictHandler) GetDeletedTransactions(ctx echo.Context, params GetDeletedTransactionsParams) error {
	var request GetDeletedTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetDeletedTransactions(ctx.Request().Context(), request.(GetDeletedTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetDeletedTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetDeletedTransactionsResponseObject); ok {
		return validResponse.VisitGetDeletedTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTransaction operation middleware
func (sh *strictHandler) DeleteTransaction(ctx echo.Context, transactionId UUID) error {
	var request DeleteTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTransaction(ctx.Request().Context(), request.(DeleteTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteTransactionResponseObject); ok {
		return validResponse.VisitDeleteTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// RestoreDeletedTransaction operation middleware
func (sh *strictHandler) RestoreDeletedTransaction(ctx echo.Context, transactionId UUID) error {
	var request RestoreDeletedTransactionRequestObject

	request.TransactionId = transactionId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.RestoreDeletedTransaction(ctx.Request().Context(), request.(RestoreDeletedTransactionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "RestoreDeletedTransaction")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(RestoreDeletedTransactionResponseObject); ok {
		return validResponse.VisitRestoreDeletedTransactionResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// ImportAccounts operation middleware
func (sh *strictHandler) ImportAccounts(ctx echo.Context) error {
	var request ImportAccountsRequestObject

	if reader, err := ctx.Request().MultipartReader(); err != nil {
		return err
	} else {
		request.Body = reader
	}

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ImportAccounts(ctx.Request().Context(), request.(ImportAccountsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ImportAccounts")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(ImportAccountsResponseObject); ok {
		return validResponse.VisitImportAccountsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllItems operation middleware
func (sh *strictHandler) GetAllItems(ctx echo.Context, params GetAllItemsParams) error {
	var request GetAllItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllItems(ctx.Request().Context(), request.(GetAllItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllItemsResponseObject); ok {
		return validResponse.VisitGetAllItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetAllIncoherentItems operation middleware
func (sh *strictHandler) GetAllIncoherentItems(ctx echo.Context, params GetAllIncoherentItemsParams) error {
	var request GetAllIncoherentItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllIncoherentItems(ctx.Request().Context(), request.(GetAllIncoherentItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllIncoherentItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetAllIncoherentItemsResponseObject); ok {
		return validResponse.VisitGetAllIncoherentItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Logout operation middleware
func (sh *strictHandler) Logout(ctx echo.Context) error {
	var request LogoutRequestObject

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.Logout(ctx.Request().Context(), request.(LogoutRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Logout")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LogoutResponseObject); ok {
		return validResponse.VisitLogoutResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRefills operation middleware
func (sh *strictHandler) GetRefills(ctx echo.Context, params GetRefillsParams) error {
	var request GetRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRefills(ctx.Request().Context(), request.(GetRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRefillsResponseObject); ok {
		return validResponse.VisitGetRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRemoteRefills operation middleware
func (sh *strictHandler) GetRemoteRefills(ctx echo.Context, params GetRemoteRefillsParams) error {
	var request GetRemoteRefillsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRemoteRefills(ctx.Request().Context(), request.(GetRemoteRefillsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRemoteRefills")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRemoteRefillsResponseObject); ok {
		return validResponse.VisitGetRemoteRefillsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetRestocks operation middleware
func (sh *strictHandler) GetRestocks(ctx echo.Context, params GetRestocksParams) error {
	var request GetRestocksRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetRestocks(ctx.Request().Context(), request.(GetRestocksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetRestocks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetRestocksResponseObject); ok {
		return validResponse.VisitGetRestocksResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateRestock operation middleware
func (sh *strictHandler) CreateRestock(ctx echo.Context) error {
	var request CreateRestockRequestObject

	var body CreateRestockJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateRestock(ctx.Request().Context(), request.(CreateRestockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateRestock")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateRestockResponseObject); ok {
		return validResponse.VisitCreateRestockResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteRestock operation middleware
func (sh *strictHandler) DeleteRestock(ctx echo.Context, restockId UUID) error {
	var request DeleteRestockRequestObject

	request.RestockId = restockId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteRestock(ctx.Request().Context(), request.(DeleteRestockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteRestock")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteRestockResponseObject); ok {
		return validResponse.VisitDeleteRestockResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateRestock operation middleware
func (sh *strictHandler) UpdateRestock(ctx echo.Context, restockId UUID) error {
	var request UpdateRestockRequestObject

	request.RestockId = restockId

	var body UpdateRestockJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateRestock(ctx.Request().Context(), request.(UpdateRestockRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateRestock")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(UpdateRestockResponseObject); ok {
		return validResponse.VisitUpdateRestockResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetStarrings operation middleware
func (sh *strictHandler) GetStarrings(ctx echo.Context, params GetStarringsParams) error {
	var request GetStarringsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetStarrings(ctx.Request().Context(), request.(GetStarringsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetStarrings")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetStarringsResponseObject); ok {
		return validResponse.VisitGetStarringsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTransactions operation middleware
func (sh *strictHandler) GetTransactions(ctx echo.Context, params GetTransactionsParams) error {
	var request GetTransactionsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactions(ctx.Request().Context(), request.(GetTransactionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactions")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionsResponseObject); ok {
		return validResponse.VisitGetTransactionsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTransactionsItems operation middleware
func (sh *strictHandler) GetTransactionsItems(ctx echo.Context, params GetTransactionsItemsParams) error {
	var request GetTransactionsItemsRequestObject

	request.Params = params

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTransactionsItems(ctx.Request().Context(), request.(GetTransactionsItemsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTransactionsItems")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetTransactionsItemsResponseObject); ok {
		return validResponse.VisitGetTransactionsItemsResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x97XLctrLgq6Dm7q3YW5JHjp2cE/+TFTtR3chWJDvZrRzXFIbEzPCIQ0wA0LJWpT/7",
	"PPtU+yS38EUCJEiCo/nUwH+sIfHRbHQ3uhvdjftBhOcLnKGM0cGb+wGNZmgOxZ+nUYTzjPE/FwQvEGEJ",
	"Ei/GMIVZhPif6BucL1I0ePPy5OTkaDDBZA7Z4M0gydiPrwdHA3a3QPInmiIyeDgaRJDEoyTmndVLykiS",
	"TYt3iySrvzwafDvGcJEcRzhGU5Qdo2+MwGMGpwKif1OcDd4MjgcPD0eDGKWIoXgEBegFSHkzTLrH+I73",
	"+B8ETQZvBv8xLDEzVGgZfv58/jPvgeYwSUcwjgmi1Pktk4RQNsrgHDlfTzGepqgJEertIolYTtwDyJ4+",
	"sKawDZAsiW4aXy4gpbeYxI9bkAVOFHX1J5cFSSI0IjhFXZ+ryPWSd7ji7R+OBgRxcCOW4EzMnzA0p54D",
	"XZl9HwrYICHwToztD5MGhzLIfPtci7YPR4NbmDE6YnhEGZxMjJUYY5wimAkUE/R3nhAUD978xSnDIj+T",
	"AqqUe1Qws/ogC+MVBOoPMBi1WNwanF8KjOHxv1HE+KfUlujN/SBGNCLJgs8weDPgTwGeADZDACr5czRA",
	"WT7nXxbhnEHxRMwxGkMiAf6apGjKpdPRYI6ynEOIGOLgoW8MkQxxcAriG1CWx0iMUydqPtfxV0g4uiif",
	"1AT6rADAfHrNgXkrYDEfX1pwmW8uJIzWyApe89k7DXuJuqsKQVewZ7xtxiJBc8zQSC8t4uQyTnF0g2Ib",
	"Ta6G/gi7Er2vzM7qzVs9mfFdS1BDuYrqr9FtwmajMcrQJGGSFuZjxJcFxnNBrNMZpqJDvkBEPnw0YVwX",
	"fewHfyZs9raERb280CCp36cKMvXzFwWgHorDKZsYyLrWYsTGlnjcjK4MsxHOxhiSWCyGajHCNzYOjOd9",
	"0PABs4/Z22J09fTjfwnAzyDBOUXp+RxOUV2h2MSO7b9fJhzIUU7SOooF/IBhECd0kcK7Goacsrgc0CUU",
	"Ldx8XqQYxnUMJRpxnfAU2BsnGSQeEIqR2wD7hL45lMAIp5jUITrjjzURMt7TpK3/eC/+1YE62jEaYOqb",
	"7Y/jmOi9+goJEl9deD4jSPH2erG9mu8To7g/ic4u8Fc0Ry77Ac61XeFjLwiM9KEL3cOfLsoezXryJuiz",
	"7NEMhz8N4zQe9UI1QVCo7fc+ZK1GtqYphrCWzVqROrLd9MPQFJO77WwVsySOUebStPugX6+gzWIf4LzY",
	"o6OcEJQxEOmvdTCqMgFHOUnqg/2WZDecX1WjXuNimshR/LBIFyhKYDoS1oGvEaJMDvMbjJmPlDlWILw6",
	"i5MycE4oOmdo3iRXPuG3+Z3vZyVqoLYFFZNVv8+cSw3jAvcdIZic4VgCqFWxMYxHfDAkdL0JJmONAK18",
	"cWVtgvOMY/FvMkqyrzCVukTGbQKYjigiXxEZIT4BRzVmI5izGcpYwte91DvMobjAth5oErEe8q+xHhA0",
	"SdLUekQZJJyW7OEJzCgU9ofx/IuXGvmOkLcwviqw8o6Q9wZi3hFSKprv1XzvCPn96rzAzTtCzhV6rgV2",
	"3inkvCPkA2anFfTw5hxD9oB8D7SfaGFkP+VUYT+5Eliyn10rNFXmKPFUvOBq8nuckyyhFOXEJBeYRzMo",
	"qEP8MYpJ8pXz1dcEZRlOKCKJNNzxHEeQzjhH4fTOE/GnenT5x+hnNfof9uiXxui/itEfjga/fvp0KZFc",
	"Y0ZBmKMIx50OD4NHHrjNRqnSdds6XchmtMaYuv+RCYGLNdtkyChFE2Y5rF59f+QlUFT/BSKjcZ7F0qr1",
	"6vgVJikcp2g0IXjev1eesST17TbO70ZpMk+W+8ZCaPhvhhvRnqTWWm5RTd7GtlnNMajPznApWz7w8S3u",
	"betoMno/25SOhIPLqZsINx/7Cn1RzEcaqcXUdqaPg/QCZXmhoTk8o2LcYiTvIeU+Wx/OX5ES27BD2cEL",
	"lsxhamjDvWn+MXpYE1jLEJkQ8lpxK029VycnJ+DZ8auT/3w+8PwgPdAIZTHtwZgETQzRVnVAThCBKeBC",
	"V2NhQXCcRwwkmfipt5caNryc4xwZyjPuUjgVRo8sMV5bf1uCNaip2tWtOa5pC7ksFrFisQuH7nJSSPu5",
	"l+utXd7L9dbiZYmupiN+uRFKt/4y/SsU8bjTAudi+3heFbcXun5+x/dnpaLrX5bHtWzioa5xMN4WHZQW",
	"qh9wncySzi2+l94icKWm76pN3sbxWn0XDs53LX2xO+0sOrt2mrXsXivZiVazPsoYMIymtzAGpY39ATMQ",
	"4SxD6iTqIqE0yaZgkqA0puA/v5ZHFgCmBMH4DqBvCTWPbkCGGdCmrn6WUPEYpim+RTFHY04RIIhSnBNx",
	"rKpbRjDjLa3XADLpuk3mCIyRZHpl0ILfrwC3ikCG5fmstm2BNP2BNv3/N84BJEjCUbFx5QFBjJEEs/gk",
	"4emtP9Zyw/GK07/jsTR6HS+05euavDR/a2/9bNYLOrWcBReUW9hn5gLTqVrj92KJ5SN96CZX+J0GqHxj",
	"2OnWw1O5vrXH2vySL0xnxAWdup0REtaqM4I3rzgjLui04oy4oFOHM4J3tZ0RF3Rac0Zc0KnDGcHnaHBG",
	"fEC3vSKABi8F5788eXFy8v//7/+zuH+5cKBHB9m0R748MrSkb/hHRdB5B2ioSAyNcpf8+4BuV3ji4nsM",
	"UHX6N0LWpIus1ENufdwYUmR+3bJ+78oX29uR6ctu+PY1+Zj2x1XU6q8I/ofe/oc6HJetWpsPRzzWC7FW",
	"b8MjvQKrcAgUzoAGJr9ClOHoxnFWSZKviPTwkvaj2XLqJsr1Qp4ao4g3ZJjBdBRhykYz72UyOjEWefcS",
	"T7zA+8Sb1owFdX5og1yDRk3kt4ytIhtP+nr1lz0OkK3lN0xSDOt4FU/LvlkuAssqXf1X0OzVYwnFWWE/",
	"Ch89XqB6O7kdBCNZvATkqL64rnWr4bWOMglXA3kZarbDWWgEvlfFe1b6OEjsQkZCRzJS0xHQQ3IEEhUe",
	"ZFhdt1AaXSoWA3A9AkBwk2BqRP2ZYQ99JZPxuW7p1MDKBSa60djlkVkD+S6S6AbFhs4y2ghiRqZXxIUY",
	"ae05kKHCCfy/sAhA6OTRMsK0RpEOPWfw8uQHaR3+0Ms6zCKU9ovlKrtsN5irz6EezXsBozr0gEV3aEaJ",
	"p67A6axUFbz2b97FvX2bYcjWD0swW4cxGlMmEmrfpyBr5pTCj6+9hdpro6mn7ocq+n5SH10kJciYCC2d",
	"CcwmIsA7mqGIC9MZSlMMKcVc72QzRDx9XHK2Mzm6/iHmUHBwQSKnUm/VhPLXr3zaUzmtfPJRTi4+RIbm",
	"a6FhM/kpkNsJeFaM8RzIECAZZbKPAubV924Bw3GGczbiz4rvsGEqsAB0ayBTbDyG7x282iO8k8SFcdEE",
	"sGgDkvjIpQTQPEJIRut7fIqKAfOHz1OglJTYcq5b5B0Vy+UtOowlcMuDKgAGa1MGiXTPLgiOEKUo9mZe",
	"a1g1ivn0shxRgNFgQx5U+HNfe1l16BYlsqFTeV6TcR4scz/LPIlL89w/ZrzNlN9dO/6JGuNimHWcMK/W",
	"yq+BuQnD32JhY2eZJFlCZ3JrQVnMP9h3YxEDvi/7qyeXephy1qqmut44YjVpEU5s/dZRX+phJbZYf4Ix",
	"sXpURBrrs8tdtnFfepdACFbtLlm1mrZaFNANW6k2RH3t1FZXo80udbJeCW/oQZLopmkkVXbCY7T+KvCu",
	"McKu+Wc7fZCejGOM41BSl9u7YyMvrI3rjHkM+7Dd2Ot0HrceVwsFQgWHjWKcoV5q2Vr90ivS5PbkQP6x",
	"XngP8l+HOtuXpYxT7f5sdTTIs4Q9gg+bdehiv6szhDlrA4vaGnhbdL0TFU7vDIM3KBtFkKARnojiN4V2",
	"3LxROpXY+pxqisqLT3zGM0jQx0n9paGcV96cFdDY37fpb3N+V+M3ub/H+hYhiCx37OsxOvnx9avJ8cv4",
	"p38e//CPV+Pjn/4RxccR/Omf8McfXr3+R2x5HvM8cZ5ufl7EkCGrWor7+HQ7QYTt5bMOvHjVg4Or5Xo2",
	"BwW2Jd/vfsCgX6J8A1JCRmprmOFKE1IfkawZQhpDSOPqEihXkQdZkSd8EBTlJGF317y9kiN87xQ1IgQJ",
	"cURHGN8IB5ykh8Hb06vR6c8X5x9G1++ur0vg4SL5LyQIp7N7U8cURzAdMXwjZbvoP0MwFqcyqv//Ov6N",
	"tzr+JFo5BrFLmLWB8fHD24+nVz83gMMxlGQTzIdIkwhlFJXx6IOL809ckSUpB5GxBX0zHOIFymTKzgtM",
	"pkPVaThP2FDwV8KE0vNxgbLTy3NwDGQ5wK+IUEnTL1+cvHj5UnIOyuAiGbwZvHpx8uIVV4khm4klGsIy",
	"4cJmiV+QTBQaQ5pEBUeo5t9RwL+GU56sqzJFjx6C70Di7/NY9j0tHDQE0QXOqKSq709OZH0qcX4u6Gyx",
	"SJNI9B3+WyUSSLJtdEZ5ahXLloeosofw91j5m3kUIUoneZregSmuYoXP+/rkZa/vbAOurJrhgMXOVHs4",
	"GvzQE8NLz+zOLzOlyeDNX/dKBPz15YFbHaLc6196HengC2+uyXgItbruJEgRr6K9XxV6BBHM+N+IUuke",
	"5COBBcxQ2kKcupjiCik0gpkogIkJavAK0ZFK/mvSCB5Xz8QY/8iC5su+E/brk9ebmbmevylm/2kzs5/h",
	"bJImUs/fY142S0EvIItmdYaWVoxBY0WfKste8gG0zVs2Uvm6b3F89wiWzdDtqLlwtSqM19KgwoBW6yN7",
	"dB8e1N9HlU3/lPfOXFBAbJBABEkMFkkmWW5D1G/mfgcRF0Scr4hTvsU26fYdNVQUSdpgKONBW0Sc0kpW",
	"Id3afJ1cNjXfoaAkX0sDh+QzKr1bo/tIvjMLQUH6BekXpN/uSr+/SbPP4PcrWdKLYb3ChRRkGPwibitp",
	"8jv8icYURzdINE0TylAGJpgAyk28f+UnJ9//CCKYpmMY3YBn/E2EcQpglkhnBH3eYvH9flUMX7X7Xkq6",
	"r/DrbcKiWZJNwSXBDEc4FfVnhSNK9FI1RJQfsJSGjOToyFg4fVD3eTEl0KowaQjTaxQd/4nG1wK+49Mo",
	"QgvWPmx9DD2BFzS3BTIc8Dw8yMtYKHv0Qjcvx2r3Oa9taqk9yWM7EuVzhwsZc1iC2el/9jDDFZqDY8kp",
	"q47uq57eigDjDW3hJbNTaKOvidM3TFOg2zlI+Bqlk6vi9QISOEdMSIW/agcUcIqASrg+kk7ov3MkThuV",
	"D3khS9A6qKYlAKN2HiNmEMcg5bE7BQtEgBrfNbU8RXvs3CJCAMRGXbsiA8w1qYhXGMUyxMMxs3pTY+Tq",
	"tO+y2H9SlMX9p/yyUjW0OLL0Kq0Iv40WSgX1OmHq0dZgAM/8FIHYruxjYjCEoDhNXcW3+Ajdjcs5LiEw",
	"Sf7P/njQNaKrYm2OGTpWL4eCywQROjdxybNQp28WvGOLOtHKygDtkHan4ojX5kiQZCBC8uIvF2sataGa",
	"dJZazuE8yZI512N+OHFIqNXyLUFxQlDE9DU/7RqG1dqf4E8cF/ao2n4KP4EvVsIXAqf63hwna/yhWnRz",
	"B0onunEfJnElCQu0gkRUhSxAdPOLIw+5F++snF189g6Xr/tuzr+ZmgrvV0SSSYLiIzDHGboDM0jBGKEM",
	"wDiWJTPNBIDtssTrk+/b8qnjJBZOBr2assC1+ug7xAyvh+OsU2aOgzy7yfBtBjCRJTspxVEiHEe3CZsB",
	"NkuojY2fXIW2DSIuKpZqsHaTu434Ex8e55tdt0IvWoEYZ1DfUelU7Iv0sV3T7AvIt6XWawA2rNh3TBtU",
	"e6sEHvFX7AtK71Lt5bBBsV+zAiPRbIs2hqfTFNFh/Wpfp6z7JJsLvrG7gEkKpzWZJ9srl9yfvMMnLO6o",
	"XW1oTO8DlSXuMu68VNjh4ZvBbGqdwrhwFg5GwsGI58GI6Xzr1Eesxg5l5EzGuamF+WS3PnSn4/skZYiA",
	"8R0oUqndKklFMeiXo/pU9YQqnfbNhezUGJo0hcrUe6A4vD55tZmpyysMvSSQjcfG0zp5SzCAIEO3JpvW",
	"g1AwrcqYZU/n/MtaDuRBY4XFVrfWlam2TlqVrX3zlLVthWIf9vYKZ5n7+6073uu3MlQhEiolBTgz6lQ4",
	"1YCuTjZ7/mnEiIXEis2y6iMUwvuyLsXDkCCKmLt28xV/ZTo3v6NAhtK5xXpze5tsRDsrtLBVcTz/uV5k",
	"RehVC8hmxpGNWWyj2fXcnVzZpF+1kIZAYuWrD09DCHLc12PsZkzabJbpFmaWG23LlGvr1BT91GnCcW0Z",
	"MAymiPmacDGawDxlgzeeNyBWp8wKc674mlYA6oZcAcHLJUGgCJJoBorSFE6bTrQZtIXCfVnHBtm7sIIr",
	"m3qtFuASXjb/4b0NvJLhPHb9K8RyklFhnWx5w98Fob6XYrVJRzmNYwAzMyhUnOZABseQIqcBakjHNRmf",
	"BW86Nrp2eB/WeEzeAlWTXiy5hB6o7hPc0v1VHssYkeyaIlepwZ/F80ZT9AKSG9lEke15vAd2hSPSItgN",
	"wW7w2+DcGRBL1dToW0VjL5hrqzvhISuMgZuXUVd9ahK0ZunuKlOuXmV21FR0ntlsRAIEFg8s/iitt2/y",
	"l3CGNR/KlLu0ZzYYlwoEnEESr1Y+dMZUhjS0kIYW0tD2Jlo17DT7kYTgFXXTkD50iSnzSxja2q7hSudb",
	"TRafp0z/dLfwE6zqWrDlNGjr3tEvawxHas6GOpiqL0HO7XmylVuhHt4Xl362upblTQBU5FY6pWLpXPaX",
	"jRu1s4+aIbAllA1AeSdq8Gw/FbbGRGdVPgVFptUpJlt+R4toe4dvTDLsDrrGts2ydTMZ3UpE+lqqPZIY",
	"Khcku6ZmPbWqlWhRJ0GLCnHka5C2IRagTzmMiva2VOK8t1PUN5P+cLyiIYU/uEVDCn+wKp6gs0AXL/By",
	"iXaVYrnEdPd3D9s7Sktw1+YfXadvspQkwTsZBM4eCZwO7XZ4rznT3zdpqCtN3sk+0mlXnB1VLcwGwUBT",
	"8FEGH+UO6hWtHkpN3O0+Ss22++Wl3Bjjdnsquw3IHr5KvRqrqrYS9JvgNwx+w9VXoavoVWuuSSeijNsK",
	"0z2tbIhQKS9UygspiUKurLJ63hJl87av8oXCfaFwXyjcFyo4bEIkN5c5axHLw3vjl2ceeVvVwdKhZhDp",
	"fhnn9uc5oLAxtsvJt60EF/x165zVIP999dTVKpI258G3SIRfEAuiYPuiYNcqpwZhsOfCoN17bzRvd+AH",
	"2bAqT74DoAYjbDlA1mCUBd1l1z3t7MlJriXtouE9N821hdRH+PF+vhKQoXmQgstBwtHsBkEt3PolsAnC",
	"qvxfnCRakz+gFbXWAkIRsfY4f5+icT7Rd7S4fi7GWZPrTzUZqSa9Zg8bzFPeYI6s7QUTKSqf0DaTs9kw",
	"giR2xKapG/YZLuqTihsgRevGkNv6tfyqvb2tqHZn8t0K7+RPYkcg7VHf+/qFKO5/c38SP7pk6+5flFA5",
	"AT20EJZdY/cURzAdMXyDstoJKJcBBp9PMZ6myJ/Tf5HtG7xqDlYvOjiZvXjbqjpeqdusZTHkhIKcpABO",
	"GCJ6HZoj3kmv6Prqzv1K0lQbOAhIHALMEapPLmcIxkhm0PyGJSEsN1AzrA+B17bDa+28NByjaZIN7/8m",
	"owxnEXroxyar4avyip5Wxvr9CggY3RaI/oLAQWvgoN2n4wim6RhGN64UBflG3BolCRF8PM0F7bjpt6VD",
	"hX71pB2Uaw4CIhw3XlMvXz0iv8qaySdYZM28EmEifqIsXuBE8PhSrOIYp51TdphiF5DSW9zHYil6+Fot",
	"1V5OsXtZvl+//WJ+tK/9UvTxsV+KrwkGTFCqdtWA+Zs0F7n//UpsDcLj0Ffl+hONKY5ukGialpck0ghm",
	"4F/5ycn3PwK9Q4Jn4vpEjFMAs0Rdu/XcFVPwFpMM8Z3k96tiguo9ii9du8D1bcKiWZJNwSXBDEdY1BY1",
	"BL+SQEr0N+9BKMvnHI+fF1MCYzPj3hAe1yg6/hONrwV8x6dRhBasfdj6GHoCL2huC2Q44Hnopo/GfO8/",
	"YJrI0w2x5WkcGSThzPo21mllslzq0p3CWjbzkc8fRMsgnINwXq9wFsI2ggTnFKXDZC6WsS0wXrcFqq3r",
	"VnnV5Fy3eBQNe8UfW1M6IpCdpyk7pPRqrHbddVZBvyOxKbZR0Sbg5nnKkgUkbDjBZH4cQwb9P9ia5vMi",
	"xTBu8JMb8AIlFaqG1Dov6K6QRig9cRj3qp0zNC/OgtG3hDK6X6d3hkhwyOjhvfjf9561LrlRBslXxYdn",
	"3Ice1hXsoADdSMkHpVyEw/K10raQ5Xt6Km5ttc35f10cU9VzdpxVqqsjZhr+T3tRivCXcZJB4f6smWvu",
	"zfOg6a5LYDP0jXnq1LJpC6l9Ug02p1HzGQ9Coea4b9OnP8n367gBzZxCFrFrVaU5pNvUpCVJBEU6KNJ7",
	"rUgLYTu85//1V6Od0qKuRSuh4akZqEFdMcsSyKBCP5n8Ky7D91+DlgxFZ6M5/ormHIYORYfOQNnUqejQ",
	"2YXRoJVzNl7LwoZ/M9UsKIIkmgGlgjeEJ4g2gz7xCI87SqivuadSWa5uXak82pUiGLUjdutjV1Hh+kCU",
	"JJQxPvr2JHofoWYtskeVaUsY1KNGRDOL4NdjPHxAtzZbuSwHA1JxPCqNjM0aDx0wCpDiwB5P1IywabBq",
	"TzyCT+sqyPDe+t1DuW9jaK3YWwztqdhXR3Zo+FWQN6Lqy2+KD5f4X2+D+A21/9F0z9AUkwR1F7MzmjrV",
	"buNtK1Ffz/AtmAkUGmOCZwJygLP07nmDkio7uZTUsorkl824NgXYd3vk1uwsqWosr+cFGZHGgitG6qx8",
	"uTadRS+Ci13ku+04OZvhCg7Op6mZKGrbbyenwf/21sDVIfmFPTShBtlgejiLJt5KUNHDqf8UMG7wbojX",
	"GyaxvfX4WbtL66l5A+WUSsZ+kMzJBneUQIU9tZvWWjctRCiq2+w6Ga5e3ZKIWa3GdRI0rnD4FbbDdmVr",
	"WNijrba5aCXuvPXaP8/FoLsnvbZfa14icm+LzJuVtVZ7XlfQoZeDhMOxP8dzScEOjz2VC+KvQw+TqPZ0",
	"MKnCb3Xn0rl8cSDK1wd0K/mpIbRqCz6uJniCthUC+HZQ3dJSp1vTskuidrm5MreIKn1cOyqotllyNNy7",
	"uv3smz0uSWkoEO0+nAbeFA6cwJabdRytRn05CepLEHcHKu76aC7DRRKxnKB2r5GUj0C3dXiLON4ui9dB",
	"WPbPjlxk0z3Lj9x9VlmWSbyYoiDfNr7Q3pfd5Y0nS59P5ABSECrOCW0nxynKOOmhGKjGLmLUb1pp8D3O",
	"SZZQinICBLm5nc2TstkGU0H6uZblB7sdzE6/brgGdO+vAVXkLxlHOmXi4sKbVhZSjUHR2MFCKob5tGyy",
	"WzljGvYDzhYz19pLShgl6PbjDAqa1PfYY6ggyHZUkClx1CDJrKu72vzPl4jMIYc7vVMSjnKDTpcvfXb9",
	"+fLd1enPF+cfnjdkoXiWgN/4tVwhv3zXLsyzNO2NHTnp2ff51Klk9kZn9RWiDBMEYFVRqbGtamnrKk+A",
	"fYOzNYiNIDa6dYQ+FXa1LPGotKvkSa3g7gFZQFt1ZrRXHX76AXPBUtlnKeRZQ9ZprlSkk4/RsmS5zFod",
	"zlBi9iBSBCzy2o4+UgHi4KyZjhK4tlHzJNk72DdBrASxsrSe0V36uCZqGksgV8SMroQcTJ2NmjructDB",
	"0gmWzg5LIL8ivx12jqi63cPM6Vf6t1pYONQAPiBlhNWKAW9eFxEwHK6F46zn7TZwng5jB+smCJQgUPpq",
	"Fl4lF0sB01Z2sZAsvtUXt1DxvCjxuPsmjb02j6wFubvVyC1iCYbNgRk2/cv6NRk2Khjfy6bZ72J/wZzZ",
	"WnZHKOO5ASOmoWZU1X55QkwcTJcgPILw8NEYukvQaTmiveVNZopX3blw5BKqsAWL5IAskh6FlxoSX0Ql",
	"Aw8rpF/dl90ohRQsj63UPQjF1dZqcThrM9nWxt4za7AwgpAIQqJt5ydokqSpn22h2zZbF1dFi2BfLGlf",
	"7IhlwL+poAwvU0eufWdFEGKQSLAyDsrKUEs/vJd/LHfkIfv6mBqKIL31F6LbOzSYAuJgcDwVXUKSx5a0",
	"CTX5wRkdBY+1mR1PhHGD8REERhAYXUoBZZD4mR+8JUmyaZsBcq3aBAvkCVggesG9TZBi9buMEGqSSbBC",
	"DsoKEQJneK9JYDkrRPf2sUN8ZVKp0Bjk6VBpDMiDNfJUlAtNJFtSL4rpD84iMXitzSZ5UkwcLJMgPILw",
	"8FEWGIEZhRGfxM9IsTo02ymf7GbBVtl3W6VKKF72ikEFnSYLq1JMMFsOymwx1394b/xazoAxBvCxYUxK",
	"9daAmNXJlTRrfUUwZp6KPmJQy5ZUEhOCgzNpbL5rs2qeJlsH8yaIkyBOulWLZL7AhFm3uLivBD8XDUu7",
	"YELwHEBwdv0HmCRpvaigbG/c5tJ8r+U8T1mygIQNuZZ9HEMG2/R9MZ3XLVkeenDXZz2s1FSZI0qVQdFG",
	"ABeymSCsDLMRjCK04GtmGhWVj3WYDp0fryTmJE/TOyApwbykJwjSJ3iL+BnOJmkSsf0SWgVNKqnVmgv3",
	"TIzzHIi7BNNU5sOB24TNOE9z3QbALAYLOE0y6NSQfkHsNE13M09Ofs1GLqF6L7AFxneAMsia5tLv/C/9",
	"vRY9WiespixX5rRzlh93Y2k5acudfOpV801bLcPa9/n1ufGv7XOMywRDguNWEhyDC8v3zmSZW5hkEZ4h",
	"ouD2E91Fl+WleDFEkOdBnnvL8yBQg0DdXYGa4inOHfLzN/n8yC1di7e2nCwee/vYpMWY4ukUxYD33bTJ",
	"FuEsQxFDu33x9NG9MN9xNsaQxIJbbKuGN5QL6pODxzfElvy7XU28M0+tNrPPXTNIGIghQ+70gPqGR9go",
	"ru56nRr+uyz2nwRlcfcUIY2wTxph04ZTThhOwvd+1yuWUonJOWbo2F9a8ubtQpO3CKJz70VnbYpfUZri",
	"U0oxOJuh6AbnDJwLagfnMYCU4iiBDMXSouyEIVJjjBIxRtVO6UZsCc5HEiMCzn/uDwTmPTunfrKbCOfU",
	"Uf+9pGTwR+0o1uxhY3lyGwtlOLpp31KKRs6NpHi3W3uIBnoz+wdFkESzFfqXFF61i+nJCreS/DzFmujg",
	"UWrDIMvH+mcO5CwYZYyPHsSonxhVBCbC05yhI2cEcVUPalFUE5+ywVXxtjlUZHksfEC3Bc+4UqvFK8Aw",
	"iAQwtYi1eiDI6qiyBTCJmjjw3xMNx9CEt88RZYYIMFWp4b36qys6XQaitsgHXctHv/WuCaI7OIuCaNg2",
	"Epyqgm0Pl59eb5afrBjRfd1N3cHenxdx+3YqG+w0u2xxf88Xsd/+viMh5u+TLKEzUTepUPmDCAkixHM3",
	"7q6tA9NUJKpTEGMZSeN0cFwbpXd2y8NRgL3pKBoVlbrauMG6B95clnU64bvmOeQjzIKNVluEqNnhLCcM",
	"fua9d5CohRTC2LuUAJfJvN1XZJ8BPhNHQPS5S0DvdD2BzZ9kriPY0UBxY8zjr0mM9MFzJWHfBcAsidFI",
	"NnfJ1THGKYLZ+vehUJMh1GQIgrxNkFsrXZfnHhd0lclISdYi3vUVXp1S3iugvRQT4n6ebcqIvsznjoMO",
	"jLPnjCN68qEkueYk5fsgY4s3w2GKI5jOMGVv/nnyz5MB3/XK95Q3QMdjSF4wlKIIzzOYRXcvMsSGcJEM",
	"v750dOCt79AtTicvJoQ3Gxiw1QsppCIeh2GQU0S+o6b3Q+aYKGYRH1rflB0DlCnQumuZYNvdvbK/1Msr",
	"+A2joh3AM4JgCuY4Q3fPqxWyO0aKcSbtQ/Dsa0JY7hhH6rr1UcqL0cuMlySTJfJmeFHLA0mQaxQh7gDO",
	"AIUpahhAihgXBMZ19jJzKJmLHGtjbtnEiQVZXwMTVWCDq7C6ok45gk6tf/jy8N8BAAD//z8SHnMC7QEA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
